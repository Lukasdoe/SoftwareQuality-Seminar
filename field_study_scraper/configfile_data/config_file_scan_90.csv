,commit_hash,file_path,filename,action,changes
0,166eb699c75b60979c3713c1492f98150ccfcac4,processor/src/main/resources/org/mapstruct/ap/internal/model/BeanMappingMethod.ftl,BeanMappingMethod.ftl,5,"{'added': [(23, '        return<#if returnType.name != ""void""> <#if existingInstanceMapping>${resultName}<#if finalizerMethod??>.<@includeModel object=finalizerMethod /></#if><#else>null</#if></#if>;')], 'deleted': [(23, '        return<#if returnType.name != ""void""> null</#if>;')]}"
1,166eb699c75b60979c3713c1492f98150ccfcac4,processor/src/main/resources/org/mapstruct/ap/internal/model/IterableMappingMethod.ftl,IterableMappingMethod.ftl,5,"{'added': [(19, '            return<#if returnType.name != ""void""> <#if existingInstanceMapping>${resultName}<#else>null</#if></#if>;')], 'deleted': [(19, '            <#-- returned target type starts to miss-align here with target handed via param, TODO is this right? -->'), (20, '            return<#if returnType.name != ""void""> null</#if>;')]}"
2,166eb699c75b60979c3713c1492f98150ccfcac4,processor/src/main/resources/org/mapstruct/ap/internal/model/MapMappingMethod.ftl,MapMappingMethod.ftl,5,"{'added': [(19, '            return<#if returnType.name != ""void""> <#if existingInstanceMapping>${resultName}<#else>null</#if></#if>;')], 'deleted': [(19, '            return<#if returnType.name != ""void""> null</#if>;')]}"
3,166eb699c75b60979c3713c1492f98150ccfcac4,processor/src/main/resources/org/mapstruct/ap/internal/model/StreamMappingMethod.ftl,StreamMappingMethod.ftl,5,"{'added': [(20, '            return<#if returnType.name != ""void""> <#if existingInstanceMapping>${resultName}<#else>null</#if></#if>;')], 'deleted': [(20, '            <#-- returned target type starts to miss-align here with target handed via param, TODO is this right? -->'), (21, '            return<#if returnType.name != ""void""> null</#if>;')]}"
4,166eb699c75b60979c3713c1492f98150ccfcac4,processor/src/test/resources/fixtures/org/mapstruct/ap/test/array/ScienceMapperImpl.java,ScienceMapperImpl.java,5,"{'added': [(95, '            return target;')], 'deleted': [(95, '            return null;')]}"
5,166eb699c75b60979c3713c1492f98150ccfcac4,processor/src/test/resources/fixtures/org/mapstruct/ap/test/bugs/_913/DomainDtoWithNcvsAlwaysMapperImpl.java,DomainDtoWithNcvsAlwaysMapperImpl.java,5,"{'added': [(131, '            return target;')], 'deleted': [(131, '            return null;')]}"
6,166eb699c75b60979c3713c1492f98150ccfcac4,processor/src/test/resources/fixtures/org/mapstruct/ap/test/bugs/_913/DomainDtoWithNvmsNullMapperImpl.java,DomainDtoWithNvmsNullMapperImpl.java,5,"{'added': [(146, '            return target;')], 'deleted': [(146, '            return null;')]}"
7,166eb699c75b60979c3713c1492f98150ccfcac4,processor/src/test/resources/fixtures/org/mapstruct/ap/test/bugs/_913/DomainDtoWithPresenceCheckMapperImpl.java,DomainDtoWithPresenceCheckMapperImpl.java,5,"{'added': [(131, '            return target;')], 'deleted': [(131, '            return null;')]}"
8,166eb699c75b60979c3713c1492f98150ccfcac4,processor/src/test/resources/fixtures/org/mapstruct/ap/test/collection/defaultimplementation/SourceTargetMapperImpl.java,SourceTargetMapperImpl.java,5,"{'added': [(136, '            return targetFoos;')], 'deleted': [(136, '            return null;')]}"
9,80d26a1a9c0ce2a7c5312d9ed498ade8d5cdedc3,integrationtest/src/test/resources/defaultPackage/main/java/DefaultPackageObject.java,DefaultPackageObject.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, ''), (7, 'import org.mapstruct.Mapper;'), (8, 'import org.mapstruct.Mapping;'), (9, 'import org.mapstruct.factory.Mappers;'), (10, ''), (11, '/**'), (12, ' * @author Filip Hrisafov'), (13, ' */'), (14, 'public class DefaultPackageObject {'), (15, '    public enum CarType {'), (16, '        SEDAN, CAMPER, X4, TRUCK;'), (17, '    }'), (18, ''), (19, '    static public class Car {'), (20, ''), (21, '        private String make;'), (22, '        private int numberOfSeats;'), (23, '        private CarType type;'), (24, ''), (25, '        public Car(String string, int numberOfSeats, CarType sedan) {'), (26, '            this.make = string;'), (27, '            this.numberOfSeats = numberOfSeats;'), (28, '            this.type = sedan;'), (29, '        }'), (30, ''), (31, ''), (32, '        public String getMake() {'), (33, '            return make;'), (34, '        }'), (35, ''), (36, '        public void setMake(String make) {'), (37, '            this.make = make;'), (38, '        }'), (39, ''), (40, '        public int getNumberOfSeats() {'), (41, '            return numberOfSeats;'), (42, '        }'), (43, ''), (44, '        public void setNumberOfSeats(int numberOfSeats) {'), (45, '            this.numberOfSeats = numberOfSeats;'), (46, '        }'), (47, ''), (48, '        public CarType getType() {'), (49, '            return type;'), (50, '        }'), (51, ''), (52, '        public void setType(CarType type) {'), (53, '            this.type = type;'), (54, '        }'), (55, '    }'), (56, ''), (57, '    static public class CarDto {'), (58, ''), (59, '        private String make;'), (60, '        private int seatCount;'), (61, '        private String type;'), (62, ''), (63, '        public String getMake() {'), (64, '            return make;'), (65, '        }'), (66, ''), (67, '        public void setMake(String make) {'), (68, '            this.make = make;'), (69, '        }'), (70, ''), (71, '        public int getSeatCount() {'), (72, '            return seatCount;'), (73, '        }'), (74, ''), (75, '        public void setSeatCount(int seatCount) {'), (76, '            this.seatCount = seatCount;'), (77, '        }'), (78, ''), (79, '        public String getType() {'), (80, '            return type;'), (81, '        }'), (82, ''), (83, '        public void setType(String type) {'), (84, '            this.type = type;'), (85, '        }'), (86, '    }'), (87, ''), (88, ''), (89, '    @Mapper'), (90, '    public interface CarMapper {'), (91, ''), (92, '        CarMapper INSTANCE = Mappers.getMapper( CarMapper.class );'), (93, ''), (94, '        @Mapping(source = ""numberOfSeats"", target = ""seatCount"")'), (95, '        CarDto carToCarDto(Car car);'), (96, '    }'), (97, '}')], 'deleted': []}"
10,80d26a1a9c0ce2a7c5312d9ed498ade8d5cdedc3,integrationtest/src/test/resources/defaultPackage/pom.xml,pom.xml,1,"{'added': [(1, '<?xml version=""1.0"" encoding=""UTF-8""?>'), (2, '<!--'), (3, ''), (4, '    Copyright MapStruct Authors.'), (5, ''), (6, '    Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (7, ''), (8, '-->'), (9, '<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">'), (10, '    <modelVersion>4.0.0</modelVersion>'), (11, ''), (12, '    <parent>'), (13, '        <groupId>org.mapstruct</groupId>'), (14, '        <artifactId>mapstruct-it-parent</artifactId>'), (15, '        <version>1.0.0</version>'), (16, '        <relativePath>../pom.xml</relativePath>'), (17, '    </parent>'), (18, ''), (19, '    <artifactId>defaultPackage</artifactId>'), (20, '    <packaging>jar</packaging>'), (21, '</project>')], 'deleted': []}"
11,80d26a1a9c0ce2a7c5312d9ed498ade8d5cdedc3,integrationtest/src/test/resources/defaultPackage/test/java/DefaultPackageTest.java,DefaultPackageTest.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, ''), (7, 'import org.junit.Test;'), (8, ''), (9, 'import static org.assertj.core.api.Assertions.assertThat;'), (10, ''), (11, '/**'), (12, ' * @author Filip Hrisafov'), (13, ' */'), (14, ''), (15, 'public class DefaultPackageTest {'), (16, ''), (17, '    @Test'), (18, '    public void shouldWorkCorrectlyInDefaultPackage() {'), (19, '        DefaultPackageObject.CarDto carDto = DefaultPackageObject.CarMapper.INSTANCE.carToCarDto('), (20, '            new DefaultPackageObject.Car('), (21, '                ""Morris"",'), (22, '                5,'), (23, '                DefaultPackageObject.CarType.SEDAN'), (24, '            ) );'), (25, ''), (26, '        assertThat( carDto ).isNotNull();'), (27, '        assertThat( carDto.getMake() ).isEqualTo( ""Morris"" );'), (28, '        assertThat( carDto.getSeatCount() ).isEqualTo( 5 );'), (29, '        assertThat( carDto.getType() ).isEqualTo( ""SEDAN"" );'), (30, '    }'), (31, '}')], 'deleted': []}"
12,80d26a1a9c0ce2a7c5312d9ed498ade8d5cdedc3,processor/src/test/resources/fixtures/org/mapstruct/ap/test/imports/innerclasses/BeanWithInnerEnumMapperImpl.java,BeanWithInnerEnumMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.imports.innerclasses;'), (7, ''), (8, 'import javax.annotation.processing.Generated;'), (9, ''), (10, '@Generated('), (11, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (12, '    date = ""2021-10-16T21:06:53+0200"",'), (13, '    comments = ""version: , compiler: javac, environment: Java 17 (Oracle Corporation)""'), (14, ')'), (15, 'public class BeanWithInnerEnumMapperImpl implements BeanWithInnerEnumMapper {'), (16, ''), (17, '    @Override'), (18, '    public BeanWithInnerEnum fromFacade(BeanFacade beanFacade) {'), (19, '        if ( beanFacade == null ) {'), (20, '            return null;'), (21, '        }'), (22, ''), (23, '        BeanWithInnerEnum beanWithInnerEnum = new BeanWithInnerEnum();'), (24, ''), (25, '        beanWithInnerEnum.setTest( beanFacade.getTest() );'), (26, '        if ( beanFacade.getInnerEnum() != null ) {'), (27, '            beanWithInnerEnum.setInnerEnum( Enum.valueOf( BeanWithInnerEnum.InnerEnum.class, beanFacade.getInnerEnum() ) );'), (28, '        }'), (29, ''), (30, '        return beanWithInnerEnum;'), (31, '    }'), (32, ''), (33, '    @Override'), (34, '    public BeanFacade toFacade(BeanWithInnerEnum beanWithInnerEnum) {'), (35, '        if ( beanWithInnerEnum == null ) {'), (36, '            return null;'), (37, '        }'), (38, ''), (39, '        BeanFacade beanFacade = new BeanFacade();'), (40, ''), (41, '        beanFacade.setTest( beanWithInnerEnum.getTest() );'), (42, '        if ( beanWithInnerEnum.getInnerEnum() != null ) {'), (43, '            beanFacade.setInnerEnum( beanWithInnerEnum.getInnerEnum().name() );'), (44, '        }'), (45, ''), (46, '        return beanFacade;'), (47, '    }'), (48, '}')], 'deleted': []}"
13,80d26a1a9c0ce2a7c5312d9ed498ade8d5cdedc3,processor/src/test/resources/fixtures/org/mapstruct/ap/test/imports/innerclasses/InnerClassMapperImpl.java,InnerClassMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.imports.innerclasses;'), (7, ''), (8, 'import javax.annotation.processing.Generated;'), (9, ''), (10, '@Generated('), (11, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (12, '    date = ""2021-10-16T21:06:53+0200"",'), (13, '    comments = ""version: , compiler: javac, environment: Java 17 (Oracle Corporation)""'), (14, ')'), (15, 'public class InnerClassMapperImpl implements InnerClassMapper {'), (16, ''), (17, '    @Override'), (18, '    public TargetWithInnerClass sourceToTarget(SourceWithInnerClass source) {'), (19, '        if ( source == null ) {'), (20, '            return null;'), (21, '        }'), (22, ''), (23, '        TargetWithInnerClass targetWithInnerClass = new TargetWithInnerClass();'), (24, ''), (25, '        targetWithInnerClass.setInnerClassMember( innerSourceToInnerTarget( source.getInnerClassMember() ) );'), (26, ''), (27, '        return targetWithInnerClass;'), (28, '    }'), (29, ''), (30, '    @Override'), (31, '    public TargetWithInnerClass.TargetInnerClass innerSourceToInnerTarget(SourceWithInnerClass.SourceInnerClass source) {'), (32, '        if ( source == null ) {'), (33, '            return null;'), (34, '        }'), (35, ''), (36, '        TargetWithInnerClass.TargetInnerClass targetInnerClass = new TargetWithInnerClass.TargetInnerClass();'), (37, ''), (38, '        targetInnerClass.setValue( source.getValue() );'), (39, ''), (40, '        return targetInnerClass;'), (41, '    }'), (42, ''), (43, '    @Override'), (44, '    public TargetWithInnerClass.TargetInnerClass.TargetInnerInnerClass innerSourceToInnerInnerTarget(SourceWithInnerClass.SourceInnerClass source) {'), (45, '        if ( source == null ) {'), (46, '            return null;'), (47, '        }'), (48, ''), (49, '        TargetWithInnerClass.TargetInnerClass.TargetInnerInnerClass targetInnerInnerClass = new TargetWithInnerClass.TargetInnerClass.TargetInnerInnerClass();'), (50, ''), (51, '        targetInnerInnerClass.setValue( source.getValue() );'), (52, ''), (53, '        return targetInnerInnerClass;'), (54, '    }'), (55, '}')], 'deleted': []}"
14,80d26a1a9c0ce2a7c5312d9ed498ade8d5cdedc3,processor/src/test/resources/fixtures/org/mapstruct/ap/test/imports/nested/NestedSourceInOtherPackageMapperImpl.java,NestedSourceInOtherPackageMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.imports.nested;'), (7, ''), (8, 'import javax.annotation.processing.Generated;'), (9, 'import org.mapstruct.ap.test.imports.nested.other.SourceInOtherPackage;'), (10, ''), (11, '@Generated('), (12, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (13, '    date = ""2021-10-24T19:26:14+0200"",'), (14, '    comments = ""version: , compiler: javac, environment: Java 1.8.0_161 (Oracle Corporation)""'), (15, ')'), (16, 'public class NestedSourceInOtherPackageMapperImpl implements NestedSourceInOtherPackageMapper {'), (17, ''), (18, '    @Override'), (19, '    public Target.Nested map(SourceInOtherPackage.Nested source) {'), (20, '        if ( source == null ) {'), (21, '            return null;'), (22, '        }'), (23, ''), (24, '        Target.Nested nested = new Target.Nested();'), (25, ''), (26, '        nested.setInner( innerToInner( source.getInner() ) );'), (27, ''), (28, '        return nested;'), (29, '    }'), (30, ''), (31, '    protected Target.Nested.Inner innerToInner(SourceInOtherPackage.Nested.Inner inner) {'), (32, '        if ( inner == null ) {'), (33, '            return null;'), (34, '        }'), (35, ''), (36, '        Target.Nested.Inner inner1 = new Target.Nested.Inner();'), (37, ''), (38, '        inner1.setValue( inner.getValue() );'), (39, ''), (40, '        return inner1;'), (41, '    }'), (42, '}')], 'deleted': []}"
15,80d26a1a9c0ce2a7c5312d9ed498ade8d5cdedc3,processor/src/test/resources/fixtures/org/mapstruct/ap/test/imports/nested/SourceInOtherPackageMapperImpl.java,SourceInOtherPackageMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.imports.nested;'), (7, ''), (8, 'import javax.annotation.Generated;'), (9, 'import org.mapstruct.ap.test.imports.nested.other.SourceInOtherPackage;'), (10, ''), (11, '@Generated('), (12, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (13, '    date = ""2018-08-19T19:13:35+0200"",'), (14, '    comments = ""version: , compiler: javac, environment: Java 1.8.0_161 (Oracle Corporation)""'), (15, ')'), (16, 'public class SourceInOtherPackageMapperImpl implements SourceInOtherPackageMapper {'), (17, ''), (18, '    @Override'), (19, '    public Target map(SourceInOtherPackage source) {'), (20, '        if ( source == null ) {'), (21, '            return null;'), (22, '        }'), (23, ''), (24, '        Target target = new Target();'), (25, ''), (26, '        target.setValue( nestedToNested( source.getValue() ) );'), (27, ''), (28, '        return target;'), (29, '    }'), (30, ''), (31, '    protected Target.Nested.Inner innerToInner(SourceInOtherPackage.Nested.Inner inner) {'), (32, '        if ( inner == null ) {'), (33, '            return null;'), (34, '        }'), (35, ''), (36, '        Target.Nested.Inner inner1 = new Target.Nested.Inner();'), (37, ''), (38, '        inner1.setValue( inner.getValue() );'), (39, ''), (40, '        return inner1;'), (41, '    }'), (42, ''), (43, '    protected Target.Nested nestedToNested(SourceInOtherPackage.Nested nested) {'), (44, '        if ( nested == null ) {'), (45, '            return null;'), (46, '        }'), (47, ''), (48, '        Target.Nested nested1 = new Target.Nested();'), (49, ''), (50, '        nested1.setInner( innerToInner( nested.getInner() ) );'), (51, ''), (52, '        return nested1;'), (53, '    }'), (54, '}')], 'deleted': []}"
16,80d26a1a9c0ce2a7c5312d9ed498ade8d5cdedc3,processor/src/test/resources/fixtures/org/mapstruct/ap/test/imports/nested/TargetInOtherPackageMapperImpl.java,TargetInOtherPackageMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.imports.nested;'), (7, ''), (8, 'import javax.annotation.processing.Generated;'), (9, 'import org.mapstruct.ap.test.imports.nested.other.TargetInOtherPackage;'), (10, ''), (11, '@Generated('), (12, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (13, '    date = ""2021-10-24T13:45:02+0200"",'), (14, '    comments = ""version: , compiler: javac, environment: Java 1.8.0_161 (Oracle Corporation)""'), (15, ')'), (16, 'public class TargetInOtherPackageMapperImpl implements TargetInOtherPackageMapper {'), (17, ''), (18, '    @Override'), (19, '    public TargetInOtherPackage map(Source source) {'), (20, '        if ( source == null ) {'), (21, '            return null;'), (22, '        }'), (23, ''), (24, '        TargetInOtherPackage targetInOtherPackage = new TargetInOtherPackage();'), (25, ''), (26, '        targetInOtherPackage.setValue( nestedToNested( source.getValue() ) );'), (27, ''), (28, '        return targetInOtherPackage;'), (29, '    }'), (30, ''), (31, '    protected TargetInOtherPackage.Nested.Inner innerToInner(Source.Nested.Inner inner) {'), (32, '        if ( inner == null ) {'), (33, '            return null;'), (34, '        }'), (35, ''), (36, '        TargetInOtherPackage.Nested.Inner inner1 = new TargetInOtherPackage.Nested.Inner();'), (37, ''), (38, '        inner1.setValue( inner.getValue() );'), (39, ''), (40, '        return inner1;'), (41, '    }'), (42, ''), (43, '    protected TargetInOtherPackage.Nested nestedToNested(Source.Nested nested) {'), (44, '        if ( nested == null ) {'), (45, '            return null;'), (46, '        }'), (47, ''), (48, '        TargetInOtherPackage.Nested nested1 = new TargetInOtherPackage.Nested();'), (49, ''), (50, '        nested1.setInner( innerToInner( nested.getInner() ) );'), (51, ''), (52, '        return nested1;'), (53, '    }'), (54, '}')], 'deleted': []}"
17,564455ee452b0b7b3862be969b69d501f5ea118b,integrationtest/src/test/resources/recordsTest/src/main/java/org/mapstruct/itest/records/MemberDto.java,MemberDto.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.itest.records;'), (7, ''), (8, '/**'), (9, ' * @author Filip Hrisafov'), (10, ' */'), (11, 'public record MemberDto(Boolean isActive, Boolean premium) {'), (12, ''), (13, '}')], 'deleted': []}"
18,564455ee452b0b7b3862be969b69d501f5ea118b,integrationtest/src/test/resources/recordsTest/src/main/java/org/mapstruct/itest/records/MemberEntity.java,MemberEntity.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.itest.records;'), (7, ''), (8, '/**'), (9, ' * @author Filip Hrisafov'), (10, ' */'), (11, 'public class MemberEntity {'), (12, ''), (13, '    private Boolean isActive;'), (14, '    private Boolean premium;'), (15, ''), (16, '    public Boolean getIsActive() {'), (17, '        return isActive;'), (18, '    }'), (19, ''), (20, '    public void setIsActive(Boolean active) {'), (21, '        isActive = active;'), (22, '    }'), (23, ''), (24, '    public Boolean getPremium() {'), (25, '        return premium;'), (26, '    }'), (27, ''), (28, '    public void setPremium(Boolean premium) {'), (29, '        this.premium = premium;'), (30, '    }'), (31, '}')], 'deleted': []}"
19,564455ee452b0b7b3862be969b69d501f5ea118b,integrationtest/src/test/resources/recordsTest/src/main/java/org/mapstruct/itest/records/MemberMapper.java,MemberMapper.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.itest.records;'), (7, ''), (8, 'import org.mapstruct.Mapper;'), (9, 'import org.mapstruct.ReportingPolicy;'), (10, 'import org.mapstruct.factory.Mappers;'), (11, ''), (12, '/**'), (13, ' * @author Filip Hrisafov'), (14, ' */'), (15, '@Mapper(unmappedSourcePolicy = ReportingPolicy.ERROR)'), (16, 'public interface MemberMapper {'), (17, ''), (18, '    MemberMapper INSTANCE = Mappers.getMapper( MemberMapper.class );'), (19, ''), (20, '    MemberEntity fromRecord(MemberDto record);'), (21, ''), (22, '    MemberDto toRecord(MemberEntity entity);'), (23, ''), (24, '}')], 'deleted': []}"
20,564455ee452b0b7b3862be969b69d501f5ea118b,integrationtest/src/test/resources/recordsTest/src/test/java/org/mapstruct/itest/records/RecordsTest.java,RecordsTest.java,5,"{'added': [(64, ''), (65, '    @Test'), (66, '    public void shouldMapMemberRecord() {'), (67, '        MemberEntity member = MemberMapper.INSTANCE.fromRecord( new MemberDto( true, false ) );'), (68, ''), (69, '        assertThat( member ).isNotNull();'), (70, '        assertThat( member.getIsActive() ).isTrue();'), (71, '        assertThat( member.getPremium() ).isFalse();'), (72, '    }'), (73, ''), (74, '    @Test'), (75, '    public void shouldMapIntoMemberRecord() {'), (76, '        MemberEntity entity = new MemberEntity();'), (77, '        entity.setIsActive( false );'), (78, '        entity.setPremium( true );'), (79, ''), (80, '        MemberDto value = MemberMapper.INSTANCE.toRecord( entity );'), (81, ''), (82, '        assertThat( value ).isNotNull();'), (83, '        assertThat( value.isActive() ).isEqualTo( false );'), (84, '        assertThat( value.premium() ).isEqualTo( true );'), (85, '    }')], 'deleted': []}"
21,935c03e822d0df436f374349d4272d3e62fe9874,processor/src/main/resources/org/mapstruct/ap/internal/model/StreamMappingMethod.ftl,StreamMappingMethod.ftl,5,"{'added': [(58, '            <@includeModel object=resultElementType/>[] ${resultName} = null;')], 'deleted': [(58, '            ${resultElementType}[] ${resultName} = null;')]}"
22,935c03e822d0df436f374349d4272d3e62fe9874,processor/src/test/resources/fixtures/org/mapstruct/ap/test/bugs/_1707/ConverterImpl.java,ConverterImpl.java,5,"{'added': [(39, '    public Target[] convertArray(Stream<Source> source) {'), (44, '        Target[] targetTmp = null;')], 'deleted': [(39, '    public org.mapstruct.ap.test.bugs._1707.Converter.Target[] convertArray(Stream<Source> source) {'), (44, '        org.mapstruct.ap.test.bugs._1707.Converter.Target[] targetTmp = null;')]}"
23,5df6b7a75b97e58687027470e9048e6f6534bca5,processor/src/main/resources/org/mapstruct/ap/internal/model/BeanMappingMethod.ftl,BeanMappingMethod.ftl,5,"{'added': [(27, '    <#if hasSubclassMappings()>'), (28, '        <#list subclassMappings as subclass>'), (29, '            <#if subclass_index &gt; 0>else</#if> if (${subclass.sourceArgument} instanceof <@includeModel object=subclass.sourceType/>) {'), (30, '                <@includeModel object=subclass.assignment existingInstanceMapping=existingInstanceMapping/>'), (31, '            }'), (32, '        </#list>'), (33, '        else {'), (34, '    </#if>'), (35, '    <#if isAbstractReturnType()>'), (36, '        throw new IllegalArgumentException(""Not all subclasses are supported for this mapping. Missing for "" + ${subclassMappings[0].sourceArgument}.getClass());'), (37, '    <#else>'), (134, '    </#if>'), (135, '    <#if hasSubclassMappings()>'), (136, '        }'), (137, '    </#if>')], 'deleted': []}"
24,5df6b7a75b97e58687027470e9048e6f6534bca5,processor/src/main/resources/org/mapstruct/ap/internal/model/assignment/ReturnWrapper.ftl,ReturnWrapper.ftl,1,"{'added': [(1, '<#--'), (2, ''), (3, '    Copyright MapStruct Authors.'), (4, ''), (5, '    Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (6, ''), (7, '-->'), (8, '<#-- @ftlvariable name="""" type=""org.mapstruct.ap.internal.model.assignment.ReturnWrapper"" -->'), (9, 'return <@_assignment/>;'), (10, '<#macro _assignment>'), (11, '    <@includeModel object=assignment'), (12, '               targetBeanName=ext.targetBeanName'), (13, '               existingInstanceMapping=ext.existingInstanceMapping'), (14, '               targetReadAccessorName=ext.targetReadAccessorName'), (15, '               targetWriteAccessorName=ext.targetWriteAccessorName'), (16, '               targetType=ext.targetType/>'), (17, '</#macro>')], 'deleted': []}"
25,5df6b7a75b97e58687027470e9048e6f6534bca5,processor/src/test/resources/fixtures/org/mapstruct/ap/test/subclassmapping/fixture/SubclassAbstractMapperImpl.java,SubclassAbstractMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.subclassmapping.fixture;'), (7, ''), (8, 'import javax.annotation.processing.Generated;'), (9, ''), (10, '@Generated('), (11, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (12, '    date = ""2021-09-12T14:37:10+0200"",'), (13, '    comments = ""version: , compiler: Eclipse JDT (Batch) 3.20.0.v20191203-2131, environment: Java 11.0.12 (Azul Systems, Inc.)""'), (14, ')'), (15, 'public class SubclassAbstractMapperImpl implements SubclassAbstractMapper {'), (16, ''), (17, '    @Override'), (18, '    public AbstractParentTarget map(AbstractParentSource item) {'), (19, '        if ( item == null ) {'), (20, '            return null;'), (21, '        }'), (22, ''), (23, '        if (item instanceof SubSource) {'), (24, '            return subSourceToSubTarget( (SubSource) item );'), (25, '        }'), (26, '        else if (item instanceof SubSourceOther) {'), (27, '            return subSourceOtherToSubTargetOther( (SubSourceOther) item );'), (28, '        }'), (29, '        else {'), (30, '            throw new IllegalArgumentException(""Not all subclasses are supported for this mapping. Missing for "" + item.getClass());'), (31, '        }'), (32, '    }'), (33, ''), (34, '    protected SubTarget subSourceToSubTarget(SubSource subSource) {'), (35, '        if ( subSource == null ) {'), (36, '            return null;'), (37, '        }'), (38, ''), (39, '        SubTarget subTarget = new SubTarget();'), (40, ''), (41, '        subTarget.setValue( subSource.getValue() );'), (42, ''), (43, '        return subTarget;'), (44, '    }'), (45, ''), (46, '    protected SubTargetOther subSourceOtherToSubTargetOther(SubSourceOther subSourceOther) {'), (47, '        if ( subSourceOther == null ) {'), (48, '            return null;'), (49, '        }'), (50, ''), (51, '        String finalValue = null;'), (52, ''), (53, '        finalValue = subSourceOther.getFinalValue();'), (54, ''), (55, '        SubTargetOther subTargetOther = new SubTargetOther( finalValue );'), (56, ''), (57, '        return subTargetOther;'), (58, '    }'), (59, '}')], 'deleted': []}"
26,5df6b7a75b97e58687027470e9048e6f6534bca5,processor/src/test/resources/fixtures/org/mapstruct/ap/test/subclassmapping/fixture/SubclassImplementedMapperImpl.java,SubclassImplementedMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.subclassmapping.fixture;'), (7, ''), (8, 'import javax.annotation.processing.Generated;'), (9, ''), (10, '@Generated('), (11, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (12, '    date = ""2021-09-12T14:37:10+0200"",'), (13, '    comments = ""version: , compiler: Eclipse JDT (Batch) 3.20.0.v20191203-2131, environment: Java 11.0.12 (Azul Systems, Inc.)""'), (14, ')'), (15, 'public class SubclassImplementedMapperImpl implements SubclassImplementedMapper {'), (16, ''), (17, '    @Override'), (18, '    public ImplementedParentTarget map(ImplementedParentSource item) {'), (19, '        if ( item == null ) {'), (20, '            return null;'), (21, '        }'), (22, ''), (23, '        if (item instanceof SubSource) {'), (24, '            return subSourceToSubTarget( (SubSource) item );'), (25, '        }'), (26, '        else if (item instanceof SubSourceOther) {'), (27, '            return subSourceOtherToSubTargetOther( (SubSourceOther) item );'), (28, '        }'), (29, '        else {'), (30, '            ImplementedParentTarget implementedParentTarget = new ImplementedParentTarget();'), (31, ''), (32, '            return implementedParentTarget;'), (33, '        }'), (34, '    }'), (35, ''), (36, '    protected SubTarget subSourceToSubTarget(SubSource subSource) {'), (37, '        if ( subSource == null ) {'), (38, '            return null;'), (39, '        }'), (40, ''), (41, '        SubTarget subTarget = new SubTarget();'), (42, ''), (43, '        subTarget.setValue( subSource.getValue() );'), (44, ''), (45, '        return subTarget;'), (46, '    }'), (47, ''), (48, '    protected SubTargetOther subSourceOtherToSubTargetOther(SubSourceOther subSourceOther) {'), (49, '        if ( subSourceOther == null ) {'), (50, '            return null;'), (51, '        }'), (52, ''), (53, '        String finalValue = null;'), (54, ''), (55, '        finalValue = subSourceOther.getFinalValue();'), (56, ''), (57, '        SubTargetOther subTargetOther = new SubTargetOther( finalValue );'), (58, ''), (59, '        return subTargetOther;'), (60, '    }'), (61, '}')], 'deleted': []}"
27,5df6b7a75b97e58687027470e9048e6f6534bca5,processor/src/test/resources/fixtures/org/mapstruct/ap/test/subclassmapping/fixture/SubclassInterfaceMapperImpl.java,SubclassInterfaceMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.subclassmapping.fixture;'), (7, ''), (8, 'import javax.annotation.processing.Generated;'), (9, ''), (10, '@Generated('), (11, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (12, '    date = ""2021-09-12T14:37:10+0200"",'), (13, '    comments = ""version: , compiler: Eclipse JDT (Batch) 3.20.0.v20191203-2131, environment: Java 11.0.12 (Azul Systems, Inc.)""'), (14, ')'), (15, 'public class SubclassInterfaceMapperImpl implements SubclassInterfaceMapper {'), (16, ''), (17, '    @Override'), (18, '    public InterfaceParentTarget map(InterfaceParentSource item) {'), (19, '        if ( item == null ) {'), (20, '            return null;'), (21, '        }'), (22, ''), (23, '        if (item instanceof SubSource) {'), (24, '            return subSourceToSubTarget( (SubSource) item );'), (25, '        }'), (26, '        else if (item instanceof SubSourceOther) {'), (27, '            return subSourceOtherToSubTargetOther( (SubSourceOther) item );'), (28, '        }'), (29, '        else {'), (30, '            throw new IllegalArgumentException(""Not all subclasses are supported for this mapping. Missing for "" + item.getClass());'), (31, '        }'), (32, '    }'), (33, ''), (34, '    protected SubTarget subSourceToSubTarget(SubSource subSource) {'), (35, '        if ( subSource == null ) {'), (36, '            return null;'), (37, '        }'), (38, ''), (39, '        SubTarget subTarget = new SubTarget();'), (40, ''), (41, '        subTarget.setValue( subSource.getValue() );'), (42, ''), (43, '        return subTarget;'), (44, '    }'), (45, ''), (46, '    protected SubTargetOther subSourceOtherToSubTargetOther(SubSourceOther subSourceOther) {'), (47, '        if ( subSourceOther == null ) {'), (48, '            return null;'), (49, '        }'), (50, ''), (51, '        String finalValue = null;'), (52, ''), (53, '        finalValue = subSourceOther.getFinalValue();'), (54, ''), (55, '        SubTargetOther subTargetOther = new SubTargetOther( finalValue );'), (56, ''), (57, '        return subTargetOther;'), (58, '    }'), (59, '}')], 'deleted': []}"
28,b59a23965a0c77206851a118c5b1673819735dd4,integrationtest/src/test/resources/recordsTest/src/main/java/org/mapstruct/itest/records/Car.java,Car.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.itest.records;'), (7, ''), (8, 'import java.util.List;'), (9, ''), (10, '/**'), (11, ' * @author Filip Hrisafov'), (12, ' */'), (13, 'public class Car {'), (14, ''), (15, '    private List<WheelPosition> wheelPositions;'), (16, ''), (17, '    public List<WheelPosition> getWheelPositions() {'), (18, '        return wheelPositions;'), (19, '    }'), (20, ''), (21, '    public void setWheelPositions(List<WheelPosition> wheelPositions) {'), (22, '        this.wheelPositions = wheelPositions;'), (23, '    }'), (24, '}')], 'deleted': []}"
29,b59a23965a0c77206851a118c5b1673819735dd4,integrationtest/src/test/resources/recordsTest/src/main/java/org/mapstruct/itest/records/CarAndWheelMapper.java,CarAndWheelMapper.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.itest.records;'), (7, ''), (8, 'import org.mapstruct.Mapper;'), (9, 'import org.mapstruct.ReportingPolicy;'), (10, 'import org.mapstruct.factory.Mappers;'), (11, ''), (12, '/**'), (13, ' * @author Filip Hrisafov'), (14, ' */'), (15, '@Mapper(unmappedTargetPolicy = ReportingPolicy.ERROR)'), (16, 'public interface CarAndWheelMapper {'), (17, ''), (18, '    CarAndWheelMapper INSTANCE = Mappers.getMapper( CarAndWheelMapper.class );'), (19, ''), (20, '    default String stringFromWheelPosition(WheelPosition source) {'), (21, '        return source == null ? null : source.getPosition();'), (22, '    }'), (23, ''), (24, '    default WheelPosition wheelPositionFromString(String source) {'), (25, '        return source == null ? null : new WheelPosition(source);'), (26, '    }'), (27, ''), (28, '    CarDto carDtoFromCar(Car source);'), (29, ''), (30, '    Car carFromCarDto(CarDto source);'), (31, '}')], 'deleted': []}"
30,b59a23965a0c77206851a118c5b1673819735dd4,integrationtest/src/test/resources/recordsTest/src/main/java/org/mapstruct/itest/records/CarDto.java,CarDto.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.itest.records;'), (7, ''), (8, 'import java.util.List;'), (9, ''), (10, '/**'), (11, ' * @author Filip Hrisafov'), (12, ' */'), (13, 'public record CarDto(List<String> wheelPositions) {'), (14, ''), (15, '}')], 'deleted': []}"
31,b59a23965a0c77206851a118c5b1673819735dd4,integrationtest/src/test/resources/recordsTest/src/main/java/org/mapstruct/itest/records/WheelPosition.java,WheelPosition.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.itest.records;'), (7, ''), (8, '/**'), (9, ' * @author Filip Hrisafov'), (10, ' */'), (11, 'public class WheelPosition {'), (12, ''), (13, '    private final String position;'), (14, ''), (15, '    public WheelPosition(String position) {'), (16, '        this.position = position;'), (17, '    }'), (18, ''), (19, '    public String getPosition() {'), (20, '        return position;'), (21, '    }'), (22, '}')], 'deleted': []}"
32,b59a23965a0c77206851a118c5b1673819735dd4,integrationtest/src/test/resources/recordsTest/src/test/java/org/mapstruct/itest/records/RecordsTest.java,RecordsTest.java,5,"{'added': [(8, 'import java.util.Arrays;'), (9, ''), (52, ''), (53, '    @Test'), (54, '    public void shouldMapIntoRecordWithList() {'), (55, '        Car car = new Car();'), (56, '        car.setWheelPositions( Arrays.asList( new WheelPosition( ""left"" ) ) );'), (57, ''), (58, '        CarDto carDto = CarAndWheelMapper.INSTANCE.carDtoFromCar(car);'), (59, ''), (60, '        assertThat( carDto ).isNotNull();'), (61, '        assertThat( carDto.wheelPositions() )'), (62, '            .containsExactly( ""left"" );'), (63, '    }')], 'deleted': []}"
33,a95d1c59c3f531fc90b62c60092dd9c16bc93b66,processor/src/test/resources/fixtures/org/mapstruct/ap/test/bugs/_2505/Issue2505MapperImpl.java,Issue2505MapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.bugs._2505;'), (7, ''), (8, 'import javax.annotation.Generated;'), (9, ''), (10, '@Generated('), (11, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (12, '    date = ""2021-07-03T14:21:53+0200"",'), (13, '    comments = ""version: , compiler: Eclipse JDT (Batch) 3.20.0.v20191203-2131, environment: Java 1.8.0_181 (Oracle Corporation)""'), (14, ')'), (15, 'public class Issue2505MapperImpl implements Issue2505Mapper {'), (16, ''), (17, '    @Override'), (18, '    public Customer map(CustomerDTO value) {'), (19, '        if ( value == null ) {'), (20, '            return null;'), (21, '        }'), (22, ''), (23, '        Customer customer = new Customer();'), (24, ''), (25, '        customer.setStatus( value.getStatus() );'), (26, ''), (27, '        return customer;'), (28, '    }'), (29, '}')], 'deleted': []}"
34,985ca2fe64745607b003c71a87559dfbe8ffe482,processor/src/main/resources/org/mapstruct/ap/internal/model/presence/SourceReferenceContainsKeyPresenceCheck.ftl,SourceReferenceContainsKeyPresenceCheck.ftl,1,"{'added': [(1, '<#--'), (2, ''), (3, '    Copyright MapStruct Authors.'), (4, ''), (5, '    Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (6, ''), (7, '-->'), (8, '<#-- @ftlvariable name="""" type=""org.mapstruct.ap.internal.model.presence.SourceReferenceContainsKeyPresenceCheck"" -->'), (9, '${sourceReference}.containsKey( ""${propertyName}"" )')], 'deleted': []}"
35,fb9c7a3dedcc751917109cae05d33026c12f92c6,integrationtest/src/test/resources/pom.xml,pom.xml,5,"{'added': [(68, '        <profile>'), (69, '            <id>generate-via-compiler-plugin-with-annotation-processor-paths</id>'), (70, '            <activation>'), (71, '                <activeByDefault>false</activeByDefault>'), (72, '            </activation>'), (73, '            <build>'), (74, '                <plugins>'), (75, '                    <plugin>'), (76, '                        <groupId>org.apache.maven.plugins</groupId>'), (77, '                        <artifactId>maven-compiler-plugin</artifactId>'), (78, '                        <configuration>'), (79, '                            <compilerArgument combine.self=""override""></compilerArgument>'), (80, '                            <compilerId>\\${compiler-id}</compilerId>'), (81, '                            <annotationProcessorPaths>'), (82, '                                <annotationProcessorPath>'), (83, '                                    <groupId>${project.groupId}</groupId>'), (84, '                                    <artifactId>mapstruct-processor</artifactId>'), (85, '                                    <version>${mapstruct.version}</version>'), (86, '                                </annotationProcessorPath>'), (87, '                            </annotationProcessorPaths>'), (88, '                        </configuration>'), (89, '                        <dependencies>'), (90, '                            <dependency>'), (91, '                                <groupId>org.eclipse.tycho</groupId>'), (92, '                                <artifactId>tycho-compiler-jdt</artifactId>'), (93, '                                <version>${org.eclipse.tycho.compiler-jdt.version}</version>'), (94, '                            </dependency>'), (95, '                        </dependencies>'), (96, '                    </plugin>'), (97, '                </plugins>'), (98, '            </build>'), (99, '        </profile>')], 'deleted': []}"
36,08016d9ef24a4fb59347953f1f0cba9bcecca810,processor/src/test/resources/junit-platform.properties,junit-platform.properties,1,"{'added': [(1, 'junit.jupiter.execution.parallel.enabled=true'), (2, 'junit.jupiter.execution.parallel.mode.default = same_thread'), (3, 'junit.jupiter.execution.parallel.mode.classes.default = concurrent')], 'deleted': []}"
37,9ce9d4fb3adad0c64a2b636ebea5f71ef2602f09,integrationtest/src/test/resources/recordsCrossModuleTest/api/pom.xml,pom.xml,1,"{'added': [(1, '<?xml version=""1.0"" encoding=""UTF-8""?>'), (2, '<!--'), (3, ''), (4, '    Copyright MapStruct Authors.'), (5, ''), (6, '    Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (7, ''), (8, '-->'), (9, '<project xmlns=""http://maven.apache.org/POM/4.0.0""'), (10, '         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""'), (11, '         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">'), (12, '    <modelVersion>4.0.0</modelVersion>'), (13, ''), (14, '    <parent>'), (15, '        <artifactId>recordsCrossModuleTest</artifactId>'), (16, '        <groupId>org.mapstruct</groupId>'), (17, '        <version>1.0.0</version>'), (18, '    </parent>'), (19, ''), (20, '    <artifactId>records-cross-module-api</artifactId>'), (21, ''), (22, '</project>')], 'deleted': []}"
38,9ce9d4fb3adad0c64a2b636ebea5f71ef2602f09,integrationtest/src/test/resources/recordsCrossModuleTest/api/src/main/java/org/mapstruct/itest/records/api/CustomerDto.java,CustomerDto.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.itest.records.api;'), (7, ''), (8, '/**'), (9, ' * @author Filip Hrisafov'), (10, ' */'), (11, 'public record CustomerDto(String name, String email) {'), (12, ''), (13, '}')], 'deleted': []}"
39,9ce9d4fb3adad0c64a2b636ebea5f71ef2602f09,integrationtest/src/test/resources/recordsCrossModuleTest/mapper/pom.xml,pom.xml,1,"{'added': [(1, '<?xml version=""1.0"" encoding=""UTF-8""?>'), (2, '<!--'), (3, ''), (4, '    Copyright MapStruct Authors.'), (5, ''), (6, '    Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (7, ''), (8, '-->'), (9, '<project xmlns=""http://maven.apache.org/POM/4.0.0""'), (10, '         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""'), (11, '         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">'), (12, '    <modelVersion>4.0.0</modelVersion>'), (13, ''), (14, '    <parent>'), (15, '        <artifactId>recordsCrossModuleTest</artifactId>'), (16, '        <groupId>org.mapstruct</groupId>'), (17, '        <version>1.0.0</version>'), (18, '    </parent>'), (19, ''), (20, '    <artifactId>records-cross-module-mapper</artifactId>'), (21, ''), (22, ''), (23, '    <dependencies>'), (24, '        <dependency>'), (25, '            <groupId>org.mapstruct</groupId>'), (26, '            <artifactId>records-cross-module-api</artifactId>'), (27, '            <version>1.0.0</version>'), (28, '        </dependency>'), (29, '    </dependencies>'), (30, '</project>')], 'deleted': []}"
40,9ce9d4fb3adad0c64a2b636ebea5f71ef2602f09,integrationtest/src/test/resources/recordsCrossModuleTest/mapper/src/main/java/org/mapstruct/itest/records/mapper/CustomerEntity.java,CustomerEntity.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.itest.records.mapper;'), (7, ''), (8, '/**'), (9, ' * @author Filip Hrisafov'), (10, ' */'), (11, 'public class CustomerEntity {'), (12, ''), (13, '    private String name;'), (14, '    private String mail;'), (15, ''), (16, '    public String getName() {'), (17, '        return name;'), (18, '    }'), (19, ''), (20, '    public void setName(String name) {'), (21, '        this.name = name;'), (22, '    }'), (23, ''), (24, '    public String getMail() {'), (25, '        return mail;'), (26, '    }'), (27, ''), (28, '    public void setMail(String mail) {'), (29, '        this.mail = mail;'), (30, '    }'), (31, '}')], 'deleted': []}"
41,9ce9d4fb3adad0c64a2b636ebea5f71ef2602f09,integrationtest/src/test/resources/recordsCrossModuleTest/mapper/src/main/java/org/mapstruct/itest/records/mapper/CustomerMapper.java,CustomerMapper.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.itest.records.mapper;'), (7, ''), (8, 'import org.mapstruct.InheritInverseConfiguration;'), (9, 'import org.mapstruct.Mapper;'), (10, 'import org.mapstruct.Mapping;'), (11, 'import org.mapstruct.factory.Mappers;'), (12, 'import org.mapstruct.itest.records.api.CustomerDto;'), (13, ''), (14, '/**'), (15, ' * @author Filip Hrisafov'), (16, ' */'), (17, '@Mapper'), (18, 'public interface CustomerMapper {'), (19, ''), (20, '    CustomerMapper INSTANCE = Mappers.getMapper( CustomerMapper.class );'), (21, ''), (22, '    @Mapping(target = ""mail"", source = ""email"")'), (23, '    CustomerEntity fromRecord(CustomerDto record);'), (24, ''), (25, '    @InheritInverseConfiguration'), (26, '    CustomerDto toRecord(CustomerEntity entity);'), (27, ''), (28, '}')], 'deleted': []}"
42,9ce9d4fb3adad0c64a2b636ebea5f71ef2602f09,integrationtest/src/test/resources/recordsCrossModuleTest/mapper/test/java/org/mapstruct/itest/records/mapper/RecordsTest.java,RecordsTest.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.itest.records.mapper;'), (7, ''), (8, 'import static org.assertj.core.api.Assertions.assertThat;'), (9, ''), (10, 'import org.junit.Test;'), (11, 'import org.mapstruct.itest.records.api.CustomerDto;'), (12, 'import org.mapstruct.itest.records.mapper.CustomerEntity;'), (13, 'import org.mapstruct.itest.records.mapper.CustomerMapper;'), (14, ''), (15, 'public class RecordsTest {'), (16, ''), (17, '    @Test'), (18, '    public void shouldMapRecord() {'), (19, '        CustomerEntity customer = CustomerMapper.INSTANCE.fromRecord( new CustomerDto( ""Kermit"", ""kermit@test.com"" ) );'), (20, ''), (21, '        assertThat( customer ).isNotNull();'), (22, '        assertThat( customer.getName() ).isEqualTo( ""Kermit"" );'), (23, '        assertThat( customer.getMail() ).isEqualTo( ""kermit@test.com"" );'), (24, '    }'), (25, ''), (26, '    @Test'), (27, '    public void shouldMapIntoRecord() {'), (28, '        CustomerEntity entity = new CustomerEntity();'), (29, '        entity.setName( ""Kermit"" );'), (30, '        entity.setMail( ""kermit@test.com"" );'), (31, ''), (32, '        CustomerDto customer = CustomerMapper.INSTANCE.toRecord( entity );'), (33, ''), (34, '        assertThat( customer ).isNotNull();'), (35, '        assertThat( customer.name() ).isEqualTo( ""Kermit"" );'), (36, '        assertThat( customer.email() ).isEqualTo( ""kermit@test.com"" );'), (37, '    }'), (38, ''), (39, '}')], 'deleted': []}"
43,9ce9d4fb3adad0c64a2b636ebea5f71ef2602f09,integrationtest/src/test/resources/recordsCrossModuleTest/pom.xml,pom.xml,1,"{'added': [(1, '<?xml version=""1.0"" encoding=""UTF-8""?>'), (2, '<!--'), (3, ''), (4, '    Copyright MapStruct Authors.'), (5, ''), (6, '    Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (7, ''), (8, '-->'), (9, '<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">'), (10, '    <modelVersion>4.0.0</modelVersion>'), (11, ''), (12, '    <parent>'), (13, '        <groupId>org.mapstruct</groupId>'), (14, '        <artifactId>mapstruct-it-parent</artifactId>'), (15, '        <version>1.0.0</version>'), (16, '        <relativePath>../pom.xml</relativePath>'), (17, '    </parent>'), (18, ''), (19, '    <artifactId>recordsCrossModuleTest</artifactId>'), (20, '    <packaging>pom</packaging>'), (21, ''), (22, '    <modules>'), (23, '        <module>api</module>'), (24, '        <module>mapper</module>'), (25, '    </modules>'), (26, '</project>')], 'deleted': []}"
44,857f87276f686f0659b0fa604aa363e25701916b,integrationtest/src/test/resources/jaxbTest/pom.xml,pom.xml,5,"{'added': [(50, '                <dependencies>'), (51, '                    <dependency>'), (52, '                        <groupId>org.glassfish.jaxb</groupId>'), (53, '                        <artifactId>jaxb-runtime</artifactId>'), (54, '                        <version>2.3.2</version>'), (55, '                    </dependency>'), (56, '                </dependencies>')], 'deleted': []}"
45,a6ac4f3fd699ec71e7f4b1fcbe0f6e8061c3e1cf,processor/src/main/resources/org/mapstruct/ap/internal/conversion/GetDateTimeFormatterField.ftl,GetDateTimeFormatterField.ftl,1,"{'added': [(1, '<#--'), (2, ''), (3, '    Copyright MapStruct Authors.'), (4, ''), (5, '    Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (6, ''), (7, '-->'), (8, '<#-- @ftlvariable name="""" type=""org.mapstruct.ap.internal.model.SupportingField"" -->'), (9, 'private final <@includeModel object=type/> ${variableName} = <@includeModel object=type/>.ofPattern( ""${templateParameter[\'dateFormat\']}"" );')], 'deleted': []}"
46,a6ac4f3fd699ec71e7f4b1fcbe0f6e8061c3e1cf,processor/src/main/resources/org/mapstruct/ap/internal/model/common/FinalField.ftl,FinalField.ftl,3,"{'added': [], 'deleted': []}"
47,a6ac4f3fd699ec71e7f4b1fcbe0f6e8061c3e1cf,processor/src/test/resources/fixtures/org/mapstruct/ap/test/conversion/java8time/SourceTargetMapperImpl.java,SourceTargetMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.conversion.java8time;'), (7, ''), (8, 'import java.time.Duration;'), (9, 'import java.time.Instant;'), (10, 'import java.time.LocalDate;'), (11, 'import java.time.LocalDateTime;'), (12, 'import java.time.LocalTime;'), (13, 'import java.time.Period;'), (14, 'import java.time.ZoneId;'), (15, 'import java.time.ZoneOffset;'), (16, 'import java.time.ZonedDateTime;'), (17, 'import java.time.format.DateTimeFormatter;'), (18, 'import java.util.Calendar;'), (19, 'import java.util.Date;'), (20, 'import java.util.TimeZone;'), (21, 'import javax.annotation.Generated;'), (22, ''), (23, '@Generated('), (24, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (25, '    date = ""2021-05-15T18:24:04+0200"",'), (26, '    comments = ""version: , compiler: javac, environment: Java 1.8.0_275 (AdoptOpenJDK)""'), (27, ')'), (28, 'public class SourceTargetMapperImpl implements SourceTargetMapper {'), (29, ''), (30, '    private final DateTimeFormatter dateTimeFormatter_dd_MM_yyyy_HH_mm_12071769242 = DateTimeFormatter.ofPattern( ""dd.MM.yyyy HH:mm"" );'), (31, '    private final DateTimeFormatter dateTimeFormatter_HH_mm_168697690 = DateTimeFormatter.ofPattern( ""HH:mm"" );'), (32, '    private final DateTimeFormatter dateTimeFormatter_dd_MM_yyyy_11900521056 = DateTimeFormatter.ofPattern( ""dd.MM.yyyy"" );'), (33, '    private final DateTimeFormatter dateTimeFormatter_dd_MM_yyyy_HH_mm_z_01894582668 = DateTimeFormatter.ofPattern( ""dd.MM.yyyy HH:mm z"" );'), (34, ''), (35, '    @Override'), (36, '    public Target sourceToTarget(Source source) {'), (37, '        if ( source == null ) {'), (38, '            return null;'), (39, '        }'), (40, ''), (41, '        Target target = new Target();'), (42, ''), (43, '        if ( source.getZonedDateTime() != null ) {'), (44, '            target.setZonedDateTime( dateTimeFormatter_dd_MM_yyyy_HH_mm_z_01894582668.format( source.getZonedDateTime() ) );'), (45, '        }'), (46, '        if ( source.getLocalDateTime() != null ) {'), (47, '            target.setLocalDateTime( dateTimeFormatter_dd_MM_yyyy_HH_mm_12071769242.format( source.getLocalDateTime() ) );'), (48, '        }'), (49, '        if ( source.getLocalDate() != null ) {'), (50, '            target.setLocalDate( dateTimeFormatter_dd_MM_yyyy_11900521056.format( source.getLocalDate() ) );'), (51, '        }'), (52, '        if ( source.getLocalTime() != null ) {'), (53, '            target.setLocalTime( dateTimeFormatter_HH_mm_168697690.format( source.getLocalTime() ) );'), (54, '        }'), (55, '        target.setForCalendarConversion( zonedDateTimeToCalendar( source.getForCalendarConversion() ) );'), (56, '        if ( source.getForDateConversionWithZonedDateTime() != null ) {'), (57, '            target.setForDateConversionWithZonedDateTime( Date.from( source.getForDateConversionWithZonedDateTime().toInstant() ) );'), (58, '        }'), (59, '        if ( source.getForDateConversionWithLocalDateTime() != null ) {'), (60, '            target.setForDateConversionWithLocalDateTime( Date.from( source.getForDateConversionWithLocalDateTime().toInstant( ZoneOffset.UTC ) ) );'), (61, '        }'), (62, '        if ( source.getForDateConversionWithLocalDate() != null ) {'), (63, '            target.setForDateConversionWithLocalDate( Date.from( source.getForDateConversionWithLocalDate().atStartOfDay( ZoneOffset.UTC ).toInstant() ) );'), (64, '        }'), (65, '        if ( source.getForSqlDateConversionWithLocalDate() != null ) {'), (66, '            target.setForSqlDateConversionWithLocalDate( new java.sql.Date( source.getForSqlDateConversionWithLocalDate().atStartOfDay( ZoneOffset.UTC ).toInstant().toEpochMilli() ) );'), (67, '        }'), (68, '        if ( source.getForDateConversionWithInstant() != null ) {'), (69, '            target.setForDateConversionWithInstant( Date.from( source.getForDateConversionWithInstant() ) );'), (70, '        }'), (71, '        if ( source.getForInstantConversionWithString() != null ) {'), (72, '            target.setForInstantConversionWithString( source.getForInstantConversionWithString().toString() );'), (73, '        }'), (74, '        if ( source.getForPeriodConversionWithString() != null ) {'), (75, '            target.setForPeriodConversionWithString( source.getForPeriodConversionWithString().toString() );'), (76, '        }'), (77, '        if ( source.getForDurationConversionWithString() != null ) {'), (78, '            target.setForDurationConversionWithString( source.getForDurationConversionWithString().toString() );'), (79, '        }'), (80, ''), (81, '        return target;'), (82, '    }'), (83, ''), (84, '    @Override'), (85, '    public Target sourceToTargetDefaultMapping(Source source) {'), (86, '        if ( source == null ) {'), (87, '            return null;'), (88, '        }'), (89, ''), (90, '        Target target = new Target();'), (91, ''), (92, '        if ( source.getZonedDateTime() != null ) {'), (93, '            target.setZonedDateTime( dateTimeFormatter_dd_MM_yyyy_HH_mm_z_01894582668.format( source.getZonedDateTime() ) );'), (94, '        }'), (95, '        if ( source.getLocalDateTime() != null ) {'), (96, '            target.setLocalDateTime( dateTimeFormatter_dd_MM_yyyy_HH_mm_12071769242.format( source.getLocalDateTime() ) );'), (97, '        }'), (98, '        if ( source.getLocalDate() != null ) {'), (99, '            target.setLocalDate( dateTimeFormatter_dd_MM_yyyy_11900521056.format( source.getLocalDate() ) );'), (100, '        }'), (101, '        if ( source.getLocalTime() != null ) {'), (102, '            target.setLocalTime( dateTimeFormatter_HH_mm_168697690.format( source.getLocalTime() ) );'), (103, '        }'), (104, '        target.setForCalendarConversion( zonedDateTimeToCalendar( source.getForCalendarConversion() ) );'), (105, '        if ( source.getForDateConversionWithZonedDateTime() != null ) {'), (106, '            target.setForDateConversionWithZonedDateTime( Date.from( source.getForDateConversionWithZonedDateTime().toInstant() ) );'), (107, '        }'), (108, '        if ( source.getForDateConversionWithLocalDateTime() != null ) {'), (109, '            target.setForDateConversionWithLocalDateTime( Date.from( source.getForDateConversionWithLocalDateTime().toInstant( ZoneOffset.UTC ) ) );'), (110, '        }'), (111, '        if ( source.getForDateConversionWithLocalDate() != null ) {'), (112, '            target.setForDateConversionWithLocalDate( Date.from( source.getForDateConversionWithLocalDate().atStartOfDay( ZoneOffset.UTC ).toInstant() ) );'), (113, '        }'), (114, '        if ( source.getForSqlDateConversionWithLocalDate() != null ) {'), (115, '            target.setForSqlDateConversionWithLocalDate( new java.sql.Date( source.getForSqlDateConversionWithLocalDate().atStartOfDay( ZoneOffset.UTC ).toInstant().toEpochMilli() ) );'), (116, '        }'), (117, '        if ( source.getForDateConversionWithInstant() != null ) {'), (118, '            target.setForDateConversionWithInstant( Date.from( source.getForDateConversionWithInstant() ) );'), (119, '        }'), (120, '        if ( source.getForInstantConversionWithString() != null ) {'), (121, '            target.setForInstantConversionWithString( source.getForInstantConversionWithString().toString() );'), (122, '        }'), (123, '        if ( source.getForPeriodConversionWithString() != null ) {'), (124, '            target.setForPeriodConversionWithString( source.getForPeriodConversionWithString().toString() );'), (125, '        }'), (126, '        if ( source.getForDurationConversionWithString() != null ) {'), (127, '            target.setForDurationConversionWithString( source.getForDurationConversionWithString().toString() );'), (128, '        }'), (129, ''), (130, '        return target;'), (131, '    }'), (132, ''), (133, '    @Override'), (134, '    public Target sourceToTargetDateTimeMapped(Source source) {'), (135, '        if ( source == null ) {'), (136, '            return null;'), (137, '        }'), (138, ''), (139, '        Target target = new Target();'), (140, ''), (141, '        if ( source.getZonedDateTime() != null ) {'), (142, '            target.setZonedDateTime( dateTimeFormatter_dd_MM_yyyy_HH_mm_z_01894582668.format( source.getZonedDateTime() ) );'), (143, '        }'), (144, '        if ( source.getLocalDateTime() != null ) {'), (145, '            target.setLocalDateTime( DateTimeFormatter.ISO_LOCAL_DATE_TIME.format( source.getLocalDateTime() ) );'), (146, '        }'), (147, '        if ( source.getLocalDate() != null ) {'), (148, '            target.setLocalDate( DateTimeFormatter.ISO_LOCAL_DATE.format( source.getLocalDate() ) );'), (149, '        }'), (150, '        if ( source.getLocalTime() != null ) {'), (151, '            target.setLocalTime( DateTimeFormatter.ISO_LOCAL_TIME.format( source.getLocalTime() ) );'), (152, '        }'), (153, '        target.setForCalendarConversion( zonedDateTimeToCalendar( source.getForCalendarConversion() ) );'), (154, '        if ( source.getForDateConversionWithZonedDateTime() != null ) {'), (155, '            target.setForDateConversionWithZonedDateTime( Date.from( source.getForDateConversionWithZonedDateTime().toInstant() ) );'), (156, '        }'), (157, '        if ( source.getForDateConversionWithLocalDateTime() != null ) {'), (158, '            target.setForDateConversionWithLocalDateTime( Date.from( source.getForDateConversionWithLocalDateTime().toInstant( ZoneOffset.UTC ) ) );'), (159, '        }'), (160, '        if ( source.getForDateConversionWithLocalDate() != null ) {'), (161, '            target.setForDateConversionWithLocalDate( Date.from( source.getForDateConversionWithLocalDate().atStartOfDay( ZoneOffset.UTC ).toInstant() ) );'), (162, '        }'), (163, '        if ( source.getForSqlDateConversionWithLocalDate() != null ) {'), (164, '            target.setForSqlDateConversionWithLocalDate( new java.sql.Date( source.getForSqlDateConversionWithLocalDate().atStartOfDay( ZoneOffset.UTC ).toInstant().toEpochMilli() ) );'), (165, '        }'), (166, '        if ( source.getForDateConversionWithInstant() != null ) {'), (167, '            target.setForDateConversionWithInstant( Date.from( source.getForDateConversionWithInstant() ) );'), (168, '        }'), (169, '        if ( source.getForInstantConversionWithString() != null ) {'), (170, '            target.setForInstantConversionWithString( source.getForInstantConversionWithString().toString() );'), (171, '        }'), (172, '        if ( source.getForPeriodConversionWithString() != null ) {'), (173, '            target.setForPeriodConversionWithString( source.getForPeriodConversionWithString().toString() );'), (174, '        }'), (175, '        if ( source.getForDurationConversionWithString() != null ) {'), (176, '            target.setForDurationConversionWithString( source.getForDurationConversionWithString().toString() );'), (177, '        }'), (178, ''), (179, '        return target;'), (180, '    }'), (181, ''), (182, '    @Override'), (183, '    public Target sourceToTargetLocalDateTimeMapped(Source source) {'), (184, '        if ( source == null ) {'), (185, '            return null;'), (186, '        }'), (187, ''), (188, '        Target target = new Target();'), (189, ''), (190, '        if ( source.getLocalDateTime() != null ) {'), (191, '            target.setLocalDateTime( dateTimeFormatter_dd_MM_yyyy_HH_mm_12071769242.format( source.getLocalDateTime() ) );'), (192, '        }'), (193, '        if ( source.getZonedDateTime() != null ) {'), (194, '            target.setZonedDateTime( DateTimeFormatter.ISO_DATE_TIME.format( source.getZonedDateTime() ) );'), (195, '        }'), (196, '        if ( source.getLocalDate() != null ) {'), (197, '            target.setLocalDate( DateTimeFormatter.ISO_LOCAL_DATE.format( source.getLocalDate() ) );'), (198, '        }'), (199, '        if ( source.getLocalTime() != null ) {'), (200, '            target.setLocalTime( DateTimeFormatter.ISO_LOCAL_TIME.format( source.getLocalTime() ) );'), (201, '        }'), (202, '        target.setForCalendarConversion( zonedDateTimeToCalendar( source.getForCalendarConversion() ) );'), (203, '        if ( source.getForDateConversionWithZonedDateTime() != null ) {'), (204, '            target.setForDateConversionWithZonedDateTime( Date.from( source.getForDateConversionWithZonedDateTime().toInstant() ) );'), (205, '        }'), (206, '        if ( source.getForDateConversionWithLocalDateTime() != null ) {'), (207, '            target.setForDateConversionWithLocalDateTime( Date.from( source.getForDateConversionWithLocalDateTime().toInstant( ZoneOffset.UTC ) ) );'), (208, '        }'), (209, '        if ( source.getForDateConversionWithLocalDate() != null ) {'), (210, '            target.setForDateConversionWithLocalDate( Date.from( source.getForDateConversionWithLocalDate().atStartOfDay( ZoneOffset.UTC ).toInstant() ) );'), (211, '        }'), (212, '        if ( source.getForSqlDateConversionWithLocalDate() != null ) {'), (213, '            target.setForSqlDateConversionWithLocalDate( new java.sql.Date( source.getForSqlDateConversionWithLocalDate().atStartOfDay( ZoneOffset.UTC ).toInstant().toEpochMilli() ) );'), (214, '        }'), (215, '        if ( source.getForDateConversionWithInstant() != null ) {'), (216, '            target.setForDateConversionWithInstant( Date.from( source.getForDateConversionWithInstant() ) );'), (217, '        }'), (218, '        if ( source.getForInstantConversionWithString() != null ) {'), (219, '            target.setForInstantConversionWithString( source.getForInstantConversionWithString().toString() );'), (220, '        }'), (221, '        if ( source.getForPeriodConversionWithString() != null ) {'), (222, '            target.setForPeriodConversionWithString( source.getForPeriodConversionWithString().toString() );'), (223, '        }'), (224, '        if ( source.getForDurationConversionWithString() != null ) {'), (225, '            target.setForDurationConversionWithString( source.getForDurationConversionWithString().toString() );'), (226, '        }'), (227, ''), (228, '        return target;'), (229, '    }'), (230, ''), (231, '    @Override'), (232, '    public Target sourceToTargetLocalDateMapped(Source source) {'), (233, '        if ( source == null ) {'), (234, '            return null;'), (235, '        }'), (236, ''), (237, '        Target target = new Target();'), (238, ''), (239, '        if ( source.getLocalDate() != null ) {'), (240, '            target.setLocalDate( dateTimeFormatter_dd_MM_yyyy_11900521056.format( source.getLocalDate() ) );'), (241, '        }'), (242, '        if ( source.getZonedDateTime() != null ) {'), (243, '            target.setZonedDateTime( DateTimeFormatter.ISO_DATE_TIME.format( source.getZonedDateTime() ) );'), (244, '        }'), (245, '        if ( source.getLocalDateTime() != null ) {'), (246, '            target.setLocalDateTime( DateTimeFormatter.ISO_LOCAL_DATE_TIME.format( source.getLocalDateTime() ) );'), (247, '        }'), (248, '        if ( source.getLocalTime() != null ) {'), (249, '            target.setLocalTime( DateTimeFormatter.ISO_LOCAL_TIME.format( source.getLocalTime() ) );'), (250, '        }'), (251, '        target.setForCalendarConversion( zonedDateTimeToCalendar( source.getForCalendarConversion() ) );'), (252, '        if ( source.getForDateConversionWithZonedDateTime() != null ) {'), (253, '            target.setForDateConversionWithZonedDateTime( Date.from( source.getForDateConversionWithZonedDateTime().toInstant() ) );'), (254, '        }'), (255, '        if ( source.getForDateConversionWithLocalDateTime() != null ) {'), (256, '            target.setForDateConversionWithLocalDateTime( Date.from( source.getForDateConversionWithLocalDateTime().toInstant( ZoneOffset.UTC ) ) );'), (257, '        }'), (258, '        if ( source.getForDateConversionWithLocalDate() != null ) {'), (259, '            target.setForDateConversionWithLocalDate( Date.from( source.getForDateConversionWithLocalDate().atStartOfDay( ZoneOffset.UTC ).toInstant() ) );'), (260, '        }'), (261, '        if ( source.getForSqlDateConversionWithLocalDate() != null ) {'), (262, '            target.setForSqlDateConversionWithLocalDate( new java.sql.Date( source.getForSqlDateConversionWithLocalDate().atStartOfDay( ZoneOffset.UTC ).toInstant().toEpochMilli() ) );'), (263, '        }'), (264, '        if ( source.getForDateConversionWithInstant() != null ) {'), (265, '            target.setForDateConversionWithInstant( Date.from( source.getForDateConversionWithInstant() ) );'), (266, '        }'), (267, '        if ( source.getForInstantConversionWithString() != null ) {'), (268, '            target.setForInstantConversionWithString( source.getForInstantConversionWithString().toString() );'), (269, '        }'), (270, '        if ( source.getForPeriodConversionWithString() != null ) {'), (271, '            target.setForPeriodConversionWithString( source.getForPeriodConversionWithString().toString() );'), (272, '        }'), (273, '        if ( source.getForDurationConversionWithString() != null ) {'), (274, '            target.setForDurationConversionWithString( source.getForDurationConversionWithString().toString() );'), (275, '        }'), (276, ''), (277, '        return target;'), (278, '    }'), (279, ''), (280, '    @Override'), (281, '    public Target sourceToTargetLocalTimeMapped(Source source) {'), (282, '        if ( source == null ) {'), (283, '            return null;'), (284, '        }'), (285, ''), (286, '        Target target = new Target();'), (287, ''), (288, '        if ( source.getLocalTime() != null ) {'), (289, '            target.setLocalTime( dateTimeFormatter_HH_mm_168697690.format( source.getLocalTime() ) );'), (290, '        }'), (291, '        if ( source.getZonedDateTime() != null ) {'), (292, '            target.setZonedDateTime( DateTimeFormatter.ISO_DATE_TIME.format( source.getZonedDateTime() ) );'), (293, '        }'), (294, '        if ( source.getLocalDateTime() != null ) {'), (295, '            target.setLocalDateTime( DateTimeFormatter.ISO_LOCAL_DATE_TIME.format( source.getLocalDateTime() ) );'), (296, '        }'), (297, '        if ( source.getLocalDate() != null ) {'), (298, '            target.setLocalDate( DateTimeFormatter.ISO_LOCAL_DATE.format( source.getLocalDate() ) );'), (299, '        }'), (300, '        target.setForCalendarConversion( zonedDateTimeToCalendar( source.getForCalendarConversion() ) );'), (301, '        if ( source.getForDateConversionWithZonedDateTime() != null ) {'), (302, '            target.setForDateConversionWithZonedDateTime( Date.from( source.getForDateConversionWithZonedDateTime().toInstant() ) );'), (303, '        }'), (304, '        if ( source.getForDateConversionWithLocalDateTime() != null ) {'), (305, '            target.setForDateConversionWithLocalDateTime( Date.from( source.getForDateConversionWithLocalDateTime().toInstant( ZoneOffset.UTC ) ) );'), (306, '        }'), (307, '        if ( source.getForDateConversionWithLocalDate() != null ) {'), (308, '            target.setForDateConversionWithLocalDate( Date.from( source.getForDateConversionWithLocalDate().atStartOfDay( ZoneOffset.UTC ).toInstant() ) );'), (309, '        }'), (310, '        if ( source.getForSqlDateConversionWithLocalDate() != null ) {'), (311, '            target.setForSqlDateConversionWithLocalDate( new java.sql.Date( source.getForSqlDateConversionWithLocalDate().atStartOfDay( ZoneOffset.UTC ).toInstant().toEpochMilli() ) );'), (312, '        }'), (313, '        if ( source.getForDateConversionWithInstant() != null ) {'), (314, '            target.setForDateConversionWithInstant( Date.from( source.getForDateConversionWithInstant() ) );'), (315, '        }'), (316, '        if ( source.getForInstantConversionWithString() != null ) {'), (317, '            target.setForInstantConversionWithString( source.getForInstantConversionWithString().toString() );'), (318, '        }'), (319, '        if ( source.getForPeriodConversionWithString() != null ) {'), (320, '            target.setForPeriodConversionWithString( source.getForPeriodConversionWithString().toString() );'), (321, '        }'), (322, '        if ( source.getForDurationConversionWithString() != null ) {'), (323, '            target.setForDurationConversionWithString( source.getForDurationConversionWithString().toString() );'), (324, '        }'), (325, ''), (326, '        return target;'), (327, '    }'), (328, ''), (329, '    @Override'), (330, '    public Source targetToSource(Target target) {'), (331, '        if ( target == null ) {'), (332, '            return null;'), (333, '        }'), (334, ''), (335, '        Source source = new Source();'), (336, ''), (337, '        if ( target.getZonedDateTime() != null ) {'), (338, '            source.setZonedDateTime( ZonedDateTime.parse( target.getZonedDateTime(), dateTimeFormatter_dd_MM_yyyy_HH_mm_z_01894582668 ) );'), (339, '        }'), (340, '        if ( target.getLocalDateTime() != null ) {'), (341, '            source.setLocalDateTime( LocalDateTime.parse( target.getLocalDateTime(), dateTimeFormatter_dd_MM_yyyy_HH_mm_12071769242 ) );'), (342, '        }'), (343, '        if ( target.getLocalDate() != null ) {'), (344, '            source.setLocalDate( LocalDate.parse( target.getLocalDate(), dateTimeFormatter_dd_MM_yyyy_11900521056 ) );'), (345, '        }'), (346, '        if ( target.getLocalTime() != null ) {'), (347, '            source.setLocalTime( LocalTime.parse( target.getLocalTime(), dateTimeFormatter_HH_mm_168697690 ) );'), (348, '        }'), (349, '        source.setForCalendarConversion( calendarToZonedDateTime( target.getForCalendarConversion() ) );'), (350, '        if ( target.getForDateConversionWithZonedDateTime() != null ) {'), (351, '            source.setForDateConversionWithZonedDateTime( ZonedDateTime.ofInstant( target.getForDateConversionWithZonedDateTime().toInstant(), ZoneId.systemDefault() ) );'), (352, '        }'), (353, '        if ( target.getForDateConversionWithLocalDateTime() != null ) {'), (354, '            source.setForDateConversionWithLocalDateTime( LocalDateTime.ofInstant( target.getForDateConversionWithLocalDateTime().toInstant(), ZoneId.of( ""UTC"" ) ) );'), (355, '        }'), (356, '        if ( target.getForDateConversionWithLocalDate() != null ) {'), (357, '            source.setForDateConversionWithLocalDate( LocalDateTime.ofInstant( target.getForDateConversionWithLocalDate().toInstant(), ZoneOffset.UTC ).toLocalDate() );'), (358, '        }'), (359, '        if ( target.getForSqlDateConversionWithLocalDate() != null ) {'), (360, '            source.setForSqlDateConversionWithLocalDate( target.getForSqlDateConversionWithLocalDate().toLocalDate() );'), (361, '        }'), (362, '        if ( target.getForDateConversionWithInstant() != null ) {'), (363, '            source.setForDateConversionWithInstant( target.getForDateConversionWithInstant().toInstant() );'), (364, '        }'), (365, '        if ( target.getForInstantConversionWithString() != null ) {'), (366, '            source.setForInstantConversionWithString( Instant.parse( target.getForInstantConversionWithString() ) );'), (367, '        }'), (368, '        if ( target.getForPeriodConversionWithString() != null ) {'), (369, '            source.setForPeriodConversionWithString( Period.parse( target.getForPeriodConversionWithString() ) );'), (370, '        }'), (371, '        if ( target.getForDurationConversionWithString() != null ) {'), (372, '            source.setForDurationConversionWithString( Duration.parse( target.getForDurationConversionWithString() ) );'), (373, '        }'), (374, ''), (375, '        return source;'), (376, '    }'), (377, ''), (378, '    @Override'), (379, '    public Source targetToSourceDateTimeMapped(Target target) {'), (380, '        if ( target == null ) {'), (381, '            return null;'), (382, '        }'), (383, ''), (384, '        Source source = new Source();'), (385, ''), (386, '        if ( target.getZonedDateTime() != null ) {'), (387, '            source.setZonedDateTime( ZonedDateTime.parse( target.getZonedDateTime(), dateTimeFormatter_dd_MM_yyyy_HH_mm_z_01894582668 ) );'), (388, '        }'), (389, '        if ( target.getLocalDateTime() != null ) {'), (390, '            source.setLocalDateTime( LocalDateTime.parse( target.getLocalDateTime() ) );'), (391, '        }'), (392, '        if ( target.getLocalDate() != null ) {'), (393, '            source.setLocalDate( LocalDate.parse( target.getLocalDate() ) );'), (394, '        }'), (395, '        if ( target.getLocalTime() != null ) {'), (396, '            source.setLocalTime( LocalTime.parse( target.getLocalTime() ) );'), (397, '        }'), (398, '        source.setForCalendarConversion( calendarToZonedDateTime( target.getForCalendarConversion() ) );'), (399, '        if ( target.getForDateConversionWithZonedDateTime() != null ) {'), (400, '            source.setForDateConversionWithZonedDateTime( ZonedDateTime.ofInstant( target.getForDateConversionWithZonedDateTime().toInstant(), ZoneId.systemDefault() ) );'), (401, '        }'), (402, '        if ( target.getForDateConversionWithLocalDateTime() != null ) {'), (403, '            source.setForDateConversionWithLocalDateTime( LocalDateTime.ofInstant( target.getForDateConversionWithLocalDateTime().toInstant(), ZoneId.of( ""UTC"" ) ) );'), (404, '        }'), (405, '        if ( target.getForDateConversionWithLocalDate() != null ) {'), (406, '            source.setForDateConversionWithLocalDate( LocalDateTime.ofInstant( target.getForDateConversionWithLocalDate().toInstant(), ZoneOffset.UTC ).toLocalDate() );'), (407, '        }'), (408, '        if ( target.getForSqlDateConversionWithLocalDate() != null ) {'), (409, '            source.setForSqlDateConversionWithLocalDate( target.getForSqlDateConversionWithLocalDate().toLocalDate() );'), (410, '        }'), (411, '        if ( target.getForDateConversionWithInstant() != null ) {'), (412, '            source.setForDateConversionWithInstant( target.getForDateConversionWithInstant().toInstant() );'), (413, '        }'), (414, '        if ( target.getForInstantConversionWithString() != null ) {'), (415, '            source.setForInstantConversionWithString( Instant.parse( target.getForInstantConversionWithString() ) );'), (416, '        }'), (417, '        if ( target.getForPeriodConversionWithString() != null ) {'), (418, '            source.setForPeriodConversionWithString( Period.parse( target.getForPeriodConversionWithString() ) );'), (419, '        }'), (420, '        if ( target.getForDurationConversionWithString() != null ) {'), (421, '            source.setForDurationConversionWithString( Duration.parse( target.getForDurationConversionWithString() ) );'), (422, '        }'), (423, ''), (424, '        return source;'), (425, '    }'), (426, ''), (427, '    @Override'), (428, '    public Source targetToSourceLocalDateTimeMapped(Target target) {'), (429, '        if ( target == null ) {'), (430, '            return null;'), (431, '        }'), (432, ''), (433, '        Source source = new Source();'), (434, ''), (435, '        if ( target.getLocalDateTime() != null ) {'), (436, '            source.setLocalDateTime( LocalDateTime.parse( target.getLocalDateTime(), dateTimeFormatter_dd_MM_yyyy_HH_mm_12071769242 ) );'), (437, '        }'), (438, '        if ( target.getZonedDateTime() != null ) {'), (439, '            source.setZonedDateTime( ZonedDateTime.parse( target.getZonedDateTime() ) );'), (440, '        }'), (441, '        if ( target.getLocalDate() != null ) {'), (442, '            source.setLocalDate( LocalDate.parse( target.getLocalDate() ) );'), (443, '        }'), (444, '        if ( target.getLocalTime() != null ) {'), (445, '            source.setLocalTime( LocalTime.parse( target.getLocalTime() ) );'), (446, '        }'), (447, '        source.setForCalendarConversion( calendarToZonedDateTime( target.getForCalendarConversion() ) );'), (448, '        if ( target.getForDateConversionWithZonedDateTime() != null ) {'), (449, '            source.setForDateConversionWithZonedDateTime( ZonedDateTime.ofInstant( target.getForDateConversionWithZonedDateTime().toInstant(), ZoneId.systemDefault() ) );'), (450, '        }'), (451, '        if ( target.getForDateConversionWithLocalDateTime() != null ) {'), (452, '            source.setForDateConversionWithLocalDateTime( LocalDateTime.ofInstant( target.getForDateConversionWithLocalDateTime().toInstant(), ZoneId.of( ""UTC"" ) ) );'), (453, '        }'), (454, '        if ( target.getForDateConversionWithLocalDate() != null ) {'), (455, '            source.setForDateConversionWithLocalDate( LocalDateTime.ofInstant( target.getForDateConversionWithLocalDate().toInstant(), ZoneOffset.UTC ).toLocalDate() );'), (456, '        }'), (457, '        if ( target.getForSqlDateConversionWithLocalDate() != null ) {'), (458, '            source.setForSqlDateConversionWithLocalDate( target.getForSqlDateConversionWithLocalDate().toLocalDate() );'), (459, '        }'), (460, '        if ( target.getForDateConversionWithInstant() != null ) {'), (461, '            source.setForDateConversionWithInstant( target.getForDateConversionWithInstant().toInstant() );'), (462, '        }'), (463, '        if ( target.getForInstantConversionWithString() != null ) {'), (464, '            source.setForInstantConversionWithString( Instant.parse( target.getForInstantConversionWithString() ) );'), (465, '        }'), (466, '        if ( target.getForPeriodConversionWithString() != null ) {'), (467, '            source.setForPeriodConversionWithString( Period.parse( target.getForPeriodConversionWithString() ) );'), (468, '        }'), (469, '        if ( target.getForDurationConversionWithString() != null ) {'), (470, '            source.setForDurationConversionWithString( Duration.parse( target.getForDurationConversionWithString() ) );'), (471, '        }'), (472, ''), (473, '        return source;'), (474, '    }'), (475, ''), (476, '    @Override'), (477, '    public Source targetToSourceLocalDateMapped(Target target) {'), (478, '        if ( target == null ) {'), (479, '            return null;'), (480, '        }'), (481, ''), (482, '        Source source = new Source();'), (483, ''), (484, '        if ( target.getLocalDate() != null ) {'), (485, '            source.setLocalDate( LocalDate.parse( target.getLocalDate(), dateTimeFormatter_dd_MM_yyyy_11900521056 ) );'), (486, '        }'), (487, '        if ( target.getZonedDateTime() != null ) {'), (488, '            source.setZonedDateTime( ZonedDateTime.parse( target.getZonedDateTime() ) );'), (489, '        }'), (490, '        if ( target.getLocalDateTime() != null ) {'), (491, '            source.setLocalDateTime( LocalDateTime.parse( target.getLocalDateTime() ) );'), (492, '        }'), (493, '        if ( target.getLocalTime() != null ) {'), (494, '            source.setLocalTime( LocalTime.parse( target.getLocalTime() ) );'), (495, '        }'), (496, '        source.setForCalendarConversion( calendarToZonedDateTime( target.getForCalendarConversion() ) );'), (497, '        if ( target.getForDateConversionWithZonedDateTime() != null ) {'), (498, '            source.setForDateConversionWithZonedDateTime( ZonedDateTime.ofInstant( target.getForDateConversionWithZonedDateTime().toInstant(), ZoneId.systemDefault() ) );'), (499, '        }'), (500, '        if ( target.getForDateConversionWithLocalDateTime() != null ) {'), (501, '            source.setForDateConversionWithLocalDateTime( LocalDateTime.ofInstant( target.getForDateConversionWithLocalDateTime().toInstant(), ZoneId.of( ""UTC"" ) ) );'), (502, '        }'), (503, '        if ( target.getForDateConversionWithLocalDate() != null ) {'), (504, '            source.setForDateConversionWithLocalDate( LocalDateTime.ofInstant( target.getForDateConversionWithLocalDate().toInstant(), ZoneOffset.UTC ).toLocalDate() );'), (505, '        }'), (506, '        if ( target.getForSqlDateConversionWithLocalDate() != null ) {'), (507, '            source.setForSqlDateConversionWithLocalDate( target.getForSqlDateConversionWithLocalDate().toLocalDate() );'), (508, '        }'), (509, '        if ( target.getForDateConversionWithInstant() != null ) {'), (510, '            source.setForDateConversionWithInstant( target.getForDateConversionWithInstant().toInstant() );'), (511, '        }'), (512, '        if ( target.getForInstantConversionWithString() != null ) {'), (513, '            source.setForInstantConversionWithString( Instant.parse( target.getForInstantConversionWithString() ) );'), (514, '        }'), (515, '        if ( target.getForPeriodConversionWithString() != null ) {'), (516, '            source.setForPeriodConversionWithString( Period.parse( target.getForPeriodConversionWithString() ) );'), (517, '        }'), (518, '        if ( target.getForDurationConversionWithString() != null ) {'), (519, '            source.setForDurationConversionWithString( Duration.parse( target.getForDurationConversionWithString() ) );'), (520, '        }'), (521, ''), (522, '        return source;'), (523, '    }'), (524, ''), (525, '    @Override'), (526, '    public Source targetToSourceLocalTimeMapped(Target target) {'), (527, '        if ( target == null ) {'), (528, '            return null;'), (529, '        }'), (530, ''), (531, '        Source source = new Source();'), (532, ''), (533, '        if ( target.getLocalTime() != null ) {'), (534, '            source.setLocalTime( LocalTime.parse( target.getLocalTime(), dateTimeFormatter_HH_mm_168697690 ) );'), (535, '        }'), (536, '        if ( target.getZonedDateTime() != null ) {'), (537, '            source.setZonedDateTime( ZonedDateTime.parse( target.getZonedDateTime() ) );'), (538, '        }'), (539, '        if ( target.getLocalDateTime() != null ) {'), (540, '            source.setLocalDateTime( LocalDateTime.parse( target.getLocalDateTime() ) );'), (541, '        }'), (542, '        if ( target.getLocalDate() != null ) {'), (543, '            source.setLocalDate( LocalDate.parse( target.getLocalDate() ) );'), (544, '        }'), (545, '        source.setForCalendarConversion( calendarToZonedDateTime( target.getForCalendarConversion() ) );'), (546, '        if ( target.getForDateConversionWithZonedDateTime() != null ) {'), (547, '            source.setForDateConversionWithZonedDateTime( ZonedDateTime.ofInstant( target.getForDateConversionWithZonedDateTime().toInstant(), ZoneId.systemDefault() ) );'), (548, '        }'), (549, '        if ( target.getForDateConversionWithLocalDateTime() != null ) {'), (550, '            source.setForDateConversionWithLocalDateTime( LocalDateTime.ofInstant( target.getForDateConversionWithLocalDateTime().toInstant(), ZoneId.of( ""UTC"" ) ) );'), (551, '        }'), (552, '        if ( target.getForDateConversionWithLocalDate() != null ) {'), (553, '            source.setForDateConversionWithLocalDate( LocalDateTime.ofInstant( target.getForDateConversionWithLocalDate().toInstant(), ZoneOffset.UTC ).toLocalDate() );'), (554, '        }'), (555, '        if ( target.getForSqlDateConversionWithLocalDate() != null ) {'), (556, '            source.setForSqlDateConversionWithLocalDate( target.getForSqlDateConversionWithLocalDate().toLocalDate() );'), (557, '        }'), (558, '        if ( target.getForDateConversionWithInstant() != null ) {'), (559, '            source.setForDateConversionWithInstant( target.getForDateConversionWithInstant().toInstant() );'), (560, '        }'), (561, '        if ( target.getForInstantConversionWithString() != null ) {'), (562, '            source.setForInstantConversionWithString( Instant.parse( target.getForInstantConversionWithString() ) );'), (563, '        }'), (564, '        if ( target.getForPeriodConversionWithString() != null ) {'), (565, '            source.setForPeriodConversionWithString( Period.parse( target.getForPeriodConversionWithString() ) );'), (566, '        }'), (567, '        if ( target.getForDurationConversionWithString() != null ) {'), (568, '            source.setForDurationConversionWithString( Duration.parse( target.getForDurationConversionWithString() ) );'), (569, '        }'), (570, ''), (571, '        return source;'), (572, '    }'), (573, ''), (574, '    @Override'), (575, '    public Source targetToSourceDefaultMapping(Target target) {'), (576, '        if ( target == null ) {'), (577, '            return null;'), (578, '        }'), (579, ''), (580, '        Source source = new Source();'), (581, ''), (582, '        if ( target.getZonedDateTime() != null ) {'), (583, '            source.setZonedDateTime( ZonedDateTime.parse( target.getZonedDateTime(), dateTimeFormatter_dd_MM_yyyy_HH_mm_z_01894582668 ) );'), (584, '        }'), (585, '        if ( target.getLocalDateTime() != null ) {'), (586, '            source.setLocalDateTime( LocalDateTime.parse( target.getLocalDateTime(), dateTimeFormatter_dd_MM_yyyy_HH_mm_12071769242 ) );'), (587, '        }'), (588, '        if ( target.getLocalDate() != null ) {'), (589, '            source.setLocalDate( LocalDate.parse( target.getLocalDate(), dateTimeFormatter_dd_MM_yyyy_11900521056 ) );'), (590, '        }'), (591, '        if ( target.getLocalTime() != null ) {'), (592, '            source.setLocalTime( LocalTime.parse( target.getLocalTime(), dateTimeFormatter_HH_mm_168697690 ) );'), (593, '        }'), (594, '        source.setForCalendarConversion( calendarToZonedDateTime( target.getForCalendarConversion() ) );'), (595, '        if ( target.getForDateConversionWithZonedDateTime() != null ) {'), (596, '            source.setForDateConversionWithZonedDateTime( ZonedDateTime.ofInstant( target.getForDateConversionWithZonedDateTime().toInstant(), ZoneId.systemDefault() ) );'), (597, '        }'), (598, '        if ( target.getForDateConversionWithLocalDateTime() != null ) {'), (599, '            source.setForDateConversionWithLocalDateTime( LocalDateTime.ofInstant( target.getForDateConversionWithLocalDateTime().toInstant(), ZoneId.of( ""UTC"" ) ) );'), (600, '        }'), (601, '        if ( target.getForDateConversionWithLocalDate() != null ) {'), (602, '            source.setForDateConversionWithLocalDate( LocalDateTime.ofInstant( target.getForDateConversionWithLocalDate().toInstant(), ZoneOffset.UTC ).toLocalDate() );'), (603, '        }'), (604, '        if ( target.getForSqlDateConversionWithLocalDate() != null ) {'), (605, '            source.setForSqlDateConversionWithLocalDate( target.getForSqlDateConversionWithLocalDate().toLocalDate() );'), (606, '        }'), (607, '        if ( target.getForDateConversionWithInstant() != null ) {'), (608, '            source.setForDateConversionWithInstant( target.getForDateConversionWithInstant().toInstant() );'), (609, '        }'), (610, '        if ( target.getForInstantConversionWithString() != null ) {'), (611, '            source.setForInstantConversionWithString( Instant.parse( target.getForInstantConversionWithString() ) );'), (612, '        }'), (613, '        if ( target.getForPeriodConversionWithString() != null ) {'), (614, '            source.setForPeriodConversionWithString( Period.parse( target.getForPeriodConversionWithString() ) );'), (615, '        }'), (616, '        if ( target.getForDurationConversionWithString() != null ) {'), (617, '            source.setForDurationConversionWithString( Duration.parse( target.getForDurationConversionWithString() ) );'), (618, '        }'), (619, ''), (620, '        return source;'), (621, '    }'), (622, ''), (623, '    private ZonedDateTime calendarToZonedDateTime(Calendar cal) {'), (624, '        if ( cal == null ) {'), (625, '            return null;'), (626, '        }'), (627, ''), (628, '        return ZonedDateTime.ofInstant( cal.toInstant(), cal.getTimeZone().toZoneId() );'), (629, '    }'), (630, ''), (631, '    private Calendar zonedDateTimeToCalendar(ZonedDateTime dateTime) {'), (632, '        if ( dateTime == null ) {'), (633, '            return null;'), (634, '        }'), (635, ''), (636, '        Calendar instance = Calendar.getInstance( TimeZone.getTimeZone( dateTime.getZone() ) );'), (637, '        instance.setTimeInMillis( dateTime.toInstant().toEpochMilli() );'), (638, '        return instance;'), (639, '    }'), (640, '}')], 'deleted': []}"
48,a6ac4f3fd699ec71e7f4b1fcbe0f6e8061c3e1cf,processor/src/test/resources/fixtures/org/mapstruct/ap/test/conversion/java8time/custompatterndatetimeformattergenerated/SourceTargetMapperImpl.java,SourceTargetMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.conversion.java8time.custompatterndatetimeformattergenerated;'), (7, ''), (8, 'import java.time.LocalDateTime;'), (9, 'import java.time.format.DateTimeFormatter;'), (10, 'import javax.annotation.Generated;'), (11, ''), (12, '@Generated('), (13, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (14, '    date = ""2021-05-16T13:11:04+0200"",'), (15, '    comments = ""version: , compiler: javac, environment: Java 1.8.0_275 (AdoptOpenJDK)""'), (16, ')'), (17, 'public class SourceTargetMapperImpl implements SourceTargetMapper {'), (18, ''), (19, '    private final DateTimeFormatter dateTimeFormatter_dd_MM_yyyy_HH_mm_12071769242 = DateTimeFormatter.ofPattern( ""dd.MM.yyyy HH:mm"" );'), (20, '    private final DateTimeFormatter dateTimeFormatter_dd_MM_yyyy_HH_mm_12071757710 = DateTimeFormatter.ofPattern( ""dd.MM.yyyy HH.mm"" );'), (21, ''), (22, '    @Override'), (23, '    public Target map(Source source) {'), (24, '        if ( source == null ) {'), (25, '            return null;'), (26, '        }'), (27, ''), (28, '        Target target = new Target();'), (29, ''), (30, '        if ( source.getLocalDateTime1() != null ) {'), (31, '            target.setLocalDateTime1( dateTimeFormatter_dd_MM_yyyy_HH_mm_12071769242.format( source.getLocalDateTime1() ) );'), (32, '        }'), (33, '        if ( source.getLocalDateTime2() != null ) {'), (34, '            target.setLocalDateTime2( dateTimeFormatter_dd_MM_yyyy_HH_mm_12071769242.format( source.getLocalDateTime2() ) );'), (35, '        }'), (36, '        if ( source.getLocalDateTime3() != null ) {'), (37, '            target.setLocalDateTime3( dateTimeFormatter_dd_MM_yyyy_HH_mm_12071757710.format( source.getLocalDateTime3() ) );'), (38, '        }'), (39, ''), (40, '        return target;'), (41, '    }'), (42, ''), (43, '    @Override'), (44, '    public Source map(Target target) {'), (45, '        if ( target == null ) {'), (46, '            return null;'), (47, '        }'), (48, ''), (49, '        Source source = new Source();'), (50, ''), (51, '        if ( target.getLocalDateTime1() != null ) {'), (52, '            source.setLocalDateTime1( LocalDateTime.parse( target.getLocalDateTime1(), dateTimeFormatter_dd_MM_yyyy_HH_mm_12071769242 ) );'), (53, '        }'), (54, '        if ( target.getLocalDateTime2() != null ) {'), (55, '            source.setLocalDateTime2( LocalDateTime.parse( target.getLocalDateTime2(), dateTimeFormatter_dd_MM_yyyy_HH_mm_12071769242 ) );'), (56, '        }'), (57, '        if ( target.getLocalDateTime3() != null ) {'), (58, '            source.setLocalDateTime3( LocalDateTime.parse( target.getLocalDateTime3(), dateTimeFormatter_dd_MM_yyyy_HH_mm_12071757710 ) );'), (59, '        }'), (60, ''), (61, '        return source;'), (62, '    }'), (63, '}')], 'deleted': []}"
49,fdf3dcc8efaf0cdc1a2145dd53c1302346e2838a,processor/src/main/resources/META-INF/services/org.mapstruct.ap.spi.EnumTransformationStrategy,org.mapstruct.ap.spi.EnumTransformationStrategy,5,"{'added': [(9, 'org.mapstruct.ap.spi.CaseEnumTransformationStrategy')], 'deleted': []}"
50,5bbd1a78ea67442cf8024fdcef7c9dff4356408d,processor/src/test/resources/META-INF/services/org.junit.platform.launcher.LauncherDiscoveryListener,org.junit.platform.launcher.LauncherDiscoveryListener,1,"{'added': [(1, 'org.mapstruct.ap.testutil.runner.CompilerLauncherDiscoveryListener')], 'deleted': []}"
51,51cdbd67e3f6b65ca2f3879f333661be2c5d215b,processor/src/main/resources/org/mapstruct/ap/internal/model/MethodReferencePresenceCheck.ftl,MethodReferencePresenceCheck.ftl,1,"{'added': [(1, '<#--'), (2, ''), (3, '    Copyright MapStruct Authors.'), (4, ''), (5, '    Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (6, ''), (7, '-->'), (8, '<#-- @ftlvariable name="""" type=""org.mapstruct.ap.internal.model.MethodReferencePresenceCheck"" -->'), (9, '<@includeModel object=methodReference/>')], 'deleted': []}"
52,51cdbd67e3f6b65ca2f3879f333661be2c5d215b,processor/src/main/resources/org/mapstruct/ap/internal/model/presence/JavaExpressionPresenceCheck.ftl,JavaExpressionPresenceCheck.ftl,1,"{'added': [(1, '<#--'), (2, ''), (3, '    Copyright MapStruct Authors.'), (4, ''), (5, '    Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (6, ''), (7, '-->'), (8, '<#-- @ftlvariable name="""" type=""org.mapstruct.ap.internal.model.presence.JavaExpressionPresenceCheck"" -->'), (9, '${javaExpression}')], 'deleted': []}"
53,51cdbd67e3f6b65ca2f3879f333661be2c5d215b,processor/src/test/resources/fixtures/org/mapstruct/ap/test/conditional/basic/ConditionalMethodInMapperImpl.java,ConditionalMethodInMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.conditional.basic;'), (7, ''), (8, 'import javax.annotation.processing.Generated;'), (9, ''), (10, '@Generated('), (11, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (12, '    date = ""2021-04-19T21:10:40+0200"",'), (13, '    comments = ""version: , compiler: javac, environment: Java 11.0.9.1 (AdoptOpenJDK)""'), (14, ')'), (15, 'public class ConditionalMethodInMapperImpl implements ConditionalMethodInMapper {'), (16, ''), (17, '    @Override'), (18, '    public BasicEmployee map(BasicEmployeeDto employee) {'), (19, '        if ( employee == null ) {'), (20, '            return null;'), (21, '        }'), (22, ''), (23, '        BasicEmployee basicEmployee = new BasicEmployee();'), (24, ''), (25, '        if ( isNotBlank( employee.getName() ) ) {'), (26, '            basicEmployee.setName( employee.getName() );'), (27, '        }'), (28, ''), (29, '        return basicEmployee;'), (30, '    }'), (31, '}')], 'deleted': []}"
54,51cdbd67e3f6b65ca2f3879f333661be2c5d215b,processor/src/test/resources/fixtures/org/mapstruct/ap/test/conditional/basic/ConditionalMethodWithSourceParameterAndValueMapperImpl.java,ConditionalMethodWithSourceParameterAndValueMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.conditional.basic;'), (7, ''), (8, 'import javax.annotation.processing.Generated;'), (9, ''), (10, '@Generated('), (11, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (12, '    date = ""2021-04-19T21:10:38+0200"",'), (13, '    comments = ""version: , compiler: javac, environment: Java 11.0.9.1 (AdoptOpenJDK)""'), (14, ')'), (15, 'public class ConditionalMethodWithSourceParameterAndValueMapperImpl implements ConditionalMethodWithSourceParameterAndValueMapper {'), (16, ''), (17, '    @Override'), (18, '    public BasicEmployee map(BasicEmployeeDto employee) {'), (19, '        if ( employee == null ) {'), (20, '            return null;'), (21, '        }'), (22, ''), (23, '        BasicEmployee basicEmployee = new BasicEmployee();'), (24, ''), (25, '        if ( isPresent( employee, employee.getName() ) ) {'), (26, '            basicEmployee.setName( employee.getName() );'), (27, '        }'), (28, ''), (29, '        return basicEmployee;'), (30, '    }'), (31, '}')], 'deleted': []}"
55,a2e1404b9326d9b4953a66ba3226a31137224056,processor/src/main/resources/org/mapstruct/ap/internal/model/NestedPropertyMappingMethod.ftl,NestedPropertyMappingMethod.ftl,5,"{'added': [(14, '    <#if entry.presenceChecker?? >'), (15, '    if ( <#if entry_index != 0>${entry.previousPropertyName} == null || </#if>!<@includeModel object=entry.presenceChecker /> ) {'), (19, '    <@includeModel object=entry.type.typeBound/> ${entry.name} = ${entry.previousPropertyName}.${entry.accessorName};'), (20, '    <#if !entry.presenceChecker?? >')], 'deleted': [(14, '    <#if entry.presenceCheckerName?? >'), (15, '    if ( <#if entry_index != 0><@localVarName index=entry_index/> == null || </#if>!<@localVarName index=entry_index/>.${entry.presenceCheckerName}() ) {'), (19, '    <@includeModel object=entry.type.typeBound/> ${entry.name} = <@localVarName index=entry_index/>.${entry.accessorName};'), (20, '    <#if !entry.presenceCheckerName?? >'), (32, '<#macro localVarName index><#if index == 0>${sourceParameter.name}<#else>${propertyEntries[index-1].name}</#if></#macro>')]}"
56,a2e1404b9326d9b4953a66ba3226a31137224056,processor/src/main/resources/org/mapstruct/ap/internal/model/macro/CommonMacros.ftl,CommonMacros.ftl,5,"{'added': [(18, '        if ( <@includeModel object=sourcePresenceCheckerReference /> ) {'), (60, '    if ( <@includeModel object=sourcePresenceCheckerReference /> ) {')], 'deleted': [(18, '        if ( ${sourcePresenceCheckerReference} ) {'), (60, '    if ( ${sourcePresenceCheckerReference} ) {')]}"
57,a2e1404b9326d9b4953a66ba3226a31137224056,processor/src/main/resources/org/mapstruct/ap/internal/model/presence/AllPresenceChecksPresenceCheck.ftl,AllPresenceChecksPresenceCheck.ftl,1,"{'added': [(1, '<#--'), (2, ''), (3, '    Copyright MapStruct Authors.'), (4, ''), (5, '    Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (6, ''), (7, '-->'), (8, '<#-- @ftlvariable name="""" type=""org.mapstruct.ap.internal.model.presence.AllPresenceChecksPresenceCheck"" -->'), (9, '<@compress single_line=true>'), (10, '<#list presenceChecks as presenceCheck>'), (11, '    <#if presenceCheck_index != 0>'), (12, '        &&'), (13, '    </#if>'), (14, '    <@includeModel object=presenceCheck />'), (15, '</#list>'), (16, '</@compress>')], 'deleted': []}"
58,a2e1404b9326d9b4953a66ba3226a31137224056,processor/src/main/resources/org/mapstruct/ap/internal/model/presence/NullPresenceCheck.ftl,NullPresenceCheck.ftl,1,"{'added': [(1, '<#--'), (2, ''), (3, '    Copyright MapStruct Authors.'), (4, ''), (5, '    Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (6, ''), (7, '-->'), (8, '<#-- @ftlvariable name="""" type=""org.mapstruct.ap.internal.model.presence.NullPresenceCheck"" -->'), (9, '${sourceReference} != null')], 'deleted': []}"
59,a2e1404b9326d9b4953a66ba3226a31137224056,processor/src/main/resources/org/mapstruct/ap/internal/model/presence/SourceReferenceMethodPresenceCheck.ftl,SourceReferenceMethodPresenceCheck.ftl,1,"{'added': [(1, '<#--'), (2, ''), (3, '    Copyright MapStruct Authors.'), (4, ''), (5, '    Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (6, ''), (7, '-->'), (8, '<#-- @ftlvariable name="""" type=""org.mapstruct.ap.internal.model.presence.SourceReferenceMethodPresenceCheck"" -->'), (9, '${sourceReference}.${methodName}()')], 'deleted': []}"
60,1c8fff1475829ad7524cf706d1d0b2ab36dc29bc,processor/src/test/resources/fixtures/org/mapstruct/ap/test/bugs/_913/DomainDtoWithPresenceCheckMapperImpl.java,DomainDtoWithPresenceCheckMapperImpl.java,5,"{'added': [(35, '        if ( source.hasStrings() ) {'), (36, '            domain.setLongs( stringListToLongSet( source.getStrings() ) );'), (37, '        }'), (42, '        if ( source.hasStringsInitialized() ) {'), (43, '            domain.setLongsInitialized( stringListToLongSet( source.getStringsInitialized() ) );'), (44, '        }')], 'deleted': [(35, '        domain.setLongs( stringListToLongSet( source.getStrings() ) );'), (40, '        domain.setLongsInitialized( stringListToLongSet( source.getStringsInitialized() ) );')]}"
61,2be536bb65d220495b8d7f7f224451f1d59a1bb9,processor/src/test/resources/fixtures/org/mapstruct/ap/test/bugs/_1453/Issue1453MapperImpl.java,Issue1453MapperImpl.java,5,"{'added': [(9, 'import java.util.LinkedHashMap;'), (71, '        Map<AuctionDto, AuctionDto> map = new LinkedHashMap<AuctionDto, AuctionDto>( Math.max( (int) ( auctions.size() / .75f ) + 1, 16 ) );'), (88, '        Map<? super AuctionDto, ? super AuctionDto> map = new LinkedHashMap<AuctionDto, AuctionDto>( Math.max( (int) ( auctions.size() / .75f ) + 1, 16 ) );'), (129, '        Map<PaymentDto, PaymentDto> map1 = new LinkedHashMap<PaymentDto, PaymentDto>( Math.max( (int) ( map.size() / .75f ) + 1, 16 ) );')], 'deleted': [(9, 'import java.util.HashMap;'), (71, '        Map<AuctionDto, AuctionDto> map = new HashMap<AuctionDto, AuctionDto>( Math.max( (int) ( auctions.size() / .75f ) + 1, 16 ) );'), (88, '        Map<? super AuctionDto, ? super AuctionDto> map = new HashMap<AuctionDto, AuctionDto>( Math.max( (int) ( auctions.size() / .75f ) + 1, 16 ) );'), (129, '        Map<PaymentDto, PaymentDto> map1 = new HashMap<PaymentDto, PaymentDto>( Math.max( (int) ( map.size() / .75f ) + 1, 16 ) );')]}"
62,2be536bb65d220495b8d7f7f224451f1d59a1bb9,processor/src/test/resources/fixtures/org/mapstruct/ap/test/bugs/_1707/ConverterImpl.java,ConverterImpl.java,5,"{'added': [(8, 'import java.util.LinkedHashSet;'), (27, '        Set<Target> set = new LinkedHashSet<Target>();'), (30, '            .collect( Collectors.toCollection( LinkedHashSet<Target>::new ) )')], 'deleted': [(8, 'import java.util.HashSet;'), (27, '        Set<Target> set = new HashSet<Target>();'), (30, '            .collect( Collectors.toCollection( HashSet<Target>::new ) )')]}"
63,2be536bb65d220495b8d7f7f224451f1d59a1bb9,processor/src/test/resources/fixtures/org/mapstruct/ap/test/bugs/_913/DomainDtoWithNcvsAlwaysMapperImpl.java,DomainDtoWithNcvsAlwaysMapperImpl.java,5,"{'added': [(9, 'import java.util.LinkedHashSet;'), (33, '            domain.setStrings( new LinkedHashSet<String>( list ) );'), (40, '            domain.setStringsInitialized( new LinkedHashSet<String>( list1 ) );'), (71, '                target.setStrings( new LinkedHashSet<String>( list ) );'), (94, '                target.setStringsInitialized( new LinkedHashSet<String>( list1 ) );'), (143, '                target.setStrings( new LinkedHashSet<String>( list ) );'), (166, '                target.setStringsInitialized( new LinkedHashSet<String>( list1 ) );'), (207, '        Set<Long> set = new LinkedHashSet<Long>( Math.max( (int) ( list.size() / .75f ) + 1, 16 ) );')], 'deleted': [(9, 'import java.util.HashSet;'), (33, '            domain.setStrings( new HashSet<String>( list ) );'), (40, '            domain.setStringsInitialized( new HashSet<String>( list1 ) );'), (71, '                target.setStrings( new HashSet<String>( list ) );'), (94, '                target.setStringsInitialized( new HashSet<String>( list1 ) );'), (143, '                target.setStrings( new HashSet<String>( list ) );'), (166, '                target.setStringsInitialized( new HashSet<String>( list1 ) );'), (207, '        Set<Long> set = new HashSet<Long>( Math.max( (int) ( list.size() / .75f ) + 1, 16 ) );')]}"
64,2be536bb65d220495b8d7f7f224451f1d59a1bb9,processor/src/test/resources/fixtures/org/mapstruct/ap/test/bugs/_913/DomainDtoWithNvmsDefaultMapperImpl.java,DomainDtoWithNvmsDefaultMapperImpl.java,5,"{'added': [(9, 'import java.util.LinkedHashSet;'), (31, '                domain.setStrings( new LinkedHashSet<String>( list ) );'), (36, '                domain.setStringsInitialized( new LinkedHashSet<String>( list1 ) );'), (62, '                    target.setStrings( new LinkedHashSet<String>() );'), (68, '                    target.setStrings( new LinkedHashSet<String>( list ) );'), (78, '                    target.setLongs( new LinkedHashSet<Long>() );'), (94, '                    target.setStringsInitialized( new LinkedHashSet<String>() );'), (100, '                    target.setStringsInitialized( new LinkedHashSet<String>( list1 ) );'), (110, '                    target.setLongsInitialized( new LinkedHashSet<Long>() );'), (152, '                    target.setStrings( new LinkedHashSet<String>() );'), (158, '                    target.setStrings( new LinkedHashSet<String>( list ) );'), (168, '                    target.setLongs( new LinkedHashSet<Long>() );'), (184, '                    target.setStringsInitialized( new LinkedHashSet<String>() );'), (190, '                    target.setStringsInitialized( new LinkedHashSet<String>( list1 ) );'), (200, '                    target.setLongsInitialized( new LinkedHashSet<Long>() );'), (235, '            return new LinkedHashSet<Long>();'), (238, '        Set<Long> set = new LinkedHashSet<Long>( Math.max( (int) ( list.size() / .75f ) + 1, 16 ) );')], 'deleted': [(9, 'import java.util.HashSet;'), (31, '                domain.setStrings( new HashSet<String>( list ) );'), (36, '                domain.setStringsInitialized( new HashSet<String>( list1 ) );'), (62, '                    target.setStrings( new HashSet<String>() );'), (68, '                    target.setStrings( new HashSet<String>( list ) );'), (78, '                    target.setLongs( new HashSet<Long>() );'), (94, '                    target.setStringsInitialized( new HashSet<String>() );'), (100, '                    target.setStringsInitialized( new HashSet<String>( list1 ) );'), (110, '                    target.setLongsInitialized( new HashSet<Long>() );'), (152, '                    target.setStrings( new HashSet<String>() );'), (158, '                    target.setStrings( new HashSet<String>( list ) );'), (168, '                    target.setLongs( new HashSet<Long>() );'), (184, '                    target.setStringsInitialized( new HashSet<String>() );'), (190, '                    target.setStringsInitialized( new HashSet<String>( list1 ) );'), (200, '                    target.setLongsInitialized( new HashSet<Long>() );'), (235, '            return new HashSet<Long>();'), (238, '        Set<Long> set = new HashSet<Long>( Math.max( (int) ( list.size() / .75f ) + 1, 16 ) );')]}"
65,2be536bb65d220495b8d7f7f224451f1d59a1bb9,processor/src/test/resources/fixtures/org/mapstruct/ap/test/bugs/_913/DomainDtoWithNvmsNullMapperImpl.java,DomainDtoWithNvmsNullMapperImpl.java,5,"{'added': [(9, 'import java.util.LinkedHashSet;'), (33, '            domain.setStrings( new LinkedHashSet<String>( list ) );'), (38, '            domain.setStringsInitialized( new LinkedHashSet<String>( list1 ) );'), (71, '                target.setStrings( new LinkedHashSet<String>( list ) );'), (103, '                target.setStringsInitialized( new LinkedHashSet<String>( list1 ) );'), (162, '                target.setStrings( new LinkedHashSet<String>( list ) );'), (194, '                target.setStringsInitialized( new LinkedHashSet<String>( list1 ) );'), (241, '        Set<Long> set = new LinkedHashSet<Long>( Math.max( (int) ( list.size() / .75f ) + 1, 16 ) );')], 'deleted': [(9, 'import java.util.HashSet;'), (33, '            domain.setStrings( new HashSet<String>( list ) );'), (38, '            domain.setStringsInitialized( new HashSet<String>( list1 ) );'), (71, '                target.setStrings( new HashSet<String>( list ) );'), (103, '                target.setStringsInitialized( new HashSet<String>( list1 ) );'), (162, '                target.setStrings( new HashSet<String>( list ) );'), (194, '                target.setStringsInitialized( new HashSet<String>( list1 ) );'), (241, '        Set<Long> set = new HashSet<Long>( Math.max( (int) ( list.size() / .75f ) + 1, 16 ) );')]}"
66,2be536bb65d220495b8d7f7f224451f1d59a1bb9,processor/src/test/resources/fixtures/org/mapstruct/ap/test/bugs/_913/DomainDtoWithPresenceCheckMapperImpl.java,DomainDtoWithPresenceCheckMapperImpl.java,5,"{'added': [(9, 'import java.util.LinkedHashSet;'), (33, '            domain.setStrings( new LinkedHashSet<String>( list ) );'), (38, '            domain.setStringsInitialized( new LinkedHashSet<String>( list1 ) );'), (67, '                target.setStrings( new LinkedHashSet<String>( list ) );'), (90, '                target.setStringsInitialized( new LinkedHashSet<String>( list1 ) );'), (139, '                target.setStrings( new LinkedHashSet<String>( list ) );'), (162, '                target.setStringsInitialized( new LinkedHashSet<String>( list1 ) );'), (203, '        Set<Long> set = new LinkedHashSet<Long>( Math.max( (int) ( list.size() / .75f ) + 1, 16 ) );')], 'deleted': [(9, 'import java.util.HashSet;'), (33, '            domain.setStrings( new HashSet<String>( list ) );'), (38, '            domain.setStringsInitialized( new HashSet<String>( list1 ) );'), (67, '                target.setStrings( new HashSet<String>( list ) );'), (90, '                target.setStringsInitialized( new HashSet<String>( list1 ) );'), (139, '                target.setStrings( new HashSet<String>( list ) );'), (162, '                target.setStringsInitialized( new HashSet<String>( list1 ) );'), (203, '        Set<Long> set = new HashSet<Long>( Math.max( (int) ( list.size() / .75f ) + 1, 16 ) );')]}"
67,2be536bb65d220495b8d7f7f224451f1d59a1bb9,processor/src/test/resources/fixtures/org/mapstruct/ap/test/collection/defaultimplementation/SourceTargetMapperImpl.java,SourceTargetMapperImpl.java,5,"{'added': [(10, 'import java.util.LinkedHashMap;'), (11, 'import java.util.LinkedHashSet;'), (85, '        Set<TargetFoo> set = new LinkedHashSet<TargetFoo>( Math.max( (int) ( foos.size() / .75f ) + 1, 16 ) );'), (181, '        Map<String, TargetFoo> map = new LinkedHashMap<String, TargetFoo>( Math.max( (int) ( foos.size() / .75f ) + 1, 16 ) );')], 'deleted': [(10, 'import java.util.HashMap;'), (11, 'import java.util.HashSet;'), (85, '        Set<TargetFoo> set = new HashSet<TargetFoo>( Math.max( (int) ( foos.size() / .75f ) + 1, 16 ) );'), (181, '        Map<String, TargetFoo> map = new HashMap<String, TargetFoo>( Math.max( (int) ( foos.size() / .75f ) + 1, 16 ) );')]}"
68,2be536bb65d220495b8d7f7f224451f1d59a1bb9,processor/src/test/resources/fixtures/org/mapstruct/ap/test/updatemethods/CompanyMapper1Impl.java,CompanyMapper1Impl.java,5,"{'added': [(8, 'import java.util.LinkedHashMap;'), (86, '        Map<SecretaryEntity, EmployeeEntity> map1 = new LinkedHashMap<SecretaryEntity, EmployeeEntity>( Math.max( (int) ( map.size() / .75f ) + 1, 16 ) );')], 'deleted': [(8, 'import java.util.HashMap;'), (86, '        Map<SecretaryEntity, EmployeeEntity> map1 = new HashMap<SecretaryEntity, EmployeeEntity>( Math.max( (int) ( map.size() / .75f ) + 1, 16 ) );')]}"
69,2be536bb65d220495b8d7f7f224451f1d59a1bb9,processor/src/test/resources/fixtures/org/mapstruct/ap/test/updatemethods/selection/DepartmentMapperImpl.java,DepartmentMapperImpl.java,5,"{'added': [(9, 'import java.util.LinkedHashMap;'), (45, '                entity.setSecretaryToEmployee( new LinkedHashMap<SecretaryEntity, EmployeeEntity>() );')], 'deleted': [(9, 'import java.util.HashMap;'), (45, '                entity.setSecretaryToEmployee( new HashMap<SecretaryEntity, EmployeeEntity>() );')]}"
70,c9199b7068726c279f8daf738f3a2d4076c940b7,processor/src/main/resources/org/mapstruct/ap/internal/model/GeneratedType.ftl,GeneratedType.ftl,5,"{'added': [(27, '<#lt>${accessibility.keyword} class ${name} <#if mapperDefinitionType.interface>implements<#else>extends</#if> <@includeModel object=mapperDefinitionType/> {')], 'deleted': [(27, '<#lt>${accessibility.keyword} class ${name}<#if superClassName??> extends ${superClassName}</#if><#if interfaceName??> implements ${interfaceName}</#if> {')]}"
71,1187e357c1bca9d78cd58794b873822802694964,processor/src/main/resources/org/mapstruct/ap/internal/model/common/Type.ftl,Type.ftl,5,"{'added': [(10, '    <#if hasExtendsBound()>'), (12, '    <#elseif hasSuperBound()>')], 'deleted': [(10, '    <#if wildCardExtendsBound>'), (12, '    <#elseif wildCardSuperBound>')]}"
72,197dd4327afe1f9cf55a10579491aa3fe162fb0b,processor/src/main/resources/org/mapstruct/ap/internal/model/ValueMappingMethod.ftl,ValueMappingMethod.ftl,5,"{'added': [(18, '        <#if nullTarget.targetAsException>throw new <@includeModel object=unexpectedValueMappingException />( ""Unexpected enum constant: "" + ${sourceParameter.name} );<#else>return <@writeTarget target=nullTarget.target/>;</#if>'), (28, '    default: <#if defaultTarget.targetAsException >throw new <@includeModel object=unexpectedValueMappingException />( ""Unexpected enum constant: "" + ${sourceParameter.name} )<#else>${resultName} = <@writeTarget target=defaultTarget.target/></#if>;'), (43, '    <#if !(valueMappings.empty && defaultTarget.targetAsException)>')], 'deleted': [(18, '        <#if nullAsException >throw new <@includeModel object=unexpectedValueMappingException />( ""Unexpected enum constant: "" + ${sourceParameter.name} );<#else>return <@writeTarget target=nullTarget/>;</#if>'), (28, '    default: <#if defaultAsException >throw new <@includeModel object=unexpectedValueMappingException />( ""Unexpected enum constant: "" + ${sourceParameter.name} )<#else>${resultName} = <@writeTarget target=defaultTarget/></#if>;'), (43, '    <#if !(valueMappings.empty && unexpectedValueMappingException??)>')]}"
73,c4135e68ed8330fbc5180abd828e35b30f606ece,processor/src/main/resources/org/mapstruct/ap/internal/model/ValueMappingMethod.ftl,ValueMappingMethod.ftl,5,"{'added': [(18, '        <#if nullAsException >throw new <@includeModel object=unexpectedValueMappingException />( ""Unexpected enum constant: "" + ${sourceParameter.name} );<#else>return <@writeTarget target=nullTarget/>;</#if>'), (25, '        case <@writeSource source=valueMapping.source/>: <#if valueMapping.targetAsException >throw new <@includeModel object=unexpectedValueMappingException />( ""Unexpected enum constant: "" + ${sourceParameter.name} );<#else>${resultName} = <@writeTarget target=valueMapping.target/>;'), (26, '        break;</#if>'), (28, '    default: <#if defaultAsException >throw new <@includeModel object=unexpectedValueMappingException />( ""Unexpected enum constant: "" + ${sourceParameter.name} )<#else>${resultName} = <@writeTarget target=defaultTarget/></#if>;'), (68, '</#macro>')], 'deleted': [(18, '        return <@writeTarget target=nullTarget/>;'), (25, '        case <@writeSource source=valueMapping.source/>: ${resultName} = <@writeTarget target=valueMapping.target/>;'), (26, '        break;'), (28, '    default: <#if unexpectedValueMappingException??>throw new <@includeModel object=unexpectedValueMappingException />( ""Unexpected enum constant: "" + ${sourceParameter.name} )<#else>${resultName} = <@writeTarget target=defaultTarget/></#if>;'), (68, '</#macro>')]}"
74,c4135e68ed8330fbc5180abd828e35b30f606ece,processor/src/test/resources/fixtures/org/mapstruct/ap/test/value/enum2enum/SpecialOrderMapperImpl.java,SpecialOrderMapperImpl.java,5,"{'added': [(14, '    date = ""2021-02-19T21:20:19+0100"",'), (15, '    comments = ""version: , compiler: javac, environment: Java 1.8.0_191 (Oracle Corporation)""')], 'deleted': [(14, '    date = ""2017-02-20T21:25:45+0100"",'), (15, '    comments = ""version: , compiler: javac, environment: Java 1.8.0_112 (Oracle Corporation)""')]}"
75,d9fdd86b94585ba59e918924ecbbcd33e4048573,integrationtest/src/test/resources/gradleIncrementalCompilationTest/src/main/java/org/mapstruct/itest/gradle/lib/TestMapper.java,TestMapper.java,5,"{'added': [(17, '    @Mapping(target = ""field"", source = ""value"")')], 'deleted': [(17, '    @Mapping(source = ""value"", target = ""field"")')]}"
76,d9fdd86b94585ba59e918924ecbbcd33e4048573,integrationtest/src/test/resources/java8Test/src/main/java/org/mapstruct/ap/test/bugs/_636/SourceTargetMapper.java,SourceTargetMapper.java,5,"{'added': [(18, '        @Mapping(target = ""foo"", source = ""idFoo""),'), (19, '        @Mapping(target = ""bar"", source = ""idBar"")')], 'deleted': [(18, '        @Mapping(source = ""idFoo"", target = ""foo""),'), (19, '        @Mapping(source = ""idBar"", target = ""bar"")')]}"
77,d9fdd86b94585ba59e918924ecbbcd33e4048573,integrationtest/src/test/resources/java8Test/src/main/java/org/mapstruct/itest/java8/Java8Mapper.java,Java8Mapper.java,5,"{'added': [(17, '    @Mapping(target = ""givenName"", source = ""firstName"")'), (18, '    @Mapping(target = ""surname"", source = ""lastName"")')], 'deleted': [(17, '    @Mapping(source = ""firstName"", target = ""givenName"")'), (18, '    @Mapping(source = ""lastName"", target = ""surname"")')]}"
78,d9fdd86b94585ba59e918924ecbbcd33e4048573,integrationtest/src/test/resources/simpleTest/src/main/java/org/mapstruct/itest/simple/SourceTargetAbstractMapper.java,SourceTargetAbstractMapper.java,5,"{'added': [(19, '        @Mapping(target = ""baz"", source = ""qax""),'), (20, '        @Mapping(target = ""qax"", source = ""baz""),'), (21, '        @Mapping(target = ""fromNested"", source = ""forNested.value"")')], 'deleted': [(19, '        @Mapping(source = ""qax"", target = ""baz""),'), (20, '        @Mapping(source = ""baz"", target = ""qax""),'), (21, '        @Mapping(source = ""forNested.value"", target = ""fromNested"")')]}"
79,d9fdd86b94585ba59e918924ecbbcd33e4048573,integrationtest/src/test/resources/simpleTest/src/main/java/org/mapstruct/itest/simple/SourceTargetMapper.java,SourceTargetMapper.java,5,"{'added': [(20, '        @Mapping(target = ""baz"", source = ""qax""),'), (21, '        @Mapping(target = ""qax"", source = ""baz""),'), (22, '        @Mapping(target = ""fromNested"", source = ""forNested.value"")')], 'deleted': [(20, '        @Mapping(source = ""qax"", target = ""baz""),'), (21, '        @Mapping(source = ""baz"", target = ""qax""),'), (22, '        @Mapping(source = ""forNested.value"", target = ""fromNested"")')]}"
80,b643061b57f39dbf75d7142ec7b9144ed184331b,processor/src/test/resources/fixtures/org/mapstruct/ap/test/defaultcomponentmodel/InstanceIterableMapperImpl.java,InstanceIterableMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.defaultcomponentmodel;'), (7, ''), (8, 'import java.util.ArrayList;'), (9, 'import java.util.List;'), (10, 'import javax.annotation.processing.Generated;'), (11, ''), (12, '@Generated('), (13, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (14, '    date = ""2021-02-06T16:20:45+0100"",'), (15, '    comments = ""version: , compiler: javac, environment: Java 11.0.9.1 (AdoptOpenJDK)""'), (16, ')'), (17, 'public class InstanceIterableMapperImpl implements InstanceIterableMapper {'), (18, ''), (19, '    private final InstanceMapper instanceMapper = InstanceMapper.INSTANCE;'), (20, ''), (21, '    @Override'), (22, '    public List<Target> map(List<Source> list) {'), (23, '        if ( list == null ) {'), (24, '            return null;'), (25, '        }'), (26, ''), (27, '        List<Target> list1 = new ArrayList<Target>( list.size() );'), (28, '        for ( Source source : list ) {'), (29, '            list1.add( instanceMapper.map( source ) );'), (30, '        }'), (31, ''), (32, '        return list1;'), (33, '    }'), (34, '}')], 'deleted': []}"
81,b643061b57f39dbf75d7142ec7b9144ed184331b,processor/src/test/resources/fixtures/org/mapstruct/ap/test/defaultcomponentmodel/NonInstanceIterableMapperImpl.java,NonInstanceIterableMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.defaultcomponentmodel;'), (7, ''), (8, 'import java.util.ArrayList;'), (9, 'import java.util.List;'), (10, 'import javax.annotation.processing.Generated;'), (11, 'import org.mapstruct.factory.Mappers;'), (12, ''), (13, '@Generated('), (14, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (15, '    date = ""2021-02-06T16:20:45+0100"",'), (16, '    comments = ""version: , compiler: javac, environment: Java 11.0.9.1 (AdoptOpenJDK)""'), (17, ')'), (18, 'public class NonInstanceIterableMapperImpl implements NonInstanceIterableMapper {'), (19, ''), (20, '    private final NonInstanceMapper nonInstanceMapper = Mappers.getMapper( NonInstanceMapper.class );'), (21, ''), (22, '    @Override'), (23, '    public List<Target> map(List<Source> list) {'), (24, '        if ( list == null ) {'), (25, '            return null;'), (26, '        }'), (27, ''), (28, '        List<Target> list1 = new ArrayList<Target>( list.size() );'), (29, '        for ( Source source : list ) {'), (30, '            list1.add( nonInstanceMapper.map( source ) );'), (31, '        }'), (32, ''), (33, '        return list1;'), (34, '    }'), (35, '}')], 'deleted': []}"
82,b643061b57f39dbf75d7142ec7b9144ed184331b,processor/src/test/resources/fixtures/org/mapstruct/ap/test/defaultcomponentmodel/NonPublicIterableMapperImpl.java,NonPublicIterableMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.defaultcomponentmodel;'), (7, ''), (8, 'import java.util.ArrayList;'), (9, 'import java.util.List;'), (10, 'import javax.annotation.processing.Generated;'), (11, 'import org.mapstruct.factory.Mappers;'), (12, ''), (13, '@Generated('), (14, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (15, '    date = ""2021-02-06T16:20:45+0100"",'), (16, '    comments = ""version: , compiler: javac, environment: Java 11.0.9.1 (AdoptOpenJDK)""'), (17, ')'), (18, 'public class NonPublicIterableMapperImpl implements NonPublicIterableMapper {'), (19, ''), (20, '    private final NonPublicMapper nonPublicMapper = Mappers.getMapper( NonPublicMapper.class );'), (21, ''), (22, '    @Override'), (23, '    public List<Target> map(List<Source> list) {'), (24, '        if ( list == null ) {'), (25, '            return null;'), (26, '        }'), (27, ''), (28, '        List<Target> list1 = new ArrayList<Target>( list.size() );'), (29, '        for ( Source source : list ) {'), (30, '            list1.add( nonPublicMapper.map( source ) );'), (31, '        }'), (32, ''), (33, '        return list1;'), (34, '    }'), (35, '}')], 'deleted': []}"
83,c59ca79e7f992d051661fa2d39eb1cbee014b116,processor/src/main/resources/org/mapstruct/ap/internal/model/DefaultMapperReference.ftl,DefaultMapperReference.ftl,5,"{'added': [(9, 'private final <@includeModel object=type/> ${variableName} = <#if singleton><@includeModel object=type/>.INSTANCE;<#else><#if annotatedMapper>Mappers.getMapper( <@includeModel object=type/>.class );<#else>new <@includeModel object=type/>();</#if></#if>')], 'deleted': [(9, 'private final <@includeModel object=type/> ${variableName} = <#if annotatedMapper>Mappers.getMapper( <@includeModel object=type/>.class );<#else>new <@includeModel object=type/>();</#if>')]}"
84,c59ca79e7f992d051661fa2d39eb1cbee014b116,processor/src/test/resources/fixtures/org/mapstruct/ap/test/updatemethods/selection/OrganizationMapper1Impl.java,OrganizationMapper1Impl.java,5,"{'added': [(20, '    private final ExternalMapper externalMapper = ExternalMapper.INSTANCE;')], 'deleted': [(12, 'import org.mapstruct.factory.Mappers;'), (21, '    private final ExternalMapper externalMapper = Mappers.getMapper( ExternalMapper.class );')]}"
85,c59ca79e7f992d051661fa2d39eb1cbee014b116,processor/src/test/resources/fixtures/org/mapstruct/ap/test/updatemethods/selection/OrganizationMapper3Impl.java,OrganizationMapper3Impl.java,5,"{'added': [(20, '    private final ExternalMapper externalMapper = ExternalMapper.INSTANCE;')], 'deleted': [(12, 'import org.mapstruct.factory.Mappers;'), (21, '    private final ExternalMapper externalMapper = Mappers.getMapper( ExternalMapper.class );')]}"
86,dfc752809604dfcff8bec9d5c1c8f679c9dcae61,integrationtest/src/test/resources/lombokBuilderTest/pom.xml,pom.xml,5,"{'added': [(28, '        <dependency>'), (29, '            <groupId>org.projectlombok</groupId>'), (30, '            <artifactId>lombok-mapstruct-binding</artifactId>'), (31, '            <version>0.2.0</version>'), (32, '            <scope>compile</scope>'), (33, '        </dependency>')], 'deleted': []}"
87,4223e3ab812a496aeb31b67a63737fb648bd2ddb,integrationtest/src/test/resources/cdiTest/src/main/java/org/mapstruct/itest/cdi/DecoratedSourceTargetMapper.java,DecoratedSourceTargetMapper.java,5,"{'added': [(9, 'import org.mapstruct.MappingConstants;'), (13, '@Mapper( componentModel = MappingConstants.ComponentModel.CDI, uses = DateMapper.class )')], 'deleted': [(12, '@Mapper( componentModel = ""cdi"", uses = DateMapper.class )')]}"
88,4223e3ab812a496aeb31b67a63737fb648bd2ddb,integrationtest/src/test/resources/cdiTest/src/main/java/org/mapstruct/itest/cdi/SourceTargetMapper.java,SourceTargetMapper.java,5,"{'added': [(9, 'import org.mapstruct.MappingConstants;'), (12, '@Mapper(componentModel = MappingConstants.ComponentModel.CDI, uses = DateMapper.class)')], 'deleted': [(11, '@Mapper(componentModel = ""cdi"", uses = DateMapper.class)')]}"
89,4223e3ab812a496aeb31b67a63737fb648bd2ddb,integrationtest/src/test/resources/jsr330Test/src/main/java/org/mapstruct/itest/jsr330/DecoratedSourceTargetMapper.java,DecoratedSourceTargetMapper.java,5,"{'added': [(9, 'import org.mapstruct.MappingConstants;'), (13, '@Mapper(componentModel = MappingConstants.ComponentModel.JSR330, uses = DateMapper.class)')], 'deleted': [(12, '@Mapper(componentModel = ""jsr330"", uses = DateMapper.class)')]}"
90,4223e3ab812a496aeb31b67a63737fb648bd2ddb,integrationtest/src/test/resources/jsr330Test/src/main/java/org/mapstruct/itest/jsr330/SecondDecoratedSourceTargetMapper.java,SecondDecoratedSourceTargetMapper.java,5,"{'added': [(9, 'import org.mapstruct.MappingConstants;'), (13, '@Mapper(componentModel = MappingConstants.ComponentModel.JSR330, uses = DateMapper.class)')], 'deleted': [(12, '@Mapper(componentModel = ""jsr330"", uses = DateMapper.class)')]}"
91,4223e3ab812a496aeb31b67a63737fb648bd2ddb,integrationtest/src/test/resources/jsr330Test/src/main/java/org/mapstruct/itest/jsr330/SourceTargetMapper.java,SourceTargetMapper.java,5,"{'added': [(9, 'import org.mapstruct.MappingConstants;'), (12, '@Mapper(componentModel = MappingConstants.ComponentModel.JSR330, uses = DateMapper.class)')], 'deleted': [(11, '@Mapper(componentModel = ""jsr330"", uses = DateMapper.class)')]}"
92,4223e3ab812a496aeb31b67a63737fb648bd2ddb,integrationtest/src/test/resources/springTest/src/main/java/org/mapstruct/itest/spring/DecoratedSourceTargetMapper.java,DecoratedSourceTargetMapper.java,5,"{'added': [(9, 'import org.mapstruct.MappingConstants;'), (13, '@Mapper( componentModel = MappingConstants.ComponentModel.SPRING, uses = DateMapper.class )')], 'deleted': [(12, '@Mapper( componentModel = ""spring"", uses = DateMapper.class )')]}"
93,4223e3ab812a496aeb31b67a63737fb648bd2ddb,integrationtest/src/test/resources/springTest/src/main/java/org/mapstruct/itest/spring/SecondDecoratedSourceTargetMapper.java,SecondDecoratedSourceTargetMapper.java,5,"{'added': [(9, 'import org.mapstruct.MappingConstants;'), (13, '@Mapper( componentModel = MappingConstants.ComponentModel.SPRING, uses = DateMapper.class )')], 'deleted': [(12, '@Mapper( componentModel = ""spring"", uses = DateMapper.class )')]}"
94,4223e3ab812a496aeb31b67a63737fb648bd2ddb,integrationtest/src/test/resources/springTest/src/main/java/org/mapstruct/itest/spring/SourceTargetMapper.java,SourceTargetMapper.java,5,"{'added': [(9, 'import org.mapstruct.MappingConstants;'), (12, '@Mapper(componentModel = MappingConstants.ComponentModel.SPRING, uses = DateMapper.class)')], 'deleted': [(11, '@Mapper(componentModel = ""spring"", uses = DateMapper.class)')]}"
95,84c3bda5a23e48956ad5de4955792ef0a278638e,processor/src/main/resources/org/mapstruct/ap/internal/model/BeanMappingMethod.ftl,BeanMappingMethod.ftl,5,"{'added': [(30, '                <#list sourceParametersNeedingNullCheck as sourceParam>'), (42, '                <#list sourceParametersNotNeedingNullCheck as sourceParam>'), (83, '        <#list sourceParametersNeedingNullCheck as sourceParam>'), (92, '        <#list sourceParametersNotNeedingNullCheck as sourceParam>')], 'deleted': [(30, '                <#list sourceParametersExcludingPrimitives as sourceParam>'), (42, '                <#list sourcePrimitiveParameters as sourceParam>'), (83, '        <#list sourceParametersExcludingPrimitives as sourceParam>'), (92, '        <#list sourcePrimitiveParameters as sourceParam>')]}"
96,85890dd442736ea79167bd099c8d68915d384f6c,processor/src/test/resources/fixtures/org/mapstruct/ap/test/bugs/_2245/TestMapperImpl.java,TestMapperImpl.java,1,"{'added': [(1, '/*'), (2, ' * Copyright MapStruct Authors.'), (3, ' *'), (4, ' * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0'), (5, ' */'), (6, 'package org.mapstruct.ap.test.bugs._2245;'), (7, ''), (8, 'import javax.annotation.Generated;'), (9, ''), (10, '@Generated('), (11, '    value = ""org.mapstruct.ap.MappingProcessor"",'), (12, '    date = ""2020-10-24T17:57:23+0200"",'), (13, '    comments = ""version: , compiler: javac, environment: Java 1.8.0_202 (AdoptOpenJdk)""'), (14, ')'), (15, 'public class TestMapperImpl implements TestMapper {'), (16, ''), (17, '    @Override'), (18, '    public Tenant map(TenantDTO tenant) {'), (19, '        if ( tenant == null ) {'), (20, '            return null;'), (21, '        }'), (22, ''), (23, '        Tenant tenant1 = new Tenant();'), (24, ''), (25, '        String id = tenantInnerId( tenant );'), (26, '        if ( id != null ) {'), (27, '            tenant1.setId( id );'), (28, '        }'), (29, '        else {'), (30, '            tenant1.setId( ""test"" );'), (31, '        }'), (32, ''), (33, '        return tenant1;'), (34, '    }'), (35, ''), (36, '    private String tenantInnerId(TenantDTO tenantDTO) {'), (37, '        if ( tenantDTO == null ) {'), (38, '            return null;'), (39, '        }'), (40, '        Inner inner = tenantDTO.getInner();'), (41, '        if ( inner == null ) {'), (42, '            return null;'), (43, '        }'), (44, '        String id = inner.getId();'), (45, '        if ( id == null ) {'), (46, '            return null;'), (47, '        }'), (48, '        return id;'), (49, '    }'), (50, '}')], 'deleted': []}"
97,e67daa37106fddf64e73b26924af3e7a22038728,processor/src/test/resources/fixtures/org/mapstruct/ap/test/conversion/string/SourceTargetMapperImpl.java,SourceTargetMapperImpl.java,5,"{'added': [(12, '    date = ""2020-10-24T17:41:29+0300"",'), (13, '    comments = ""version: , compiler: javac, environment: Java 1.8.0_265 (AdoptOpenJDK)""'), (57, '        if ( source.getSb() != null ) {'), (58, '            target.setSb( source.getSb().toString() );'), (59, '        }'), (121, '        if ( target.getSb() != null ) {'), (122, '            source.setSb( new StringBuilder( target.getSb() ) );'), (123, '        }')], 'deleted': [(12, '    date = ""2016-12-30T19:22:52+0100"",'), (13, '    comments = ""version: , compiler: javac, environment: Java 1.8.0_112 (Oracle Corporation)""')]}"
98,6102d0cc8ee1a62e26462ad78d5cf4fd507a3139,processor/src/test/resources/fixtures/org/mapstruct/ap/test/nestedbeans/mixed/FishTankMapperImpl.java,FishTankMapperImpl.java,5,"{'added': [(60, '        fishTankDto.setFish( fishToFishDto1( source.getFish() ) );'), (62, '        fishTankDto.setQuality( waterQualityToWaterQualityDto1( source.getQuality() ) );'), (200, '    protected FishDto fishToFishDto1(Fish fish) {'), (201, '        if ( fish == null ) {'), (202, '            return null;'), (203, '        }'), (204, ''), (205, '        FishDto fishDto = new FishDto();'), (206, ''), (207, '        fishDto.setKind( fish.getType() );'), (208, ''), (209, '        return fishDto;'), (210, '    }'), (211, ''), (236, '    protected WaterQualityReportDto waterQualityReportToWaterQualityReportDto1(WaterQualityReport waterQualityReport) {'), (237, '        if ( waterQualityReport == null ) {'), (238, '            return null;'), (239, '        }'), (240, ''), (241, '        WaterQualityReportDto waterQualityReportDto = new WaterQualityReportDto();'), (242, ''), (243, '        waterQualityReportDto.setOrganisation( waterQualityReportToWaterQualityOrganisationDto1( waterQualityReport ) );'), (244, '        waterQualityReportDto.setVerdict( waterQualityReport.getVerdict() );'), (245, ''), (246, '        return waterQualityReportDto;'), (247, '    }'), (248, ''), (249, '    protected WaterQualityDto waterQualityToWaterQualityDto1(WaterQuality waterQuality) {'), (250, '        if ( waterQuality == null ) {'), (251, '            return null;'), (252, '        }'), (253, ''), (254, '        WaterQualityDto waterQualityDto = new WaterQualityDto();'), (255, ''), (256, '        waterQualityDto.setReport( waterQualityReportToWaterQualityReportDto1( waterQuality.getReport() ) );'), (257, ''), (258, '        return waterQualityDto;'), (259, '    }'), (260, '')], 'deleted': [(60, '        fishTankDto.setFish( fishToFishDto( source.getFish() ) );'), (62, '        fishTankDto.setQuality( waterQualityToWaterQualityDto( source.getQuality() ) );')]}"
99,50aa9cdbdc5cd721dfe48721059544faf2c818ac,integrationtest/src/test/resources/faultyAstModifyingAnnotationProcessorTest/usage/pom.xml,pom.xml,5,"{'added': [], 'deleted': [(26, '            <version>4.12</version>')]}"
100,50aa9cdbdc5cd721dfe48721059544faf2c818ac,integrationtest/src/test/resources/superTypeGenerationTest/usage/pom.xml,pom.xml,5,"{'added': [], 'deleted': [(26, '            <version>4.12</version>')]}"
101,50aa9cdbdc5cd721dfe48721059544faf2c818ac,integrationtest/src/test/resources/targetTypeGenerationTest/usage/pom.xml,pom.xml,5,"{'added': [], 'deleted': [(26, '            <version>4.12</version>')]}"
102,50aa9cdbdc5cd721dfe48721059544faf2c818ac,integrationtest/src/test/resources/usesTypeGenerationTest/usage/pom.xml,pom.xml,5,"{'added': [], 'deleted': [(26, '            <version>4.12</version>')]}"
