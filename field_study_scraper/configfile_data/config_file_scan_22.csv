,commit_hash,file_path,filename,action,changes
0,9699484b006b7772df077052887acfe19dcc5680,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/WindowTableFunctionJsonPlanTest_jsonplan/testFollowedByWindowDeduplicate.out,testFollowedByWindowDeduplicate.out,1,"{'added': [(1, '{'), (2, '  ""flinkVersion"" : """",'), (3, '  ""nodes"" : [ {'), (4, '    ""class"" : ""org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecTableSourceScan"",'), (5, '    ""scanTableSource"" : {'), (6, '      ""identifier"" : {'), (7, '        ""catalogName"" : ""default_catalog"",'), (8, '        ""databaseName"" : ""default_database"",'), (9, '        ""tableName"" : ""MyTable""'), (10, '      },'), (11, '      ""catalogTable"" : {'), (12, '        ""schema.watermark.0.strategy.expr"" : ""`rowtime` - INTERVAL \'1\' SECOND"",'), (13, '        ""schema.4.expr"" : ""PROCTIME()"",'), (14, '        ""schema.0.data-type"" : ""INT"",'), (15, '        ""schema.2.name"" : ""c"",'), (16, '        ""schema.1.name"" : ""b"",'), (17, '        ""schema.4.name"" : ""proctime"",'), (18, '        ""schema.1.data-type"" : ""BIGINT"",'), (19, '        ""schema.3.data-type"" : ""TIMESTAMP(3)"",'), (20, '        ""schema.2.data-type"" : ""VARCHAR(2147483647)"",'), (21, '        ""schema.3.name"" : ""rowtime"",'), (22, '        ""connector"" : ""values"",'), (23, '        ""schema.watermark.0.rowtime"" : ""rowtime"",'), (24, '        ""schema.watermark.0.strategy.data-type"" : ""TIMESTAMP(3)"",'), (25, '        ""schema.3.expr"" : ""TO_TIMESTAMP(`c`)"",'), (26, '        ""schema.4.data-type"" : ""TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL"",'), (27, '        ""schema.0.name"" : ""a""'), (28, '      }'), (29, '    },'), (30, '    ""id"" : 1,'), (31, '    ""outputType"" : {'), (32, '      ""type"" : ""ROW"",'), (33, '      ""nullable"" : true,'), (34, '      ""fields"" : [ {'), (35, '        ""a"" : ""INT""'), (36, '      }, {'), (37, '        ""b"" : ""BIGINT""'), (38, '      }, {'), (39, '        ""c"" : ""VARCHAR(2147483647)""'), (40, '      } ]'), (41, '    },'), (42, '    ""description"" : ""TableSourceScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c])"",'), (43, '    ""inputProperties"" : [ ]'), (44, '  }, {'), (45, '    ""class"" : ""org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCalc"",'), (46, '    ""projection"" : [ {'), (47, '      ""kind"" : ""INPUT_REF"",'), (48, '      ""inputIndex"" : 0,'), (49, '      ""type"" : {'), (50, '        ""typeName"" : ""INTEGER"",'), (51, '        ""nullable"" : true'), (52, '      }'), (53, '    }, {'), (54, '      ""kind"" : ""INPUT_REF"",'), (55, '      ""inputIndex"" : 1,'), (56, '      ""type"" : {'), (57, '        ""typeName"" : ""BIGINT"",'), (58, '        ""nullable"" : true'), (59, '      }'), (60, '    }, {'), (61, '      ""kind"" : ""INPUT_REF"",'), (62, '      ""inputIndex"" : 2,'), (63, '      ""type"" : {'), (64, '        ""typeName"" : ""VARCHAR"",'), (65, '        ""nullable"" : true,'), (66, '        ""precision"" : 2147483647'), (67, '      }'), (68, '    }, {'), (69, '      ""kind"" : ""REX_CALL"",'), (70, '      ""operator"" : {'), (71, '        ""name"" : ""TO_TIMESTAMP"",'), (72, '        ""kind"" : ""OTHER_FUNCTION"",'), (73, '        ""syntax"" : ""FUNCTION""'), (74, '      },'), (75, '      ""operands"" : [ {'), (76, '        ""kind"" : ""INPUT_REF"",'), (77, '        ""inputIndex"" : 2,'), (78, '        ""type"" : {'), (79, '          ""typeName"" : ""VARCHAR"",'), (80, '          ""nullable"" : true,'), (81, '          ""precision"" : 2147483647'), (82, '        }'), (83, '      } ],'), (84, '      ""type"" : {'), (85, '        ""typeName"" : ""TIMESTAMP"",'), (86, '        ""nullable"" : true,'), (87, '        ""precision"" : 3'), (88, '      }'), (89, '    }, {'), (90, '      ""kind"" : ""REX_CALL"",'), (91, '      ""operator"" : {'), (92, '        ""name"" : ""PROCTIME"",'), (93, '        ""kind"" : ""OTHER_FUNCTION"",'), (94, '        ""syntax"" : ""FUNCTION""'), (95, '      },'), (96, '      ""operands"" : [ ],'), (97, '      ""type"" : {'), (98, '        ""timestampKind"" : ""PROCTIME"",'), (99, '        ""typeName"" : ""TIMESTAMP_WITH_LOCAL_TIME_ZONE"",'), (100, '        ""nullable"" : false'), (101, '      }'), (102, '    } ],'), (103, '    ""condition"" : null,'), (104, '    ""id"" : 2,'), (105, '    ""inputProperties"" : [ {'), (106, '      ""requiredDistribution"" : {'), (107, '        ""type"" : ""UNKNOWN""'), (108, '      },'), (109, '      ""damBehavior"" : ""PIPELINED"",'), (110, '      ""priority"" : 0'), (111, '    } ],'), (112, '    ""outputType"" : {'), (113, '      ""type"" : ""ROW"",'), (114, '      ""nullable"" : true,'), (115, '      ""fields"" : [ {'), (116, '        ""a"" : ""INT""'), (117, '      }, {'), (118, '        ""b"" : ""BIGINT""'), (119, '      }, {'), (120, '        ""c"" : ""VARCHAR(2147483647)""'), (121, '      }, {'), (122, '        ""rowtime"" : {'), (123, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (124, '          ""nullable"" : true,'), (125, '          ""precision"" : 3,'), (126, '          ""kind"" : ""REGULAR""'), (127, '        }'), (128, '      }, {'), (129, '        ""proctime"" : {'), (130, '          ""type"" : ""TIMESTAMP_WITH_LOCAL_TIME_ZONE"",'), (131, '          ""nullable"" : false,'), (132, '          ""precision"" : 3,'), (133, '          ""kind"" : ""PROCTIME""'), (134, '        }'), (135, '      } ]'), (136, '    },'), (137, '    ""description"" : ""Calc(select=[a, b, c, TO_TIMESTAMP(c) AS rowtime, PROCTIME() AS proctime])""'), (138, '  }, {'), (139, '    ""class"" : ""org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecWatermarkAssigner"",'), (140, '    ""watermarkExpr"" : {'), (141, '      ""kind"" : ""REX_CALL"",'), (142, '      ""operator"" : {'), (143, '        ""name"" : ""-"",'), (144, '        ""kind"" : ""MINUS"",'), (145, '        ""syntax"" : ""SPECIAL""'), (146, '      },'), (147, '      ""operands"" : [ {'), (148, '        ""kind"" : ""INPUT_REF"",'), (149, '        ""inputIndex"" : 3,'), (150, '        ""type"" : {'), (151, '          ""typeName"" : ""TIMESTAMP"",'), (152, '          ""nullable"" : true,'), (153, '          ""precision"" : 3'), (154, '        }'), (155, '      }, {'), (156, '        ""kind"" : ""LITERAL"",'), (157, '        ""value"" : 1000,'), (158, '        ""type"" : {'), (159, '          ""typeName"" : ""INTERVAL_SECOND"",'), (160, '          ""nullable"" : false,'), (161, '          ""precision"" : 2,'), (162, '          ""scale"" : 6'), (163, '        }'), (164, '      } ],'), (165, '      ""type"" : {'), (166, '        ""typeName"" : ""TIMESTAMP"",'), (167, '        ""nullable"" : true,'), (168, '        ""precision"" : 3'), (169, '      }'), (170, '    },'), (171, '    ""rowtimeFieldIndex"" : 3,'), (172, '    ""id"" : 3,'), (173, '    ""inputProperties"" : [ {'), (174, '      ""requiredDistribution"" : {'), (175, '        ""type"" : ""UNKNOWN""'), (176, '      },'), (177, '      ""damBehavior"" : ""PIPELINED"",'), (178, '      ""priority"" : 0'), (179, '    } ],'), (180, '    ""outputType"" : {'), (181, '      ""type"" : ""ROW"",'), (182, '      ""nullable"" : true,'), (183, '      ""fields"" : [ {'), (184, '        ""a"" : ""INT""'), (185, '      }, {'), (186, '        ""b"" : ""BIGINT""'), (187, '      }, {'), (188, '        ""c"" : ""VARCHAR(2147483647)""'), (189, '      }, {'), (190, '        ""rowtime"" : {'), (191, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (192, '          ""nullable"" : true,'), (193, '          ""precision"" : 3,'), (194, '          ""kind"" : ""ROWTIME""'), (195, '        }'), (196, '      }, {'), (197, '        ""proctime"" : {'), (198, '          ""type"" : ""TIMESTAMP_WITH_LOCAL_TIME_ZONE"",'), (199, '          ""nullable"" : false,'), (200, '          ""precision"" : 3,'), (201, '          ""kind"" : ""PROCTIME""'), (202, '        }'), (203, '      } ]'), (204, '    },'), (205, '    ""description"" : ""WatermarkAssigner(rowtime=[rowtime], watermark=[(rowtime - 1000:INTERVAL SECOND)])""'), (206, '  }, {'), (207, '    ""class"" : ""org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecWindowTableFunction"",'), (208, '    ""windowing"" : {'), (209, '      ""strategy"" : ""TimeAttribute"",'), (210, '      ""window"" : {'), (211, '        ""type"" : ""TumblingWindow"",'), (212, '        ""size"" : ""PT15M""'), (213, '      },'), (214, '      ""timeAttributeType"" : {'), (215, '        ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (216, '        ""nullable"" : true,'), (217, '        ""precision"" : 3,'), (218, '        ""kind"" : ""ROWTIME""'), (219, '      },'), (220, '      ""timeAttributeIndex"" : 3,'), (221, '      ""isRowtime"" : true'), (222, '    },'), (223, '    ""emitPerRecord"" : true,'), (224, '    ""id"" : 4,'), (225, '    ""inputProperties"" : [ {'), (226, '      ""requiredDistribution"" : {'), (227, '        ""type"" : ""UNKNOWN""'), (228, '      },'), (229, '      ""damBehavior"" : ""PIPELINED"",'), (230, '      ""priority"" : 0'), (231, '    } ],'), (232, '    ""outputType"" : {'), (233, '      ""type"" : ""ROW"",'), (234, '      ""nullable"" : true,'), (235, '      ""fields"" : [ {'), (236, '        ""a"" : ""INT""'), (237, '      }, {'), (238, '        ""b"" : ""BIGINT""'), (239, '      }, {'), (240, '        ""c"" : ""VARCHAR(2147483647)""'), (241, '      }, {'), (242, '        ""rowtime"" : {'), (243, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (244, '          ""nullable"" : true,'), (245, '          ""precision"" : 3,'), (246, '          ""kind"" : ""ROWTIME""'), (247, '        }'), (248, '      }, {'), (249, '        ""proctime"" : {'), (250, '          ""type"" : ""TIMESTAMP_WITH_LOCAL_TIME_ZONE"",'), (251, '          ""nullable"" : false,'), (252, '          ""precision"" : 3,'), (253, '          ""kind"" : ""PROCTIME""'), (254, '        }'), (255, '      }, {'), (256, '        ""window_start"" : {'), (257, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (258, '          ""nullable"" : false,'), (259, '          ""precision"" : 3,'), (260, '          ""kind"" : ""REGULAR""'), (261, '        }'), (262, '      }, {'), (263, '        ""window_end"" : {'), (264, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (265, '          ""nullable"" : false,'), (266, '          ""precision"" : 3,'), (267, '          ""kind"" : ""REGULAR""'), (268, '        }'), (269, '      }, {'), (270, '        ""window_time"" : {'), (271, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (272, '          ""nullable"" : false,'), (273, '          ""precision"" : 3,'), (274, '          ""kind"" : ""ROWTIME""'), (275, '        }'), (276, '      } ]'), (277, '    },'), (278, '    ""description"" : ""WindowTableFunction(window=[TUMBLE(time_col=[rowtime], size=[15 min])], emitPerRecord=[true])""'), (279, '  }, {'), (280, '    ""class"" : ""org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCalc"",'), (281, '    ""projection"" : [ {'), (282, '      ""kind"" : ""INPUT_REF"",'), (283, '      ""inputIndex"" : 0,'), (284, '      ""type"" : {'), (285, '        ""typeName"" : ""INTEGER"",'), (286, '        ""nullable"" : true'), (287, '      }'), (288, '    }, {'), (289, '      ""kind"" : ""INPUT_REF"",'), (290, '      ""inputIndex"" : 1,'), (291, '      ""type"" : {'), (292, '        ""typeName"" : ""BIGINT"",'), (293, '        ""nullable"" : true'), (294, '      }'), (295, '    }, {'), (296, '      ""kind"" : ""INPUT_REF"",'), (297, '      ""inputIndex"" : 2,'), (298, '      ""type"" : {'), (299, '        ""typeName"" : ""VARCHAR"",'), (300, '        ""nullable"" : true,'), (301, '        ""precision"" : 2147483647'), (302, '      }'), (303, '    }, {'), (304, '      ""kind"" : ""INPUT_REF"",'), (305, '      ""inputIndex"" : 3,'), (306, '      ""type"" : {'), (307, '        ""timestampKind"" : ""ROWTIME"",'), (308, '        ""typeName"" : ""TIMESTAMP"",'), (309, '        ""nullable"" : true'), (310, '      }'), (311, '    }, {'), (312, '      ""kind"" : ""INPUT_REF"",'), (313, '      ""inputIndex"" : 5,'), (314, '      ""type"" : {'), (315, '        ""typeName"" : ""TIMESTAMP"",'), (316, '        ""nullable"" : false,'), (317, '        ""precision"" : 3'), (318, '      }'), (319, '    }, {'), (320, '      ""kind"" : ""INPUT_REF"",'), (321, '      ""inputIndex"" : 6,'), (322, '      ""type"" : {'), (323, '        ""typeName"" : ""TIMESTAMP"",'), (324, '        ""nullable"" : false,'), (325, '        ""precision"" : 3'), (326, '      }'), (327, '    } ],'), (328, '    ""condition"" : null,'), (329, '    ""id"" : 5,'), (330, '    ""inputProperties"" : [ {'), (331, '      ""requiredDistribution"" : {'), (332, '        ""type"" : ""UNKNOWN""'), (333, '      },'), (334, '      ""damBehavior"" : ""PIPELINED"",'), (335, '      ""priority"" : 0'), (336, '    } ],'), (337, '    ""outputType"" : {'), (338, '      ""type"" : ""ROW"",'), (339, '      ""nullable"" : true,'), (340, '      ""fields"" : [ {'), (341, '        ""a"" : ""INT""'), (342, '      }, {'), (343, '        ""b"" : ""BIGINT""'), (344, '      }, {'), (345, '        ""c"" : ""VARCHAR(2147483647)""'), (346, '      }, {'), (347, '        ""rowtime"" : {'), (348, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (349, '          ""nullable"" : true,'), (350, '          ""precision"" : 3,'), (351, '          ""kind"" : ""ROWTIME""'), (352, '        }'), (353, '      }, {'), (354, '        ""window_start"" : {'), (355, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (356, '          ""nullable"" : false,'), (357, '          ""precision"" : 3,'), (358, '          ""kind"" : ""REGULAR""'), (359, '        }'), (360, '      }, {'), (361, '        ""window_end"" : {'), (362, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (363, '          ""nullable"" : false,'), (364, '          ""precision"" : 3,'), (365, '          ""kind"" : ""REGULAR""'), (366, '        }'), (367, '      } ]'), (368, '    },'), (369, '    ""description"" : ""Calc(select=[a, b, c, rowtime, window_start, window_end])""'), (370, '  }, {'), (371, '    ""class"" : ""org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecExchange"",'), (372, '    ""id"" : 6,'), (373, '    ""inputProperties"" : [ {'), (374, '      ""requiredDistribution"" : {'), (375, '        ""type"" : ""HASH"",'), (376, '        ""keys"" : [ 0 ]'), (377, '      },'), (378, '      ""damBehavior"" : ""PIPELINED"",'), (379, '      ""priority"" : 0'), (380, '    } ],'), (381, '    ""outputType"" : {'), (382, '      ""type"" : ""ROW"",'), (383, '      ""nullable"" : true,'), (384, '      ""fields"" : [ {'), (385, '        ""a"" : ""INT""'), (386, '      }, {'), (387, '        ""b"" : ""BIGINT""'), (388, '      }, {'), (389, '        ""c"" : ""VARCHAR(2147483647)""'), (390, '      }, {'), (391, '        ""rowtime"" : {'), (392, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (393, '          ""nullable"" : true,'), (394, '          ""precision"" : 3,'), (395, '          ""kind"" : ""ROWTIME""'), (396, '        }'), (397, '      }, {'), (398, '        ""window_start"" : {'), (399, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (400, '          ""nullable"" : false,'), (401, '          ""precision"" : 3,'), (402, '          ""kind"" : ""REGULAR""'), (403, '        }'), (404, '      }, {'), (405, '        ""window_end"" : {'), (406, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (407, '          ""nullable"" : false,'), (408, '          ""precision"" : 3,'), (409, '          ""kind"" : ""REGULAR""'), (410, '        }'), (411, '      } ]'), (412, '    },'), (413, '    ""description"" : ""Exchange(distribution=[hash[a]])""'), (414, '  }, {'), (415, '    ""class"" : ""org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecWindowDeduplicate"",'), (416, '    ""partitionKeys"" : [ 0 ],'), (417, '    ""orderKey"" : 3,'), (418, '    ""keepLastRow"" : true,'), (419, '    ""windowing"" : {'), (420, '      ""strategy"" : ""WindowAttached"",'), (421, '      ""window"" : {'), (422, '        ""type"" : ""TumblingWindow"",'), (423, '        ""size"" : ""PT15M""'), (424, '      },'), (425, '      ""timeAttributeType"" : {'), (426, '        ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (427, '        ""nullable"" : true,'), (428, '        ""precision"" : 3,'), (429, '        ""kind"" : ""ROWTIME""'), (430, '      },'), (431, '      ""windowStart"" : 4,'), (432, '      ""windowEnd"" : 5,'), (433, '      ""isRowtime"" : true'), (434, '    },'), (435, '    ""id"" : 7,'), (436, '    ""inputProperties"" : [ {'), (437, '      ""requiredDistribution"" : {'), (438, '        ""type"" : ""UNKNOWN""'), (439, '      },'), (440, '      ""damBehavior"" : ""PIPELINED"",'), (441, '      ""priority"" : 0'), (442, '    } ],'), (443, '    ""outputType"" : {'), (444, '      ""type"" : ""ROW"",'), (445, '      ""nullable"" : true,'), (446, '      ""fields"" : [ {'), (447, '        ""a"" : ""INT""'), (448, '      }, {'), (449, '        ""b"" : ""BIGINT""'), (450, '      }, {'), (451, '        ""c"" : ""VARCHAR(2147483647)""'), (452, '      }, {'), (453, '        ""rowtime"" : {'), (454, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (455, '          ""nullable"" : true,'), (456, '          ""precision"" : 3,'), (457, '          ""kind"" : ""ROWTIME""'), (458, '        }'), (459, '      }, {'), (460, '        ""window_start"" : {'), (461, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (462, '          ""nullable"" : false,'), (463, '          ""precision"" : 3,'), (464, '          ""kind"" : ""REGULAR""'), (465, '        }'), (466, '      }, {'), (467, '        ""window_end"" : {'), (468, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (469, '          ""nullable"" : false,'), (470, '          ""precision"" : 3,'), (471, '          ""kind"" : ""REGULAR""'), (472, '        }'), (473, '      } ]'), (474, '    },'), (475, '    ""description"" : ""WindowDeduplicate(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[15 min])], keep=[LastRow], partitionKeys=[a], orderKey=[rowtime], order=[ROWTIME])""'), (476, '  }, {'), (477, '    ""class"" : ""org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCalc"",'), (478, '    ""projection"" : [ {'), (479, '      ""kind"" : ""INPUT_REF"",'), (480, '      ""inputIndex"" : 4,'), (481, '      ""type"" : {'), (482, '        ""typeName"" : ""TIMESTAMP"",'), (483, '        ""nullable"" : false,'), (484, '        ""precision"" : 3'), (485, '      }'), (486, '    }, {'), (487, '      ""kind"" : ""INPUT_REF"",'), (488, '      ""inputIndex"" : 5,'), (489, '      ""type"" : {'), (490, '        ""typeName"" : ""TIMESTAMP"",'), (491, '        ""nullable"" : false,'), (492, '        ""precision"" : 3'), (493, '      }'), (494, '    }, {'), (495, '      ""kind"" : ""INPUT_REF"",'), (496, '      ""inputIndex"" : 0,'), (497, '      ""type"" : {'), (498, '        ""typeName"" : ""INTEGER"",'), (499, '        ""nullable"" : true'), (500, '      }'), (501, '    }, {'), (502, '      ""kind"" : ""INPUT_REF"",'), (503, '      ""inputIndex"" : 1,'), (504, '      ""type"" : {'), (505, '        ""typeName"" : ""BIGINT"",'), (506, '        ""nullable"" : true'), (507, '      }'), (508, '    }, {'), (509, '      ""kind"" : ""INPUT_REF"",'), (510, '      ""inputIndex"" : 2,'), (511, '      ""type"" : {'), (512, '        ""typeName"" : ""VARCHAR"",'), (513, '        ""nullable"" : true,'), (514, '        ""precision"" : 2147483647'), (515, '      }'), (516, '    } ],'), (517, '    ""condition"" : null,'), (518, '    ""id"" : 8,'), (519, '    ""inputProperties"" : [ {'), (520, '      ""requiredDistribution"" : {'), (521, '        ""type"" : ""UNKNOWN""'), (522, '      },'), (523, '      ""damBehavior"" : ""PIPELINED"",'), (524, '      ""priority"" : 0'), (525, '    } ],'), (526, '    ""outputType"" : {'), (527, '      ""type"" : ""ROW"",'), (528, '      ""nullable"" : true,'), (529, '      ""fields"" : [ {'), (530, '        ""window_start"" : {'), (531, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (532, '          ""nullable"" : false,'), (533, '          ""precision"" : 3,'), (534, '          ""kind"" : ""REGULAR""'), (535, '        }'), (536, '      }, {'), (537, '        ""window_end"" : {'), (538, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (539, '          ""nullable"" : false,'), (540, '          ""precision"" : 3,'), (541, '          ""kind"" : ""REGULAR""'), (542, '        }'), (543, '      }, {'), (544, '        ""a"" : ""INT""'), (545, '      }, {'), (546, '        ""b"" : ""BIGINT""'), (547, '      }, {'), (548, '        ""c"" : ""VARCHAR(2147483647)""'), (549, '      } ]'), (550, '    },'), (551, '    ""description"" : ""Calc(select=[window_start, window_end, a, b, c])""'), (552, '  }, {'), (553, '    ""class"" : ""org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecSink"",'), (554, '    ""dynamicTableSink"" : {'), (555, '      ""identifier"" : {'), (556, '        ""catalogName"" : ""default_catalog"",'), (557, '        ""databaseName"" : ""default_database"",'), (558, '        ""tableName"" : ""MySink""'), (559, '      },'), (560, '      ""catalogTable"" : {'), (561, '        ""schema.3.data-type"" : ""BIGINT"",'), (562, '        ""schema.2.data-type"" : ""INT"",'), (563, '        ""schema.3.name"" : ""b"",'), (564, '        ""connector"" : ""values"",'), (565, '        ""schema.0.data-type"" : ""TIMESTAMP(3)"",'), (566, '        ""schema.2.name"" : ""a"",'), (567, '        ""schema.1.name"" : ""window_end"",'), (568, '        ""schema.4.data-type"" : ""VARCHAR(2147483647)"",'), (569, '        ""schema.4.name"" : ""c"",'), (570, '        ""schema.0.name"" : ""window_start"",'), (571, '        ""schema.1.data-type"" : ""TIMESTAMP(3)""'), (572, '      }'), (573, '    },'), (574, '    ""inputChangelogMode"" : [ ""INSERT"" ],'), (575, '    ""id"" : 9,'), (576, '    ""inputProperties"" : [ {'), (577, '      ""requiredDistribution"" : {'), (578, '        ""type"" : ""UNKNOWN""'), (579, '      },'), (580, '      ""damBehavior"" : ""PIPELINED"",'), (581, '      ""priority"" : 0'), (582, '    } ],'), (583, '    ""outputType"" : {'), (584, '      ""type"" : ""ROW"",'), (585, '      ""nullable"" : true,'), (586, '      ""fields"" : [ {'), (587, '        ""window_start"" : {'), (588, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (589, '          ""nullable"" : false,'), (590, '          ""precision"" : 3,'), (591, '          ""kind"" : ""REGULAR""'), (592, '        }'), (593, '      }, {'), (594, '        ""window_end"" : {'), (595, '          ""type"" : ""TIMESTAMP_WITHOUT_TIME_ZONE"",'), (596, '          ""nullable"" : false,'), (597, '          ""precision"" : 3,'), (598, '          ""kind"" : ""REGULAR""'), (599, '        }'), (600, '      }, {'), (601, '        ""a"" : ""INT""'), (602, '      }, {'), (603, '        ""b"" : ""BIGINT""'), (604, '      }, {'), (605, '        ""c"" : ""VARCHAR(2147483647)""'), (606, '      } ]'), (607, '    },'), (608, '    ""description"" : ""Sink(table=[default_catalog.default_database.MySink], fields=[window_start, window_end, a, b, c])""'), (609, '  } ],'), (610, '  ""edges"" : [ {'), (611, '    ""source"" : 1,'), (612, '    ""target"" : 2,'), (613, '    ""shuffle"" : {'), (614, '      ""type"" : ""FORWARD""'), (615, '    },'), (616, '    ""shuffleMode"" : ""PIPELINED""'), (617, '  }, {'), (618, '    ""source"" : 2,'), (619, '    ""target"" : 3,'), (620, '    ""shuffle"" : {'), (621, '      ""type"" : ""FORWARD""'), (622, '    },'), (623, '    ""shuffleMode"" : ""PIPELINED""'), (624, '  }, {'), (625, '    ""source"" : 3,'), (626, '    ""target"" : 4,'), (627, '    ""shuffle"" : {'), (628, '      ""type"" : ""FORWARD""'), (629, '    },'), (630, '    ""shuffleMode"" : ""PIPELINED""'), (631, '  }, {'), (632, '    ""source"" : 4,'), (633, '    ""target"" : 5,'), (634, '    ""shuffle"" : {'), (635, '      ""type"" : ""FORWARD""'), (636, '    },'), (637, '    ""shuffleMode"" : ""PIPELINED""'), (638, '  }, {'), (639, '    ""source"" : 5,'), (640, '    ""target"" : 6,'), (641, '    ""shuffle"" : {'), (642, '      ""type"" : ""FORWARD""'), (643, '    },'), (644, '    ""shuffleMode"" : ""PIPELINED""'), (645, '  }, {'), (646, '    ""source"" : 6,'), (647, '    ""target"" : 7,'), (648, '    ""shuffle"" : {'), (649, '      ""type"" : ""FORWARD""'), (650, '    },'), (651, '    ""shuffleMode"" : ""PIPELINED""'), (652, '  }, {'), (653, '    ""source"" : 7,'), (654, '    ""target"" : 8,'), (655, '    ""shuffle"" : {'), (656, '      ""type"" : ""FORWARD""'), (657, '    },'), (658, '    ""shuffleMode"" : ""PIPELINED""'), (659, '  }, {'), (660, '    ""source"" : 8,'), (661, '    ""target"" : 9,'), (662, '    ""shuffle"" : {'), (663, '      ""type"" : ""FORWARD""'), (664, '    },'), (665, '    ""shuffleMode"" : ""PIPELINED""'), (666, '  } ]'), (667, '}')], 'deleted': []}"
1,9699484b006b7772df077052887acfe19dcc5680,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/stream/sql/WindowDeduplicateTest.xml,WindowDeduplicateTest.xml,1,"{'added': [(1, '<?xml version=""1.0"" ?>'), (2, '<!--'), (3, 'Licensed to the Apache Software Foundation (ASF) under one or more'), (4, 'contributor license agreements.  See the NOTICE file distributed with'), (5, 'this work for additional information regarding copyright ownership.'), (6, 'The ASF licenses this file to you under the Apache License, Version 2.0'), (7, '(the ""License""); you may not use this file except in compliance with'), (8, 'the License.  You may obtain a copy of the License at'), (9, ''), (10, 'http://www.apache.org/licenses/LICENSE-2.0'), (11, ''), (12, 'Unless required by applicable law or agreed to in writing, software'), (13, 'distributed under the License is distributed on an ""AS IS"" BASIS,'), (14, 'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'), (15, 'See the License for the specific language governing permissions and'), (16, 'limitations under the License.'), (17, '-->'), (18, '<Root>'), (19, '  <TestCase name=""testFallbackToWindowTopNForUnmatchedCondition"">'), (20, '    <Resource name=""sql"">'), (21, '      <![CDATA['), (22, 'SELECT *'), (23, 'FROM ('), (24, '  SELECT *,'), (25, '    ROW_NUMBER() OVER(PARTITION BY a, window_start, window_end'), (26, '    ORDER BY rowtime DESC) as rownum'), (27, ""FROM TABLE(TUMBLE(TABLE MyTable, DESCRIPTOR(rowtime), INTERVAL '15' MINUTE))""), (28, ')'), (29, 'WHERE rownum < 3'), (30, '      ]]>'), (31, '    </Resource>'), (32, '    <Resource name=""ast"">'), (33, '      <![CDATA['), (34, 'LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6], window_start=[$7], window_end=[$8], window_time=[$9], rownum=[$10])'), (35, '+- LogicalFilter(condition=[<($10, 3)])'), (36, '   +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6], window_start=[$7], window_end=[$8], window_time=[$9], rownum=[ROW_NUMBER() OVER (PARTITION BY $0, $7, $8 ORDER BY $5 DESC NULLS LAST)])'), (37, '      +- LogicalTableFunctionScan(invocation=[TUMBLE($6, DESCRIPTOR($5), 900000:INTERVAL MINUTE)], rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) c, DECIMAL(10, 3) d, BIGINT e, TIMESTAMP(3) *ROWTIME* rowtime, TIMESTAMP_LTZ(3) *PROCTIME* proctime, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP(3) *ROWTIME* window_time)])'), (38, '         +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6])'), (39, '            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[-($5, 1000:INTERVAL SECOND)])'), (40, '               +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[PROCTIME()])'), (41, '                  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (42, ']]>'), (43, '    </Resource>'), (44, '    <Resource name=""optimized rel plan"">'), (45, '      <![CDATA['), (46, 'Calc(select=[a, b, c, d, e, rowtime, PROCTIME_MATERIALIZE(proctime) AS proctime, window_start, window_end, window_time, w0$o0])'), (47, '+- WindowRank(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[15 min])], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[a], orderBy=[rowtime DESC], select=[a, b, c, d, e, rowtime, proctime, window_start, window_end, window_time, w0$o0])'), (48, '   +- Exchange(distribution=[hash[a]])'), (49, '      +- WindowTableFunction(window=[TUMBLE(time_col=[rowtime], size=[15 min])], emitPerRecord=[true])'), (50, '         +- WatermarkAssigner(rowtime=[rowtime], watermark=[-(rowtime, 1000:INTERVAL SECOND)])'), (51, '            +- Calc(select=[a, b, c, d, e, rowtime, PROCTIME() AS proctime])'), (52, '               +- TableSourceScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, d, e, rowtime])'), (53, ']]>'), (54, '    </Resource>'), (55, '  </TestCase>'), (56, '  <TestCase name=""testFallbackToWindowTopNForUnmatchedOrderKey"">'), (57, '    <Resource name=""sql"">'), (58, '      <![CDATA['), (59, 'SELECT *'), (60, 'FROM ('), (61, '  SELECT *,'), (62, '    ROW_NUMBER() OVER(PARTITION BY a, window_start, window_end'), (63, '    ORDER BY b DESC) as rownum'), (64, ""FROM TABLE(TUMBLE(TABLE MyTable, DESCRIPTOR(rowtime), INTERVAL '15' MINUTE))""), (65, ')'), (66, 'WHERE rownum <= 1'), (67, '      ]]>'), (68, '    </Resource>'), (69, '    <Resource name=""ast"">'), (70, '      <![CDATA['), (71, 'LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6], window_start=[$7], window_end=[$8], window_time=[$9], rownum=[$10])'), (72, '+- LogicalFilter(condition=[<=($10, 1)])'), (73, '   +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6], window_start=[$7], window_end=[$8], window_time=[$9], rownum=[ROW_NUMBER() OVER (PARTITION BY $0, $7, $8 ORDER BY $1 DESC NULLS LAST)])'), (74, '      +- LogicalTableFunctionScan(invocation=[TUMBLE($6, DESCRIPTOR($5), 900000:INTERVAL MINUTE)], rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) c, DECIMAL(10, 3) d, BIGINT e, TIMESTAMP(3) *ROWTIME* rowtime, TIMESTAMP_LTZ(3) *PROCTIME* proctime, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP(3) *ROWTIME* window_time)])'), (75, '         +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6])'), (76, '            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[-($5, 1000:INTERVAL SECOND)])'), (77, '               +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[PROCTIME()])'), (78, '                  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (79, ']]>'), (80, '    </Resource>'), (81, '    <Resource name=""optimized rel plan"">'), (82, '      <![CDATA['), (83, 'Calc(select=[a, b, c, d, e, rowtime, PROCTIME_MATERIALIZE(proctime) AS proctime, window_start, window_end, window_time, 1:BIGINT AS w0$o0])'), (84, '+- WindowRank(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[15 min])], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[b DESC], select=[a, b, c, d, e, rowtime, proctime, window_start, window_end, window_time])'), (85, '   +- Exchange(distribution=[hash[a]])'), (86, '      +- WindowTableFunction(window=[TUMBLE(time_col=[rowtime], size=[15 min])], emitPerRecord=[true])'), (87, '         +- WatermarkAssigner(rowtime=[rowtime], watermark=[-(rowtime, 1000:INTERVAL SECOND)])'), (88, '            +- Calc(select=[a, b, c, d, e, rowtime, PROCTIME() AS proctime])'), (89, '               +- TableSourceScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, d, e, rowtime])'), (90, ']]>'), (91, '    </Resource>'), (92, '  </TestCase>'), (93, '  <TestCase name=""testTimeAttributePropagateForWindowDeduplicate"">'), (94, '    <Resource name=""sql"">'), (95, '      <![CDATA['), (96, 'SELECT'), (97, '   window_start,'), (98, '   window_end,'), (99, '   count(*),'), (100, '   sum(d),'), (101, '   max(d) filter (where b > 1000),'), (102, '   weightedAvg(b, e) AS wAvg,'), (103, '   count(distinct c) AS uv'), (104, ""FROM TABLE(TUMBLE(TABLE tmp, DESCRIPTOR(rowtime), INTERVAL '15' MINUTE))""), (105, 'GROUP BY window_start, window_end'), (106, '      ]]>'), (107, '    </Resource>'), (108, '    <Resource name=""ast"">'), (109, '      <![CDATA['), (110, 'LogicalAggregate(group=[{0, 1}], EXPR$2=[COUNT()], EXPR$3=[SUM($2)], EXPR$4=[MAX($2) FILTER $3], wAvg=[weightedAvg($4, $5)], uv=[COUNT(DISTINCT $6)])'), (111, '+- LogicalProject(window_start=[$6], window_end=[$7], d=[$4], $f3=[IS TRUE(>($2, 1000))], b=[$2], e=[$5], c=[$3])'), (112, '   +- LogicalTableFunctionScan(invocation=[TUMBLE($5, DESCRIPTOR($0), 900000:INTERVAL MINUTE)], rowType=[RecordType(TIMESTAMP(3) *ROWTIME* rowtime, INTEGER a, BIGINT b, VARCHAR(2147483647) c, DECIMAL(10, 3) d, BIGINT e, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP(3) *ROWTIME* window_time)])'), (113, '      +- LogicalProject(rowtime=[$9], a=[$0], b=[$1], c=[$2], d=[$3], e=[$4])'), (114, '         +- LogicalFilter(condition=[<=($10, 1)])'), (115, '            +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6], window_start=[$7], window_end=[$8], window_time=[$9], rownum=[ROW_NUMBER() OVER (PARTITION BY $0, $7, $8 ORDER BY $5 DESC NULLS LAST)])'), (116, '               +- LogicalTableFunctionScan(invocation=[TUMBLE($6, DESCRIPTOR($5), 900000:INTERVAL MINUTE)], rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) c, DECIMAL(10, 3) d, BIGINT e, TIMESTAMP(3) *ROWTIME* rowtime, TIMESTAMP_LTZ(3) *PROCTIME* proctime, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP(3) *ROWTIME* window_time)])'), (117, '                  +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6])'), (118, '                     +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[-($5, 1000:INTERVAL SECOND)])'), (119, '                        +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[PROCTIME()])'), (120, '                           +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (121, ']]>'), (122, '    </Resource>'), (123, '    <Resource name=""optimized rel plan"">'), (124, '      <![CDATA['), (125, 'Calc(select=[window_start, window_end, EXPR$2, EXPR$3, EXPR$4, wAvg, uv])'), (126, ""+- GlobalWindowAggregate(window=[TUMBLE(slice_end=[$slice_end], size=[15 min])], select=[COUNT(count1$0) AS EXPR$2, SUM(sum$1) AS EXPR$3, MAX(max$2) AS EXPR$4, weightedAvg(weightedavg$3) AS wAvg, COUNT(distinct$0 count$4) AS uv, start('w$) AS window_start, end('w$) AS window_end])""), (127, '   +- Exchange(distribution=[single])'), (128, ""      +- LocalWindowAggregate(window=[TUMBLE(time_col=[rowtime], size=[15 min])], select=[COUNT(*) AS count1$0, SUM(d) AS sum$1, MAX(d) FILTER $f3 AS max$2, weightedAvg(b, e) AS weightedavg$3, COUNT(distinct$0 c) AS count$4, DISTINCT(c) AS distinct$0, slice_end('w$) AS $slice_end])""), (129, '         +- Calc(select=[d, IS TRUE(>(b, 1000)) AS $f3, b, e, c, window_time AS rowtime])'), (130, '            +- WindowDeduplicate(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[15 min])], keep=[LastRow], partitionKeys=[a], orderKey=[rowtime], order=[ROWTIME])'), (131, '               +- Exchange(distribution=[hash[a]])'), (132, '                  +- Calc(select=[a, b, c, d, e, rowtime, window_start, window_end, window_time])'), (133, '                     +- WindowTableFunction(window=[TUMBLE(time_col=[rowtime], size=[15 min])], emitPerRecord=[true])'), (134, '                        +- WatermarkAssigner(rowtime=[rowtime], watermark=[-(rowtime, 1000:INTERVAL SECOND)])'), (135, '                           +- Calc(select=[a, b, c, d, e, rowtime, PROCTIME() AS proctime])'), (136, '                              +- TableSourceScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, d, e, rowtime])'), (137, ']]>'), (138, '    </Resource>'), (139, '  </TestCase>'), (140, '  <TestCase name=""testOnWindowTVF"">'), (141, '    <Resource name=""sql"">'), (142, '      <![CDATA['), (143, 'SELECT *'), (144, 'FROM ('), (145, 'SELECT *,'), (146, '   ROW_NUMBER() OVER(PARTITION BY a, window_start, window_end'), (147, '   ORDER BY rowtime DESC) as rownum'), (148, ""FROM TABLE(TUMBLE(TABLE MyTable, DESCRIPTOR(rowtime), INTERVAL '15' MINUTE))""), (149, ')'), (150, 'WHERE rownum <= 1'), (151, '      ]]>'), (152, '    </Resource>'), (153, '    <Resource name=""ast"">'), (154, '      <![CDATA['), (155, 'LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6], window_start=[$7], window_end=[$8], window_time=[$9], rownum=[$10])'), (156, '+- LogicalFilter(condition=[<=($10, 1)])'), (157, '   +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6], window_start=[$7], window_end=[$8], window_time=[$9], rownum=[ROW_NUMBER() OVER (PARTITION BY $0, $7, $8 ORDER BY $5 DESC NULLS LAST)])'), (158, '      +- LogicalTableFunctionScan(invocation=[TUMBLE($6, DESCRIPTOR($5), 900000:INTERVAL MINUTE)], rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) c, DECIMAL(10, 3) d, BIGINT e, TIMESTAMP(3) *ROWTIME* rowtime, TIMESTAMP_LTZ(3) *PROCTIME* proctime, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP(3) *ROWTIME* window_time)])'), (159, '         +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6])'), (160, '            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[-($5, 1000:INTERVAL SECOND)])'), (161, '               +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[PROCTIME()])'), (162, '                  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (163, ']]>'), (164, '    </Resource>'), (165, '    <Resource name=""optimized rel plan"">'), (166, '      <![CDATA['), (167, 'Calc(select=[a, b, c, d, e, rowtime, PROCTIME_MATERIALIZE(proctime) AS proctime, window_start, window_end, window_time, 1:BIGINT AS w0$o0])'), (168, '+- WindowDeduplicate(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[15 min])], keep=[LastRow], partitionKeys=[a], orderKey=[rowtime], order=[ROWTIME])'), (169, '   +- Exchange(distribution=[hash[a]])'), (170, '      +- WindowTableFunction(window=[TUMBLE(time_col=[rowtime], size=[15 min])], emitPerRecord=[true])'), (171, '         +- WatermarkAssigner(rowtime=[rowtime], watermark=[-(rowtime, 1000:INTERVAL SECOND)])'), (172, '            +- Calc(select=[a, b, c, d, e, rowtime, PROCTIME() AS proctime])'), (173, '               +- TableSourceScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, d, e, rowtime])'), (174, ']]>'), (175, '    </Resource>'), (176, '  </TestCase>'), (177, '  <TestCase name=""testOnWindowTVFWithCalc"">'), (178, '    <Resource name=""sql"">'), (179, '      <![CDATA['), (180, 'SELECT window_start, window_end, window_time, a, b, c, d, e'), (181, 'FROM ('), (182, 'SELECT *,'), (183, '   ROW_NUMBER() OVER(PARTITION BY a, window_start, window_end'), (184, '   ORDER BY rowtime DESC) as rownum'), (185, ""FROM TABLE(TUMBLE(TABLE MyTable, DESCRIPTOR(rowtime), INTERVAL '15' MINUTE))""), (186, ')'), (187, 'WHERE rownum <= 1'), (188, '      ]]>'), (189, '    </Resource>'), (190, '    <Resource name=""ast"">'), (191, '      <![CDATA['), (192, 'LogicalProject(window_start=[$7], window_end=[$8], window_time=[$9], a=[$0], b=[$1], c=[$2], d=[$3], e=[$4])'), (193, '+- LogicalFilter(condition=[<=($10, 1)])'), (194, '   +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6], window_start=[$7], window_end=[$8], window_time=[$9], rownum=[ROW_NUMBER() OVER (PARTITION BY $0, $7, $8 ORDER BY $5 DESC NULLS LAST)])'), (195, '      +- LogicalTableFunctionScan(invocation=[TUMBLE($6, DESCRIPTOR($5), 900000:INTERVAL MINUTE)], rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) c, DECIMAL(10, 3) d, BIGINT e, TIMESTAMP(3) *ROWTIME* rowtime, TIMESTAMP_LTZ(3) *PROCTIME* proctime, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP(3) *ROWTIME* window_time)])'), (196, '         +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6])'), (197, '            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[-($5, 1000:INTERVAL SECOND)])'), (198, '               +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[PROCTIME()])'), (199, '                  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (200, ']]>'), (201, '    </Resource>'), (202, '    <Resource name=""optimized rel plan"">'), (203, '      <![CDATA['), (204, 'Calc(select=[window_start, window_end, window_time, a, b, c, d, e])'), (205, '+- WindowDeduplicate(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[15 min])], keep=[LastRow], partitionKeys=[a], orderKey=[rowtime], order=[ROWTIME])'), (206, '   +- Exchange(distribution=[hash[a]])'), (207, '      +- Calc(select=[a, b, c, d, e, rowtime, window_start, window_end, window_time])'), (208, '         +- WindowTableFunction(window=[TUMBLE(time_col=[rowtime], size=[15 min])], emitPerRecord=[true])'), (209, '            +- WatermarkAssigner(rowtime=[rowtime], watermark=[-(rowtime, 1000:INTERVAL SECOND)])'), (210, '               +- Calc(select=[a, b, c, d, e, rowtime, PROCTIME() AS proctime])'), (211, '                  +- TableSourceScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, d, e, rowtime])'), (212, ']]>'), (213, '    </Resource>'), (214, '  </TestCase>'), (215, '  <TestCase name=""testOnWindowTVFWithValidCondition"">'), (216, '    <Resource name=""sql"">'), (217, '      <![CDATA['), (218, 'SELECT *'), (219, 'FROM ('), (220, '  SELECT *,'), (221, '    ROW_NUMBER() OVER(PARTITION BY a, window_start, window_end'), (222, '    ORDER BY rowtime DESC) as rownum'), (223, ""FROM TABLE(TUMBLE(TABLE MyTable, DESCRIPTOR(rowtime), INTERVAL '15' MINUTE))""), (224, ')'), (225, 'WHERE rownum < 2'), (226, '      ]]>'), (227, '    </Resource>'), (228, '    <Resource name=""ast"">'), (229, '      <![CDATA['), (230, 'LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6], window_start=[$7], window_end=[$8], window_time=[$9], rownum=[$10])'), (231, '+- LogicalFilter(condition=[<($10, 2)])'), (232, '   +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6], window_start=[$7], window_end=[$8], window_time=[$9], rownum=[ROW_NUMBER() OVER (PARTITION BY $0, $7, $8 ORDER BY $5 DESC NULLS LAST)])'), (233, '      +- LogicalTableFunctionScan(invocation=[TUMBLE($6, DESCRIPTOR($5), 900000:INTERVAL MINUTE)], rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) c, DECIMAL(10, 3) d, BIGINT e, TIMESTAMP(3) *ROWTIME* rowtime, TIMESTAMP_LTZ(3) *PROCTIME* proctime, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP(3) *ROWTIME* window_time)])'), (234, '         +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6])'), (235, '            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[-($5, 1000:INTERVAL SECOND)])'), (236, '               +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[PROCTIME()])'), (237, '                  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (238, ']]>'), (239, '    </Resource>'), (240, '    <Resource name=""optimized rel plan"">'), (241, '      <![CDATA['), (242, 'Calc(select=[a, b, c, d, e, rowtime, PROCTIME_MATERIALIZE(proctime) AS proctime, window_start, window_end, window_time, 1:BIGINT AS w0$o0])'), (243, '+- WindowDeduplicate(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[15 min])], keep=[LastRow], partitionKeys=[a], orderKey=[rowtime], order=[ROWTIME])'), (244, '   +- Exchange(distribution=[hash[a]])'), (245, '      +- WindowTableFunction(window=[TUMBLE(time_col=[rowtime], size=[15 min])], emitPerRecord=[true])'), (246, '         +- WatermarkAssigner(rowtime=[rowtime], watermark=[-(rowtime, 1000:INTERVAL SECOND)])'), (247, '            +- Calc(select=[a, b, c, d, e, rowtime, PROCTIME() AS proctime])'), (248, '               +- TableSourceScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, d, e, rowtime])'), (249, ']]>'), (250, '    </Resource>'), (251, '  </TestCase>'), (252, '  <TestCase name=""testOnWindowTVFKeepFirstRow"">'), (253, '    <Resource name=""sql"">'), (254, '      <![CDATA['), (255, 'SELECT *'), (256, 'FROM ('), (257, 'SELECT *,'), (258, '   ROW_NUMBER() OVER(PARTITION BY a, window_start, window_end'), (259, '   ORDER BY rowtime ASC) as rownum'), (260, ""FROM TABLE(TUMBLE(TABLE MyTable, DESCRIPTOR(rowtime), INTERVAL '15' MINUTE))""), (261, ')'), (262, 'WHERE rownum <= 1'), (263, '      ]]>'), (264, '    </Resource>'), (265, '    <Resource name=""ast"">'), (266, '      <![CDATA['), (267, 'LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6], window_start=[$7], window_end=[$8], window_time=[$9], rownum=[$10])'), (268, '+- LogicalFilter(condition=[<=($10, 1)])'), (269, '   +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6], window_start=[$7], window_end=[$8], window_time=[$9], rownum=[ROW_NUMBER() OVER (PARTITION BY $0, $7, $8 ORDER BY $5 NULLS FIRST)])'), (270, '      +- LogicalTableFunctionScan(invocation=[TUMBLE($6, DESCRIPTOR($5), 900000:INTERVAL MINUTE)], rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) c, DECIMAL(10, 3) d, BIGINT e, TIMESTAMP(3) *ROWTIME* rowtime, TIMESTAMP_LTZ(3) *PROCTIME* proctime, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP(3) *ROWTIME* window_time)])'), (271, '         +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[$6])'), (272, '            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[-($5, 1000:INTERVAL SECOND)])'), (273, '               +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], rowtime=[$5], proctime=[PROCTIME()])'), (274, '                  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (275, ']]>'), (276, '    </Resource>'), (277, '    <Resource name=""optimized rel plan"">'), (278, '      <![CDATA['), (279, 'Calc(select=[a, b, c, d, e, rowtime, PROCTIME_MATERIALIZE(proctime) AS proctime, window_start, window_end, window_time, 1:BIGINT AS w0$o0])'), (280, '+- WindowDeduplicate(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[15 min])], keep=[FirstRow], partitionKeys=[a], orderKey=[rowtime], order=[ROWTIME])'), (281, '   +- Exchange(distribution=[hash[a]])'), (282, '      +- WindowTableFunction(window=[TUMBLE(time_col=[rowtime], size=[15 min])], emitPerRecord=[true])'), (283, '         +- WatermarkAssigner(rowtime=[rowtime], watermark=[-(rowtime, 1000:INTERVAL SECOND)])'), (284, '            +- Calc(select=[a, b, c, d, e, rowtime, PROCTIME() AS proctime])'), (285, '               +- TableSourceScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, d, e, rowtime])'), (286, ']]>'), (287, '    </Resource>'), (288, '  </TestCase>'), (289, '</Root>')], 'deleted': []}"
2,b367407d08b6dd69a52886a1c6232a9d8ee2ec0a,flink-connectors/flink-sql-connector-kafka/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(9, '- org.apache.kafka:kafka-clients:2.8.1')], 'deleted': [(9, '- org.apache.kafka:kafka-clients:2.4.1')]}"
3,b367407d08b6dd69a52886a1c6232a9d8ee2ec0a,flink-examples/flink-examples-build-helper/flink-examples-streaming-state-machine/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(9, '- org.apache.kafka:kafka-clients:2.8.1')], 'deleted': [(9, '- org.apache.kafka:kafka-clients:2.4.1')]}"
4,1a4393412d35585a7aee21dd1e7c2e1283a361f3,flink-connectors/flink-connector-base/src/main/resources/log4j2.properties,log4j2.properties,5,"{'added': [(19, 'rootLogger.level = OFF')], 'deleted': [(19, 'rootLogger.level = INFO')]}"
5,d6bf1df41dab5ed1f49a51701f561916c1a6d643,flink-connectors/flink-sql-connector-rabbitmq/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(9, '- com.rabbitmq:amqp-client:5.13.1')], 'deleted': [(9, '- com.rabbitmq:amqp-client:5.9.0')]}"
6,1ea210278f1da41f193a7520306cab20596fd10f,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/filesystem/FileSystemTableSourceTest.xml,FileSystemTableSourceTest.xml,5,"{'added': [(36, ']]>'), (37, '    </Resource>'), (38, '  </TestCase>'), (39, '  <TestCase name=""testMetadataReading"">'), (40, '    <Resource name=""sql"">'), (41, '      <![CDATA[insert into MySink(a, b, c) select a, b, filemeta from MyTableWithMeta]]>'), (42, '    </Resource>'), (43, '    <Resource name=""ast"">'), (44, '      <![CDATA['), (45, 'LogicalSink(table=[default_catalog.default_database.MySink], fields=[a, b, filemeta])'), (46, '+- LogicalProject(a=[$0], b=[$1], filemeta=[CAST($3):VARCHAR(2147483647) CHARACTER SET ""UTF-16LE""])'), (47, '   +- LogicalTableScan(table=[[default_catalog, default_database, MyTableWithMeta]])'), (48, ']]>'), (49, '    </Resource>'), (50, '    <Resource name=""optimized rel plan"">'), (51, '      <![CDATA['), (52, 'Sink(table=[default_catalog.default_database.MySink], fields=[a, b, filemeta])'), (53, '+- Calc(select=[a, b, CAST(filepath) AS filemeta])'), (54, '   +- TableSourceScan(table=[[default_catalog, default_database, MyTableWithMeta, project=[a, b], metadata=[filepath]]], fields=[a, b, filepath])')], 'deleted': []}"
7,e8f77132d7891c47cec07e0412ca3119e8a94b67,flink-table/flink-table-planner/src/test/resources/log4j2-test.properties,log4j2-test.properties,5,"{'added': [(29, ''), (30, '# Uncomment to enable codegen logging'), (31, '#loggers = testlogger'), (32, '#logger.testlogger.name =org.apache.flink.table.planner.codegen'), (33, '#logger.testlogger.level = TRACE'), (34, '#logger.testlogger.appenderRefs = TestLogger')], 'deleted': []}"
8,8829e23279dd17965f2f86aa79dbf8814900de94,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/batch/sql/PartitionableSourceTest.xml,PartitionableSourceTest.xml,5,"{'added': [(21, ""      <![CDATA[SELECT * FROM PartitionableTable WHERE (id > 2 OR part1 = 'A') AND part2 > 1]]>""), (28, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (34, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=2}, {part1=B, part2=3}], filter=[]]], fields=[id, name, part1, part2])'), (40, ""      <![CDATA[SELECT * FROM PartitionableTable WHERE (id > 2 OR part1 = 'A') AND part2 > 1]]>""), (47, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (53, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=2}, {part1=B, part2=3}], filter=[]]], fields=[id, name, part1, part2])'), (59, ""      <![CDATA[SELECT * FROM PartitionableTable WHERE (id > 2 OR part1 = 'A') AND part2 > 1]]>""), (66, '      +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableTable]])'), (72, '+- TableSourceScan(table=[[default_catalog, default_database, PartitionableTable, partitions=[{part1=A, part2=2}, {part1=B, part2=3}], filter=[]]], fields=[id, name, part1, part2])'), (73, ']]>'), (74, '    </Resource>'), (75, '  </TestCase>'), (76, '  <TestCase name=""testPushDownPartitionAndFiltersContainPartitionKeys[sourceFetchPartitions=false, useCatalogFilter=false]"">'), (77, '    <Resource name=""sql"">'), (78, ""      <![CDATA[select * from PartitionableAndFilterableTable where part1 = 'A' and part2 > 1 and id > 1]]>""), (79, '    </Resource>'), (80, '    <Resource name=""ast"">'), (81, '      <![CDATA['), (82, 'LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[$4])'), (83, ""+- LogicalFilter(condition=[AND(=($2, _UTF-16LE'A'), >($3, 1), >($0, 1))])""), (84, '   +- LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[+($3, 1)])'), (85, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable]])'), (86, ']]>'), (87, '    </Resource>'), (88, '    <Resource name=""optimized exec plan"">'), (89, '      <![CDATA['), (90, 'Calc(select=[id, name, CAST(_UTF-16LE\'A\':VARCHAR(2147483647) CHARACTER SET ""UTF-16LE"") AS part1, part2, (part2 + 1) AS virtualField])'), (91, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable, partitions=[{part1=A, part2=2}], filter=[>(id, 1)], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (92, ']]>'), (93, '    </Resource>'), (94, '  </TestCase>'), (95, '  <TestCase name=""testPushDownPartitionAndFiltersContainPartitionKeys[sourceFetchPartitions=false, useCatalogFilter=true]"">'), (96, '    <Resource name=""sql"">'), (97, ""      <![CDATA[select * from PartitionableAndFilterableTable where part1 = 'A' and part2 > 1 and id > 1]]>""), (98, '    </Resource>'), (99, '    <Resource name=""ast"">'), (100, '      <![CDATA['), (101, 'LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[$4])'), (102, ""+- LogicalFilter(condition=[AND(=($2, _UTF-16LE'A'), >($3, 1), >($0, 1))])""), (103, '   +- LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[+($3, 1)])'), (104, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable]])'), (105, ']]>'), (106, '    </Resource>'), (107, '    <Resource name=""optimized exec plan"">'), (108, '      <![CDATA['), (109, 'Calc(select=[id, name, CAST(_UTF-16LE\'A\':VARCHAR(2147483647) CHARACTER SET ""UTF-16LE"") AS part1, part2, (part2 + 1) AS virtualField])'), (110, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable, partitions=[{part1=A, part2=2}], filter=[>(id, 1)], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (111, ']]>'), (112, '    </Resource>'), (113, '  </TestCase>'), (114, '  <TestCase name=""testPushDownPartitionAndFiltersContainPartitionKeys[sourceFetchPartitions=true, useCatalogFilter=false]"">'), (115, '    <Resource name=""sql"">'), (116, ""      <![CDATA[select * from PartitionableAndFilterableTable where part1 = 'A' and part2 > 1 and id > 1]]>""), (117, '    </Resource>'), (118, '    <Resource name=""ast"">'), (119, '      <![CDATA['), (120, 'LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[$4])'), (121, ""+- LogicalFilter(condition=[AND(=($2, _UTF-16LE'A'), >($3, 1), >($0, 1))])""), (122, '   +- LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[+($3, 1)])'), (123, '      +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableAndFilterableTable]])'), (124, ']]>'), (125, '    </Resource>'), (126, '    <Resource name=""optimized exec plan"">'), (127, '      <![CDATA['), (128, 'Calc(select=[id, name, CAST(_UTF-16LE\'A\':VARCHAR(2147483647) CHARACTER SET ""UTF-16LE"") AS part1, part2, (part2 + 1) AS virtualField])'), (129, '+- TableSourceScan(table=[[default_catalog, default_database, PartitionableAndFilterableTable, partitions=[{part1=A, part2=2}], filter=[>(id, 1)], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (130, ']]>'), (131, '    </Resource>'), (132, '  </TestCase>'), (133, '  <TestCase name=""testPushDownPartitionAndFiltersContainPartitionKeysWithSingleProjection[sourceFetchPartitions=false, useCatalogFilter=false]"">'), (134, '    <Resource name=""sql"">'), (135, ""      <![CDATA[select name from PartitionableAndFilterableTable where part1 = 'A' and part2 > 1 and id > 1]]>""), (136, '    </Resource>'), (137, '    <Resource name=""ast"">'), (138, '      <![CDATA['), (139, 'LogicalProject(name=[$1])'), (140, ""+- LogicalFilter(condition=[AND(=($2, _UTF-16LE'A'), >($3, 1), >($0, 1))])""), (141, '   +- LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[+($3, 1)])'), (142, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable]])'), (143, ']]>'), (144, '    </Resource>'), (145, '    <Resource name=""optimized exec plan"">'), (146, '      <![CDATA['), (147, 'TableSourceScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable, partitions=[{part1=A, part2=2}], filter=[>(id, 1)], project=[name], metadata=[]]], fields=[name])'), (148, ']]>'), (149, '    </Resource>'), (150, '  </TestCase>'), (151, '  <TestCase name=""testPushDownPartitionAndFiltersContainPartitionKeysWithSingleProjection[sourceFetchPartitions=false, useCatalogFilter=true]"">'), (152, '    <Resource name=""sql"">'), (153, ""      <![CDATA[select name from PartitionableAndFilterableTable where part1 = 'A' and part2 > 1 and id > 1]]>""), (154, '    </Resource>'), (155, '    <Resource name=""ast"">'), (156, '      <![CDATA['), (157, 'LogicalProject(name=[$1])'), (158, ""+- LogicalFilter(condition=[AND(=($2, _UTF-16LE'A'), >($3, 1), >($0, 1))])""), (159, '   +- LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[+($3, 1)])'), (160, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable]])'), (161, ']]>'), (162, '    </Resource>'), (163, '    <Resource name=""optimized exec plan"">'), (164, '      <![CDATA['), (165, 'TableSourceScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable, partitions=[{part1=A, part2=2}], filter=[>(id, 1)], project=[name], metadata=[]]], fields=[name])'), (166, ']]>'), (167, '    </Resource>'), (168, '  </TestCase>'), (169, '  <TestCase name=""testPushDownPartitionAndFiltersContainPartitionKeysWithSingleProjection[sourceFetchPartitions=true, useCatalogFilter=false]"">'), (170, '    <Resource name=""sql"">'), (171, ""      <![CDATA[select name from PartitionableAndFilterableTable where part1 = 'A' and part2 > 1 and id > 1]]>""), (172, '    </Resource>'), (173, '    <Resource name=""ast"">'), (174, '      <![CDATA['), (175, 'LogicalProject(name=[$1])'), (176, ""+- LogicalFilter(condition=[AND(=($2, _UTF-16LE'A'), >($3, 1), >($0, 1))])""), (177, '   +- LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[+($3, 1)])'), (178, '      +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableAndFilterableTable]])'), (179, ']]>'), (180, '    </Resource>'), (181, '    <Resource name=""optimized exec plan"">'), (182, '      <![CDATA['), (183, 'TableSourceScan(table=[[default_catalog, default_database, PartitionableAndFilterableTable, partitions=[{part1=A, part2=2}], filter=[>(id, 1)], project=[name], metadata=[]]], fields=[name])'), (189, ""      <![CDATA[SELECT * FROM PartitionableTable WHERE part1 = 'A']]>""), (196, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (202, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=1}, {part1=A, part2=2}], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (208, ""      <![CDATA[SELECT * FROM PartitionableTable WHERE part1 = 'A']]>""), (215, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (221, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=1}, {part1=A, part2=2}], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (227, ""      <![CDATA[SELECT * FROM PartitionableTable WHERE part1 = 'A']]>""), (234, '      +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableTable]])'), (240, '+- TableSourceScan(table=[[default_catalog, default_database, PartitionableTable, partitions=[{part1=A, part2=1}, {part1=A, part2=2}], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (246, ""      <![CDATA[select * from PartitionableTable where trim(part1) = 'A' and part2 > 1]]>""), (253, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (259, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=2}]]], fields=[id, name, part1, part2])'), (265, ""      <![CDATA[select * from PartitionableTable where trim(part1) = 'A' and part2 > 1]]>""), (272, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (278, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=2}]]], fields=[id, name, part1, part2])'), (284, '      <![CDATA[SELECT * FROM PartitionableTable WHERE id > 2 AND MyUdf(part2) < 3]]>'), (291, '      +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableTable]])'), (297, '+- TableSourceScan(table=[[default_catalog, default_database, PartitionableTable, partitions=[{part1=A, part2=1}, {part1=C, part2=1}], filter=[]]], fields=[id, name, part1, part2])'), (303, ""      <![CDATA[select * from PartitionableTable where trim(part1) = 'A' and part2 > 1]]>""), (310, '      +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableTable]])'), (316, '+- TableSourceScan(table=[[default_catalog, default_database, PartitionableTable, partitions=[{part1=A, part2=2}]]], fields=[id, name, part1, part2])'), (322, '      <![CDATA[SELECT * FROM PartitionableTable WHERE id > 2 AND MyUdf(part2) < 3]]>'), (329, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (335, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=1}, {part1=C, part2=1}], filter=[]]], fields=[id, name, part1, part2])'), (341, '      <![CDATA[SELECT * FROM PartitionableTable WHERE id > 2 AND MyUdf(part2) < 3]]>'), (348, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (354, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=1}, {part1=C, part2=1}], filter=[]]], fields=[id, name, part1, part2])')], 'deleted': [(21, ""      <![CDATA[SELECT * FROM MyTable WHERE (id > 2 OR part1 = 'A') AND part2 > 1]]>""), (28, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (34, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=2}, {part1=B, part2=3}]]], fields=[id, name, part1, part2])'), (40, ""      <![CDATA[SELECT * FROM MyTable WHERE (id > 2 OR part1 = 'A') AND part2 > 1]]>""), (47, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (53, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=2}, {part1=B, part2=3}]]], fields=[id, name, part1, part2])'), (59, ""      <![CDATA[SELECT * FROM MyTable WHERE (id > 2 OR part1 = 'A') AND part2 > 1]]>""), (66, '      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (72, '+- TableSourceScan(table=[[default_catalog, default_database, MyTable, filter=[], partitions=[{part1=A, part2=2}, {part1=B, part2=3}]]], fields=[id, name, part1, part2])'), (78, ""      <![CDATA[SELECT * FROM MyTable WHERE part1 = 'A']]>""), (85, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (91, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=1}, {part1=A, part2=2}], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (97, ""      <![CDATA[SELECT * FROM MyTable WHERE part1 = 'A']]>""), (104, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (110, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=1}, {part1=A, part2=2}], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (116, ""      <![CDATA[SELECT * FROM MyTable WHERE part1 = 'A']]>""), (123, '      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (129, '+- TableSourceScan(table=[[default_catalog, default_database, MyTable, filter=[], partitions=[{part1=A, part2=1}, {part1=A, part2=2}], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (135, ""      <![CDATA[select * from MyTable where trim(part1) = 'A' and part2 > 1]]>""), (142, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (148, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=2}]]], fields=[id, name, part1, part2])'), (154, ""      <![CDATA[select * from MyTable where trim(part1) = 'A' and part2 > 1]]>""), (161, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (167, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=2}]]], fields=[id, name, part1, part2])'), (173, '      <![CDATA[SELECT * FROM MyTable WHERE id > 2 AND MyUdf(part2) < 3]]>'), (180, '      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (186, '+- TableSourceScan(table=[[default_catalog, default_database, MyTable, filter=[], partitions=[{part1=A, part2=1}, {part1=C, part2=1}]]], fields=[id, name, part1, part2])'), (192, ""      <![CDATA[select * from MyTable where trim(part1) = 'A' and part2 > 1]]>""), (199, '      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (205, '+- TableSourceScan(table=[[default_catalog, default_database, MyTable, filter=[], partitions=[{part1=A, part2=2}]]], fields=[id, name, part1, part2])'), (211, '      <![CDATA[SELECT * FROM MyTable WHERE id > 2 AND MyUdf(part2) < 3]]>'), (218, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (224, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=1}, {part1=C, part2=1}]]], fields=[id, name, part1, part2])'), (230, '      <![CDATA[SELECT * FROM MyTable WHERE id > 2 AND MyUdf(part2) < 3]]>'), (237, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (243, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=1}, {part1=C, part2=1}]]], fields=[id, name, part1, part2])')]}"
9,8829e23279dd17965f2f86aa79dbf8814900de94,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/TableSourceJsonPlanTest_jsonplan/testPartitionPushDown.out,testPartitionPushDown.out,5,"{'added': [(64, '    ""description"" : ""TableSourceScan(table=[[default_catalog, default_database, PartitionTable, partitions=[{p=A}], project=[a, b], metadata=[]]], fields=[a, b])"",')], 'deleted': [(24, '        ""type"" : ""FilterPushDown"",'), (25, '        ""predicates"" : [ ]'), (26, '      }, {'), (67, '    ""description"" : ""TableSourceScan(table=[[default_catalog, default_database, PartitionTable, filter=[], partitions=[{p=A}], project=[a, b], metadata=[]]], fields=[a, b])"",')]}"
10,8829e23279dd17965f2f86aa79dbf8814900de94,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/rules/physical/batch/PushLocalAggIntoTableSourceScanRuleTest.xml,PushLocalAggIntoTableSourceScanRuleTest.xml,5,"{'added': [(253, '      +- TableSourceScan(table=[[default_catalog, default_database, inventory_part, partitions=[{type=a}, {type=b}], filter=[=(id, 123:BIGINT)], project=[type, name, amount], metadata=[], aggregates=[grouping=[type,name], aggFunctions=[LongSumAggFunction(amount)]]]], fields=[type, name, sum$0])')], 'deleted': [(253, '      +- TableSourceScan(table=[[default_catalog, default_database, inventory_part, filter=[=(id, 123:BIGINT)], partitions=[{type=a}, {type=b}], project=[type, name, amount], metadata=[], aggregates=[grouping=[type,name], aggFunctions=[LongSumAggFunction(amount)]]]], fields=[type, name, sum$0])')]}"
11,8829e23279dd17965f2f86aa79dbf8814900de94,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/stream/sql/PartitionableSourceTest.xml,PartitionableSourceTest.xml,5,"{'added': [(21, ""      <![CDATA[SELECT * FROM PartitionableTable WHERE (id > 2 OR part1 = 'A') AND part2 > 1]]>""), (28, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (34, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=2}, {part1=B, part2=3}], filter=[]]], fields=[id, name, part1, part2])'), (40, ""      <![CDATA[SELECT * FROM PartitionableTable WHERE (id > 2 OR part1 = 'A') AND part2 > 1]]>""), (47, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (53, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=2}, {part1=B, part2=3}], filter=[]]], fields=[id, name, part1, part2])'), (59, ""      <![CDATA[SELECT * FROM PartitionableTable WHERE (id > 2 OR part1 = 'A') AND part2 > 1]]>""), (66, '      +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableTable]])'), (72, '+- TableSourceScan(table=[[default_catalog, default_database, PartitionableTable, partitions=[{part1=A, part2=2}, {part1=B, part2=3}], filter=[]]], fields=[id, name, part1, part2])'), (73, ']]>'), (74, '    </Resource>'), (75, '  </TestCase>'), (76, '  <TestCase name=""testPushDownPartitionAndFiltersContainPartitionKeys[sourceFetchPartitions=false, useCatalogFilter=false]"">'), (77, '    <Resource name=""sql"">'), (78, ""      <![CDATA[select * from PartitionableAndFilterableTable where part1 = 'A' and part2 > 1 and id > 1]]>""), (79, '    </Resource>'), (80, '    <Resource name=""ast"">'), (81, '      <![CDATA['), (82, 'LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[$4])'), (83, ""+- LogicalFilter(condition=[AND(=($2, _UTF-16LE'A'), >($3, 1), >($0, 1))])""), (84, '   +- LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[+($3, 1)])'), (85, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable]])'), (86, ']]>'), (87, '    </Resource>'), (88, '    <Resource name=""optimized exec plan"">'), (89, '      <![CDATA['), (90, 'Calc(select=[id, name, CAST(_UTF-16LE\'A\':VARCHAR(2147483647) CHARACTER SET ""UTF-16LE"") AS part1, part2, (part2 + 1) AS virtualField])'), (91, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable, partitions=[{part1=A, part2=2}], filter=[>(id, 1)], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (92, ']]>'), (93, '    </Resource>'), (94, '  </TestCase>'), (95, '  <TestCase name=""testPushDownPartitionAndFiltersContainPartitionKeys[sourceFetchPartitions=false, useCatalogFilter=true]"">'), (96, '    <Resource name=""sql"">'), (97, ""      <![CDATA[select * from PartitionableAndFilterableTable where part1 = 'A' and part2 > 1 and id > 1]]>""), (98, '    </Resource>'), (99, '    <Resource name=""ast"">'), (100, '      <![CDATA['), (101, 'LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[$4])'), (102, ""+- LogicalFilter(condition=[AND(=($2, _UTF-16LE'A'), >($3, 1), >($0, 1))])""), (103, '   +- LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[+($3, 1)])'), (104, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable]])'), (105, ']]>'), (106, '    </Resource>'), (107, '    <Resource name=""optimized exec plan"">'), (108, '      <![CDATA['), (109, 'Calc(select=[id, name, CAST(_UTF-16LE\'A\':VARCHAR(2147483647) CHARACTER SET ""UTF-16LE"") AS part1, part2, (part2 + 1) AS virtualField])'), (110, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable, partitions=[{part1=A, part2=2}], filter=[>(id, 1)], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (111, ']]>'), (112, '    </Resource>'), (113, '  </TestCase>'), (114, '  <TestCase name=""testPushDownPartitionAndFiltersContainPartitionKeys[sourceFetchPartitions=true, useCatalogFilter=false]"">'), (115, '    <Resource name=""sql"">'), (116, ""      <![CDATA[select * from PartitionableAndFilterableTable where part1 = 'A' and part2 > 1 and id > 1]]>""), (117, '    </Resource>'), (118, '    <Resource name=""ast"">'), (119, '      <![CDATA['), (120, 'LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[$4])'), (121, ""+- LogicalFilter(condition=[AND(=($2, _UTF-16LE'A'), >($3, 1), >($0, 1))])""), (122, '   +- LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[+($3, 1)])'), (123, '      +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableAndFilterableTable]])'), (124, ']]>'), (125, '    </Resource>'), (126, '    <Resource name=""optimized exec plan"">'), (127, '      <![CDATA['), (128, 'Calc(select=[id, name, CAST(_UTF-16LE\'A\':VARCHAR(2147483647) CHARACTER SET ""UTF-16LE"") AS part1, part2, (part2 + 1) AS virtualField])'), (129, '+- TableSourceScan(table=[[default_catalog, default_database, PartitionableAndFilterableTable, partitions=[{part1=A, part2=2}], filter=[>(id, 1)], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (130, ']]>'), (131, '    </Resource>'), (132, '  </TestCase>'), (133, '  <TestCase name=""testPushDownPartitionAndFiltersContainPartitionKeysWithSingleProjection[sourceFetchPartitions=false, useCatalogFilter=false]"">'), (134, '    <Resource name=""sql"">'), (135, ""      <![CDATA[select name from PartitionableAndFilterableTable where part1 = 'A' and part2 > 1 and id > 1]]>""), (136, '    </Resource>'), (137, '    <Resource name=""ast"">'), (138, '      <![CDATA['), (139, 'LogicalProject(name=[$1])'), (140, ""+- LogicalFilter(condition=[AND(=($2, _UTF-16LE'A'), >($3, 1), >($0, 1))])""), (141, '   +- LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[+($3, 1)])'), (142, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable]])'), (143, ']]>'), (144, '    </Resource>'), (145, '    <Resource name=""optimized exec plan"">'), (146, '      <![CDATA['), (147, 'TableSourceScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable, partitions=[{part1=A, part2=2}], filter=[>(id, 1)], project=[name], metadata=[]]], fields=[name])'), (148, ']]>'), (149, '    </Resource>'), (150, '  </TestCase>'), (151, '  <TestCase name=""testPushDownPartitionAndFiltersContainPartitionKeysWithSingleProjection[sourceFetchPartitions=false, useCatalogFilter=true]"">'), (152, '    <Resource name=""sql"">'), (153, ""      <![CDATA[select name from PartitionableAndFilterableTable where part1 = 'A' and part2 > 1 and id > 1]]>""), (154, '    </Resource>'), (155, '    <Resource name=""ast"">'), (156, '      <![CDATA['), (157, 'LogicalProject(name=[$1])'), (158, ""+- LogicalFilter(condition=[AND(=($2, _UTF-16LE'A'), >($3, 1), >($0, 1))])""), (159, '   +- LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[+($3, 1)])'), (160, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable]])'), (161, ']]>'), (162, '    </Resource>'), (163, '    <Resource name=""optimized exec plan"">'), (164, '      <![CDATA['), (165, 'TableSourceScan(table=[[test_catalog, test_database, PartitionableAndFilterableTable, partitions=[{part1=A, part2=2}], filter=[>(id, 1)], project=[name], metadata=[]]], fields=[name])'), (166, ']]>'), (167, '    </Resource>'), (168, '  </TestCase>'), (169, '  <TestCase name=""testPushDownPartitionAndFiltersContainPartitionKeysWithSingleProjection[sourceFetchPartitions=true, useCatalogFilter=false]"">'), (170, '    <Resource name=""sql"">'), (171, ""      <![CDATA[select name from PartitionableAndFilterableTable where part1 = 'A' and part2 > 1 and id > 1]]>""), (172, '    </Resource>'), (173, '    <Resource name=""ast"">'), (174, '      <![CDATA['), (175, 'LogicalProject(name=[$1])'), (176, ""+- LogicalFilter(condition=[AND(=($2, _UTF-16LE'A'), >($3, 1), >($0, 1))])""), (177, '   +- LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3], virtualField=[+($3, 1)])'), (178, '      +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableAndFilterableTable]])'), (179, ']]>'), (180, '    </Resource>'), (181, '    <Resource name=""optimized exec plan"">'), (182, '      <![CDATA['), (183, 'TableSourceScan(table=[[default_catalog, default_database, PartitionableAndFilterableTable, partitions=[{part1=A, part2=2}], filter=[>(id, 1)], project=[name], metadata=[]]], fields=[name])'), (189, ""      <![CDATA[SELECT * FROM PartitionableTable WHERE part1 = 'A']]>""), (196, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (202, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=1}, {part1=A, part2=2}], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (208, ""      <![CDATA[SELECT * FROM PartitionableTable WHERE part1 = 'A']]>""), (215, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (221, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=1}, {part1=A, part2=2}], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (227, ""      <![CDATA[SELECT * FROM PartitionableTable WHERE part1 = 'A']]>""), (234, '      +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableTable]])'), (240, '+- TableSourceScan(table=[[default_catalog, default_database, PartitionableTable, partitions=[{part1=A, part2=1}, {part1=A, part2=2}], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (246, ""      <![CDATA[select * from PartitionableTable where trim(part1) = 'A' and part2 > 1]]>""), (253, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (259, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=2}]]], fields=[id, name, part1, part2])'), (265, ""      <![CDATA[select * from PartitionableTable where trim(part1) = 'A' and part2 > 1]]>""), (272, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (278, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=2}]]], fields=[id, name, part1, part2])'), (284, '      <![CDATA[SELECT * FROM PartitionableTable WHERE id > 2 AND MyUdf(part2) < 3]]>'), (291, '      +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableTable]])'), (297, '+- TableSourceScan(table=[[default_catalog, default_database, PartitionableTable, partitions=[{part1=A, part2=1}, {part1=C, part2=1}], filter=[]]], fields=[id, name, part1, part2])'), (303, ""      <![CDATA[select * from PartitionableTable where trim(part1) = 'A' and part2 > 1]]>""), (310, '      +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableTable]])'), (316, '+- TableSourceScan(table=[[default_catalog, default_database, PartitionableTable, partitions=[{part1=A, part2=2}]]], fields=[id, name, part1, part2])'), (322, '      <![CDATA[SELECT * FROM PartitionableTable WHERE id > 2 AND MyUdf(part2) < 3]]>'), (329, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (335, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=1}, {part1=C, part2=1}], filter=[]]], fields=[id, name, part1, part2])'), (341, '      <![CDATA[SELECT * FROM PartitionableTable WHERE id > 2 AND MyUdf(part2) < 3]]>'), (348, '      +- LogicalTableScan(table=[[test_catalog, test_database, PartitionableTable]])'), (354, '+- TableSourceScan(table=[[test_catalog, test_database, PartitionableTable, partitions=[{part1=A, part2=1}, {part1=C, part2=1}], filter=[]]], fields=[id, name, part1, part2])')], 'deleted': [(21, ""      <![CDATA[SELECT * FROM MyTable WHERE (id > 2 OR part1 = 'A') AND part2 > 1]]>""), (28, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (34, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=2}, {part1=B, part2=3}]]], fields=[id, name, part1, part2])'), (40, ""      <![CDATA[SELECT * FROM MyTable WHERE (id > 2 OR part1 = 'A') AND part2 > 1]]>""), (47, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (53, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=2}, {part1=B, part2=3}]]], fields=[id, name, part1, part2])'), (59, ""      <![CDATA[SELECT * FROM MyTable WHERE (id > 2 OR part1 = 'A') AND part2 > 1]]>""), (66, '      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (72, '+- TableSourceScan(table=[[default_catalog, default_database, MyTable, filter=[], partitions=[{part1=A, part2=2}, {part1=B, part2=3}]]], fields=[id, name, part1, part2])'), (78, ""      <![CDATA[SELECT * FROM MyTable WHERE part1 = 'A']]>""), (85, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (91, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=1}, {part1=A, part2=2}], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (97, ""      <![CDATA[SELECT * FROM MyTable WHERE part1 = 'A']]>""), (104, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (110, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=1}, {part1=A, part2=2}], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (116, ""      <![CDATA[SELECT * FROM MyTable WHERE part1 = 'A']]>""), (123, '      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (129, '+- TableSourceScan(table=[[default_catalog, default_database, MyTable, filter=[], partitions=[{part1=A, part2=1}, {part1=A, part2=2}], project=[id, name, part2], metadata=[]]], fields=[id, name, part2])'), (135, ""      <![CDATA[select * from MyTable where trim(part1) = 'A' and part2 > 1]]>""), (142, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (148, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=2}]]], fields=[id, name, part1, part2])'), (154, ""      <![CDATA[select * from MyTable where trim(part1) = 'A' and part2 > 1]]>""), (161, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (167, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=2}]]], fields=[id, name, part1, part2])'), (173, '      <![CDATA[SELECT * FROM MyTable WHERE id > 2 AND MyUdf(part2) < 3]]>'), (180, '      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (186, '+- TableSourceScan(table=[[default_catalog, default_database, MyTable, filter=[], partitions=[{part1=A, part2=1}, {part1=C, part2=1}]]], fields=[id, name, part1, part2])'), (192, ""      <![CDATA[select * from MyTable where trim(part1) = 'A' and part2 > 1]]>""), (199, '      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])'), (205, '+- TableSourceScan(table=[[default_catalog, default_database, MyTable, filter=[], partitions=[{part1=A, part2=2}]]], fields=[id, name, part1, part2])'), (211, '      <![CDATA[SELECT * FROM MyTable WHERE id > 2 AND MyUdf(part2) < 3]]>'), (218, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (224, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=1}, {part1=C, part2=1}]]], fields=[id, name, part1, part2])'), (230, '      <![CDATA[SELECT * FROM MyTable WHERE id > 2 AND MyUdf(part2) < 3]]>'), (237, '      +- LogicalTableScan(table=[[test_catalog, test_database, MyTable]])'), (243, '+- TableSourceScan(table=[[test_catalog, test_database, MyTable, filter=[], partitions=[{part1=A, part2=1}, {part1=C, part2=1}]]], fields=[id, name, part1, part2])')]}"
12,dabc1a894fd5bca1882a071b5d4a015f2d341a32,flink-filesystems/flink-s3-fs-presto/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(24, '- com.facebook.presto.hadoop:hadoop-apache2:2.7.4-9')], 'deleted': [(24, '- com.facebook.presto.hadoop:hadoop-apache2:2.7.3-1')]}"
13,c7ae197dae4db4b221361a3f4d1e479f078ee151,flink-dist/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(12, '- commons-cli:commons-cli:1.5.0')], 'deleted': [(12, '- commons-cli:commons-cli:1.4')]}"
14,36a328299b13221ba5c3df5d86523a916a16abbd,flink-connectors/flink-connector-elasticsearch5/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(10, '- com.fasterxml.jackson.core:jackson-core:2.13.0'), (11, '- com.fasterxml.jackson.core:jackson-databind:2.13.0'), (12, '- com.fasterxml.jackson.core:jackson-annotations:2.13.0'), (13, '- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.13.0'), (14, '- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.13.0'), (15, '- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.0')], 'deleted': [(10, '- com.fasterxml.jackson.core:jackson-core:2.12.1'), (11, '- com.fasterxml.jackson.core:jackson-databind:2.12.1'), (12, '- com.fasterxml.jackson.core:jackson-annotations:2.12.1'), (13, '- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.12.1'), (14, '- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.12.1'), (15, '- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.1')]}"
15,36a328299b13221ba5c3df5d86523a916a16abbd,flink-connectors/flink-sql-connector-elasticsearch6/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(9, '- com.fasterxml.jackson.core:jackson-core:2.13.0'), (10, '- com.fasterxml.jackson.core:jackson-databind:2.13.0'), (11, '- com.fasterxml.jackson.core:jackson-annotations:2.13.0'), (12, '- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.13.0'), (13, '- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.13.0'), (14, '- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.0')], 'deleted': [(9, '- com.fasterxml.jackson.core:jackson-core:2.12.1'), (10, '- com.fasterxml.jackson.core:jackson-databind:2.12.1'), (11, '- com.fasterxml.jackson.core:jackson-annotations:2.12.1'), (12, '- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.12.1'), (13, '- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.12.1'), (14, '- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.1')]}"
16,36a328299b13221ba5c3df5d86523a916a16abbd,flink-connectors/flink-sql-connector-elasticsearch7/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(10, '- com.fasterxml.jackson.core:jackson-core:2.13.0'), (11, '- com.fasterxml.jackson.core:jackson-databind:2.13.0'), (12, '- com.fasterxml.jackson.core:jackson-annotations:2.13.0'), (13, '- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.13.0'), (14, '- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.13.0'), (15, '- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.0')], 'deleted': [(10, '- com.fasterxml.jackson.core:jackson-core:2.12.1'), (11, '- com.fasterxml.jackson.core:jackson-databind:2.12.1'), (12, '- com.fasterxml.jackson.core:jackson-annotations:2.12.1'), (13, '- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.12.1'), (14, '- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.12.1'), (15, '- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.1')]}"
17,36a328299b13221ba5c3df5d86523a916a16abbd,flink-connectors/flink-sql-connector-kinesis/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(17, '- com.fasterxml.jackson.core:jackson-annotations:2.13.0'), (18, '- com.fasterxml.jackson.core:jackson-databind:2.13.0'), (19, '- com.fasterxml.jackson.core:jackson-core:2.13.0'), (20, '- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.13.0')], 'deleted': [(17, '- com.fasterxml.jackson.core:jackson-annotations:2.12.1'), (18, '- com.fasterxml.jackson.core:jackson-databind:2.12.1'), (19, '- com.fasterxml.jackson.core:jackson-core:2.12.1'), (20, '- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.12.1')]}"
18,36a328299b13221ba5c3df5d86523a916a16abbd,flink-filesystems/flink-azure-fs-hadoop/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(9, '- com.fasterxml.jackson.core:jackson-core:2.13.0')], 'deleted': [(9, '- com.fasterxml.jackson.core:jackson-core:2.12.1')]}"
19,36a328299b13221ba5c3df5d86523a916a16abbd,flink-filesystems/flink-fs-hadoop-shaded/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(25, '- com.fasterxml.jackson.core:jackson-annotations:2.13.0'), (26, '- com.fasterxml.jackson.core:jackson-core:2.13.0'), (27, '- com.fasterxml.jackson.core:jackson-databind:2.13.0')], 'deleted': [(25, '- com.fasterxml.jackson.core:jackson-annotations:2.12.1'), (26, '- com.fasterxml.jackson.core:jackson-core:2.12.1'), (27, '- com.fasterxml.jackson.core:jackson-databind:2.12.1')]}"
20,36a328299b13221ba5c3df5d86523a916a16abbd,flink-filesystems/flink-s3-fs-hadoop/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(12, '- com.fasterxml.jackson.core:jackson-annotations:2.13.0'), (13, '- com.fasterxml.jackson.core:jackson-core:2.13.0'), (14, '- com.fasterxml.jackson.core:jackson-databind:2.13.0'), (15, '- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.13.0')], 'deleted': [(12, '- com.fasterxml.jackson.core:jackson-annotations:2.12.1'), (13, '- com.fasterxml.jackson.core:jackson-core:2.12.1'), (14, '- com.fasterxml.jackson.core:jackson-databind:2.12.1'), (15, '- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.12.1')]}"
21,36a328299b13221ba5c3df5d86523a916a16abbd,flink-filesystems/flink-s3-fs-presto/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(25, '- com.fasterxml.jackson.core:jackson-annotations:2.13.0'), (26, '- com.fasterxml.jackson.core:jackson-core:2.13.0'), (27, '- com.fasterxml.jackson.core:jackson-databind:2.13.0'), (28, '- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.13.0')], 'deleted': [(25, '- com.fasterxml.jackson.core:jackson-annotations:2.12.1'), (26, '- com.fasterxml.jackson.core:jackson-core:2.12.1'), (27, '- com.fasterxml.jackson.core:jackson-databind:2.12.1'), (28, '- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.12.1')]}"
22,36a328299b13221ba5c3df5d86523a916a16abbd,flink-formats/flink-sql-avro-confluent-registry/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(10, '- com.fasterxml.jackson.core:jackson-core:2.13.0'), (11, '- com.fasterxml.jackson.core:jackson-databind:2.13.0'), (12, '- com.fasterxml.jackson.core:jackson-annotations:2.13.0')], 'deleted': [(10, '- com.fasterxml.jackson.core:jackson-core:2.12.1'), (11, '- com.fasterxml.jackson.core:jackson-databind:2.12.1'), (12, '- com.fasterxml.jackson.core:jackson-annotations:2.12.1')]}"
23,36a328299b13221ba5c3df5d86523a916a16abbd,flink-formats/flink-sql-avro/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(10, '- com.fasterxml.jackson.core:jackson-core:2.13.0'), (11, '- com.fasterxml.jackson.core:jackson-databind:2.13.0'), (12, '- com.fasterxml.jackson.core:jackson-annotations:2.13.0')], 'deleted': [(10, '- com.fasterxml.jackson.core:jackson-core:2.12.1'), (11, '- com.fasterxml.jackson.core:jackson-databind:2.12.1'), (12, '- com.fasterxml.jackson.core:jackson-annotations:2.12.1')]}"
24,36a328299b13221ba5c3df5d86523a916a16abbd,flink-kubernetes/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(9, '- com.fasterxml.jackson.core:jackson-annotations:2.13.0'), (10, '- com.fasterxml.jackson.core:jackson-core:2.13.0'), (11, '- com.fasterxml.jackson.core:jackson-databind:2.13.0'), (12, '- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.0'), (13, '- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.0')], 'deleted': [(9, '- com.fasterxml.jackson.core:jackson-annotations:2.12.1'), (10, '- com.fasterxml.jackson.core:jackson-core:2.12.1'), (11, '- com.fasterxml.jackson.core:jackson-databind:2.12.1'), (12, '- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.1'), (13, '- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.1')]}"
25,36a328299b13221ba5c3df5d86523a916a16abbd,flink-python/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(9, '- com.fasterxml.jackson.core:jackson-annotations:2.13.0'), (10, '- com.fasterxml.jackson.core:jackson-core:2.13.0'), (11, '- com.fasterxml.jackson.core:jackson-databind:2.13.0')], 'deleted': [(9, '- com.fasterxml.jackson.core:jackson-annotations:2.12.1'), (10, '- com.fasterxml.jackson.core:jackson-core:2.12.1'), (11, '- com.fasterxml.jackson.core:jackson-databind:2.12.1')]}"
26,36a328299b13221ba5c3df5d86523a916a16abbd,flink-table/flink-table-planner/src/main/resources/META-INF/NOTICE,NOTICE,5,"{'added': [(12, '- com.fasterxml.jackson.core:jackson-annotations:2.13.0'), (13, '- com.fasterxml.jackson.core:jackson-core:2.13.0'), (14, '- com.fasterxml.jackson.core:jackson-databind:2.13.0')], 'deleted': [(12, '- com.fasterxml.jackson.core:jackson-annotations:2.12.1'), (13, '- com.fasterxml.jackson.core:jackson-core:2.12.1'), (14, '- com.fasterxml.jackson.core:jackson-databind:2.12.1')]}"
27,47586471cd26e8da30dbfde51af92b60d20f7753,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/batch/sql/TableSourceTest.xml,TableSourceTest.xml,5,"{'added': [(117, '+- TableSourceScan(table=[[default_catalog, default_database, T, project=[id, deepNested_nested1, deepNested_nested2_num], metadata=[metadata_1]]], fields=[id, deepNested_nested1, deepNested_nested2_num, metadata_1])')], 'deleted': [(117, '+- TableSourceScan(table=[[default_catalog, default_database, T, project=[id, deepNested_nested1, deepNested_nested2_num, metadata_1], metadata=[metadata_1]]], fields=[id, deepNested_nested1, deepNested_nested2_num, metadata_1])')]}"
28,47586471cd26e8da30dbfde51af92b60d20f7753,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/TableSourceJsonPlanTest_jsonplan/testReadingMetadata.out,testReadingMetadata.out,5,"{'added': [(66, '    ""description"" : ""TableSourceScan(table=[[default_catalog, default_database, MyTable2, project=[a, b], metadata=[m]]], fields=[a, b, m])"",')], 'deleted': [(36, '          }, {'), (37, '            ""m"" : ""VARCHAR(2147483647)""'), (68, '    ""description"" : ""TableSourceScan(table=[[default_catalog, default_database, MyTable2, project=[a, b, m], metadata=[m]]], fields=[a, b, m])"",')]}"
29,47586471cd26e8da30dbfde51af92b60d20f7753,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/rules/logical/PushProjectIntoTableSourceScanRuleTest.xml,PushProjectIntoTableSourceScanRuleTest.xml,5,"{'added': [(192, ']]>'), (193, '    </Resource>'), (194, '  </TestCase>'), (195, '  <TestCase name=""testNestedProjectFieldAccessWithITEMWithConstantIndex"">'), (196, '    <Resource name=""sql"">'), (197, '      <![CDATA[SELECT `Result`.`Mid`.data_arr[2].`value`, `Result`.`Mid`.data_arr FROM NestedItemTable]]>'), (198, '    </Resource>'), (199, '    <Resource name=""ast"">'), (200, '      <![CDATA['), (201, 'LogicalProject(EXPR$0=[ITEM($2.Mid.data_arr, 2).value], data_arr=[$2.Mid.data_arr])'), (202, '+- LogicalTableScan(table=[[default_catalog, default_database, NestedItemTable]])'), (203, ']]>'), (204, '    </Resource>'), (205, '    <Resource name=""optimized rel plan"">'), (206, '      <![CDATA['), (207, 'LogicalProject(EXPR$0=[ITEM($0, 2).value], data_arr=[$0])'), (208, '+- LogicalTableScan(table=[[default_catalog, default_database, NestedItemTable, project=[Result_Mid_data_arr], metadata=[]]])'), (227, '+- LogicalTableScan(table=[[default_catalog, default_database, MetadataTable, project=[id, deepNested_nested1, deepNested_nested2_num], metadata=[metadata_1]]])'), (246, '+- LogicalTableScan(table=[[default_catalog, default_database, MetadataTable, project=[id, deepNested_nested1, deepNested_nested2_num], metadata=[metadata_1]]])'), (250, '  <TestCase name=""testProjectFieldAccessWithITEM"">'), (252, ""      <![CDATA[SELECT `Result`.data_arr[ID].`value`, `Result`.data_map['item'].`value`, `outer_array`[1], `outer_array`[ID], `outer_map`['item'] FROM ItemTable]]>""), (256, ""LogicalProject(EXPR$0=[ITEM($2.data_arr, $0).value], EXPR$1=[ITEM($2.data_map, _UTF-16LE'item').value], EXPR$2=[ITEM($3, 1)], EXPR$3=[ITEM($3, $0)], EXPR$4=[ITEM($4, _UTF-16LE'item')])""), (257, '+- LogicalTableScan(table=[[default_catalog, default_database, ItemTable]])'), (262, ""LogicalProject(EXPR$0=[ITEM($0.data_arr, $1).value], EXPR$1=[ITEM($0.data_map, _UTF-16LE'item').value], EXPR$2=[ITEM($2, 1)], EXPR$3=[ITEM($2, $1)], EXPR$4=[ITEM($3, _UTF-16LE'item')])""), (263, '+- LogicalTableScan(table=[[default_catalog, default_database, ItemTable, project=[Result, ID, outer_array, outer_map], metadata=[]]])'), (267, '  <TestCase name=""testProjectionWithMetadataAndPhysicalFields"">'), (269, '      <![CDATA[SELECT metadata, f1 FROM T5]]>'), (273, 'LogicalProject(metadata=[$1], f1=[$0])'), (274, '+- LogicalTableScan(table=[[default_catalog, default_database, T5]])'), (279, 'LogicalProject(metadata=[$1], f1=[$0])'), (280, '+- LogicalTableScan(table=[[default_catalog, default_database, T5, project=[f1], metadata=[m2]]])'), (281, ']]>'), (282, '    </Resource>'), (283, '  </TestCase>'), (284, '  <TestCase name=""testProjectionIncludingOnlyMetadata"">'), (285, '    <Resource name=""sql"">'), (286, '      <![CDATA[SELECT metadata FROM T5]]>'), (287, '    </Resource>'), (288, '    <Resource name=""ast"">'), (289, '      <![CDATA['), (290, 'LogicalProject(metadata=[$1])'), (291, '+- LogicalTableScan(table=[[default_catalog, default_database, T5]])'), (292, ']]>'), (293, '    </Resource>'), (294, '    <Resource name=""optimized rel plan"">'), (295, '      <![CDATA['), (296, 'LogicalTableScan(table=[[default_catalog, default_database, T5, project=[], metadata=[m2]]])'), (297, ']]>'), (298, '    </Resource>'), (299, '  </TestCase>'), (300, '  <TestCase name=""testProjectWithMapType"">'), (301, '    <Resource name=""sql"">'), (302, ""      <![CDATA[SELECT id, testMap['e']""), (303, 'FROM NestedTable]]>'), (304, '    </Resource>'), (305, '    <Resource name=""ast"">'), (306, '      <![CDATA['), (307, ""LogicalProject(id=[$0], EXPR$1=[ITEM($5, _UTF-16LE'e')])""), (308, '+- LogicalTableScan(table=[[default_catalog, default_database, NestedTable]])'), (309, ']]>'), (310, '    </Resource>'), (311, '    <Resource name=""optimized rel plan"">'), (312, '      <![CDATA['), (313, ""LogicalProject(id=[$0], EXPR$1=[ITEM($1, _UTF-16LE'e')])""), (314, '+- LogicalTableScan(table=[[default_catalog, default_database, NestedTable, project=[id, testMap], metadata=[]]])')], 'deleted': [(50, ']]>'), (51, '    </Resource>'), (52, '  </TestCase>'), (53, '  <TestCase name=""testNestedProjectFieldAccessWithITEMWithConstantIndex"">'), (54, '    <Resource name=""sql"">'), (55, '      <![CDATA[SELECT `Result`.`Mid`.data_arr[2].`value`, `Result`.`Mid`.data_arr FROM NestedItemTable]]>'), (56, '    </Resource>'), (57, '    <Resource name=""ast"">'), (58, '      <![CDATA['), (59, 'LogicalProject(EXPR$0=[ITEM($2.Mid.data_arr, 2).value], data_arr=[$2.Mid.data_arr])'), (60, '+- LogicalTableScan(table=[[default_catalog, default_database, NestedItemTable]])'), (61, ']]>'), (62, '    </Resource>'), (63, '    <Resource name=""optimized rel plan"">'), (64, '      <![CDATA['), (65, 'LogicalProject(EXPR$0=[ITEM($0, 2).value], data_arr=[$0])'), (66, '+- LogicalTableScan(table=[[default_catalog, default_database, NestedItemTable, project=[Result_Mid_data_arr], metadata=[]]])'), (227, '+- LogicalTableScan(table=[[default_catalog, default_database, MetadataTable, project=[id, deepNested_nested1, deepNested_nested2_num, metadata_1], metadata=[metadata_1]]])'), (246, '+- LogicalTableScan(table=[[default_catalog, default_database, MetadataTable, project=[id, deepNested_nested1, deepNested_nested2_num, metadata_1], metadata=[metadata_1]]])'), (250, '  <TestCase name=""testProjectWithMapType"">'), (252, ""      <![CDATA[SELECT id, testMap['e']""), (253, 'FROM NestedTable]]>'), (257, ""LogicalProject(id=[$0], EXPR$1=[ITEM($5, _UTF-16LE'e')])""), (258, '+- LogicalTableScan(table=[[default_catalog, default_database, NestedTable]])'), (263, ""LogicalProject(id=[$0], EXPR$1=[ITEM($1, _UTF-16LE'e')])""), (264, '+- LogicalTableScan(table=[[default_catalog, default_database, NestedTable, project=[id, testMap], metadata=[]]])'), (268, '  <TestCase name=""testProjectFieldAccessWithITEM"">'), (270, ""      <![CDATA[SELECT `Result`.data_arr[ID].`value`, `Result`.data_map['item'].`value`, `outer_array`[1], `outer_array`[ID], `outer_map`['item'] FROM ItemTable]]>""), (274, ""LogicalProject(EXPR$0=[ITEM($2.data_arr, $0).value], EXPR$1=[ITEM($2.data_map, _UTF-16LE'item').value], EXPR$2=[ITEM($3, 1)], EXPR$3=[ITEM($3, $0)], EXPR$4=[ITEM($4, _UTF-16LE'item')])""), (275, '+- LogicalTableScan(table=[[default_catalog, default_database, ItemTable]])'), (280, ""LogicalProject(EXPR$0=[ITEM($0.data_arr, $1).value], EXPR$1=[ITEM($0.data_map, _UTF-16LE'item').value], EXPR$2=[ITEM($2, 1)], EXPR$3=[ITEM($2, $1)], EXPR$4=[ITEM($3, _UTF-16LE'item')])""), (281, '+- LogicalTableScan(table=[[default_catalog, default_database, ItemTable, project=[Result, ID, outer_array, outer_map], metadata=[]]])')]}"
30,47586471cd26e8da30dbfde51af92b60d20f7753,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/rules/physical/batch/PushLocalAggIntoTableSourceScanRuleTest.xml,PushLocalAggIntoTableSourceScanRuleTest.xml,5,"{'added': [(225, '      +- TableSourceScan(table=[[default_catalog, default_database, inventory_meta, filter=[=(id, 123:BIGINT)], project=[name, type, amount], metadata=[metadata_1], aggregates=[grouping=[name,type], aggFunctions=[LongSumAggFunction(amount),LongMaxAggFunction(metadata_1)]]]], fields=[name, type, sum$0, max$1])')], 'deleted': [(225, '      +- TableSourceScan(table=[[default_catalog, default_database, inventory_meta, filter=[=(id, 123:BIGINT)], project=[name, type, amount, metadata_1], metadata=[metadata_1], aggregates=[grouping=[name,type], aggFunctions=[LongSumAggFunction(amount),LongMaxAggFunction(metadata_1)]]]], fields=[name, type, sum$0, max$1])')]}"
31,47586471cd26e8da30dbfde51af92b60d20f7753,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/stream/sql/SourceWatermarkTest.xml,SourceWatermarkTest.xml,5,"{'added': [(147, '+- TableSourceScan(table=[[default_catalog, default_database, MyLtzTable, project=[a, b], metadata=[originTime], watermark=[TO_TIMESTAMP_LTZ(originTime, 3)]]], fields=[a, b, originTime])'), (185, ""+- TableSourceScan(table=[[default_catalog, default_database, MyTable, project=[a, b], metadata=[originTime], watermark=[TO_TIMESTAMP(FROM_UNIXTIME(/(originTime, 1000)), _UTF-16LE'yyyy-MM-dd HH:mm:ss')]]], fields=[a, b, originTime])"")], 'deleted': [(147, '+- TableSourceScan(table=[[default_catalog, default_database, MyLtzTable, project=[a, b, originTime], metadata=[originTime], watermark=[TO_TIMESTAMP_LTZ(originTime, 3)]]], fields=[a, b, originTime])'), (185, ""+- TableSourceScan(table=[[default_catalog, default_database, MyTable, project=[a, b, originTime], metadata=[originTime], watermark=[TO_TIMESTAMP(FROM_UNIXTIME(/(originTime, 1000)), _UTF-16LE'yyyy-MM-dd HH:mm:ss')]]], fields=[a, b, originTime])"")]}"
32,47586471cd26e8da30dbfde51af92b60d20f7753,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/stream/sql/TableScanTest.xml,TableScanTest.xml,5,"{'added': [(213, '+- TableSourceScan(table=[[default_catalog, default_database, MetadataTable, project=[b], metadata=[metadata_3]]], fields=[b, metadata_3])')], 'deleted': [(213, '+- TableSourceScan(table=[[default_catalog, default_database, MetadataTable, project=[b, metadata_3], metadata=[metadata_3]]], fields=[b, metadata_3])')]}"
33,47586471cd26e8da30dbfde51af92b60d20f7753,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/stream/sql/TableSinkTest.xml,TableSinkTest.xml,5,"{'added': [(120, '   +- TableSourceScan(table=[[default_catalog, default_database, MetadataTable, project=[a, b, c], metadata=[metadata_1, metadata_2]]], fields=[a, b, c, metadata_1, metadata_2])')], 'deleted': [(120, '   +- TableSourceScan(table=[[default_catalog, default_database, MetadataTable, project=[a, b, c, metadata_1, metadata_2], metadata=[metadata_1, metadata_2]]], fields=[a, b, c, metadata_1, metadata_2])')]}"
34,47586471cd26e8da30dbfde51af92b60d20f7753,flink-table/flink-table-planner/src/test/resources/org/apache/flink/table/planner/plan/stream/sql/TableSourceTest.xml,TableSourceTest.xml,5,"{'added': [(83, '+- TableSourceScan(table=[[default_catalog, default_database, T, project=[id, deepNested_nested1, deepNested_nested2_num], metadata=[metadata_1]]], fields=[id, deepNested_nested1, deepNested_nested2_num, metadata_1])')], 'deleted': [(83, '+- TableSourceScan(table=[[default_catalog, default_database, T, project=[id, deepNested_nested1, deepNested_nested2_num, metadata_1], metadata=[metadata_1]]], fields=[id, deepNested_nested1, deepNested_nested2_num, metadata_1])')]}"
35,403ec23921435dfb57614410754678d84dd0a276,flink-end-to-end-tests/flink-end-to-end-tests-scala/src/test/resources/log4j2-test.properties,log4j2-test.properties,1,"{'added': [(1, '################################################################################'), (2, '#  Licensed to the Apache Software Foundation (ASF) under one'), (3, '#  or more contributor license agreements.  See the NOTICE file'), (4, '#  distributed with this work for additional information'), (5, '#  regarding copyright ownership.  The ASF licenses this file'), (6, '#  to you under the Apache License, Version 2.0 (the'), (7, '#  ""License""); you may not use this file except in compliance'), (8, '#  with the License.  You may obtain a copy of the License at'), (9, '#'), (10, '#      http://www.apache.org/licenses/LICENSE-2.0'), (11, '#'), (12, '#  Unless required by applicable law or agreed to in writing, software'), (13, '#  distributed under the License is distributed on an ""AS IS"" BASIS,'), (14, '#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'), (15, '#  See the License for the specific language governing permissions and'), (16, '# limitations under the License.'), (17, '################################################################################'), (18, ''), (19, '# Set root logger level to OFF to not flood build logs'), (20, '# set manually to INFO for debugging purposes'), (21, 'rootLogger.level = OFF'), (22, 'rootLogger.appenderRef.test.ref = TestLogger'), (23, ''), (24, 'appender.testlogger.name = TestLogger'), (25, 'appender.testlogger.type = CONSOLE'), (26, 'appender.testlogger.target = SYSTEM_ERR'), (27, 'appender.testlogger.layout.type = PatternLayout'), (28, 'appender.testlogger.layout.pattern = %-4r [%t] %-5p %c %x - %m%n')], 'deleted': []}"
36,e8b11aaaef770a27d638ed2a8a101c98d7b47dc5,flink-runtime-web/src/test/resources/rest_api_v1.snapshot,rest_api_v1.snapshot,5,"{'added': [(1877, '        },'), (1878, '        ""triggerId"" : {'), (1879, '          ""type"" : ""any""'), (1952, '        },'), (1953, '        ""triggerId"" : {'), (1954, '          ""type"" : ""any""')], 'deleted': []}"
37,95eca7e0bc4e368eab58ed4c527d2ad2d8061962,flink-runtime-web/src/test/resources/rest_api_v1.snapshot,rest_api_v1.snapshot,5,"{'added': [(1280, '          ""type"" : ""boolean""')], 'deleted': [(1280, '           ""type"" : ""boolean""')]}"
