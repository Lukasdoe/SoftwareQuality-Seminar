,commit_hash,file_path,filename,action,changes
0,ad8520e1e535d52d9f20a94a1086924726158a05,zipkin-storage/elasticsearch/src/test/resources/simplelogger.properties,simplelogger.properties,5,"{'added': [(10, ''), (11, '# Ensure when ES_DEBUG=true tests dump trace output'), (12, 'org.slf4j.simpleLogger.log.com.linecorp.armeria.client.logging=info')], 'deleted': []}"
1,28d9529e3fa7ff807bd6c7cb757587fbdb8ae108,zipkin-collector/scribe/src/test/resources/simplelogger.properties,simplelogger.properties,5,"{'added': [], 'deleted': [(2, ''), (7, '')]}"
2,686d86b0d1d4dd19e44118ed99da1c2a41ee91c3,zipkin-storage/cassandra/src/main/resources/zipkin2-schema.cql,zipkin2-schema.cql,5,"{'added': [(40, '    AND dclocal_read_repair_chance = 0')], 'deleted': [(40, '    AND dclocal_read_repair_chance = 0.0')]}"
3,e37a7b79cbca3eb35423237a580028000038c011,zipkin-collector/scribe/src/test/resources/simplelogger.properties,simplelogger.properties,5,"{'added': [], 'deleted': [(9, '# stop huge spam'), (10, 'org.slf4j.simpleLogger.log.org.testcontainers.dockerclient=off')]}"
4,e37a7b79cbca3eb35423237a580028000038c011,zipkin-storage/cassandra-v1/src/main/resources/cassandra-schema-upgrade-1.cql,cassandra-schema-upgrade-1.cql,4,"{'added': [], 'deleted': [(1, '// upgrade cql to add the default_time_to_live option on each table'), (2, ''), (3, 'ALTER TABLE zipkin.service_span_name_index'), (4, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_window_size_seconds': '86400'}""), (5, '    AND default_time_to_live =  259200;'), (6, ''), (7, 'ALTER TABLE zipkin.service_name_index'), (8, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_window_size_seconds': '86400'}""), (9, '    AND default_time_to_live =  259200;'), (10, ''), (11, 'ALTER TABLE zipkin.span_names'), (12, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy', 'unchecked_tombstone_compaction': 'true', 'tombstone_threshold': '0.2'}""), (13, '    AND default_time_to_live =  259200;'), (14, ''), (15, 'ALTER TABLE zipkin.annotations_index'), (16, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_window_size_seconds': '86400'}""), (17, '    AND default_time_to_live =  259200;'), (18, ''), (19, 'ALTER TABLE zipkin.dependencies'), (20, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy', 'unchecked_tombstone_compaction': 'true', 'tombstone_threshold': '0.2'}""), (21, '    AND default_time_to_live =  259200;'), (22, ''), (23, 'ALTER TABLE zipkin.service_names'), (24, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy', 'unchecked_tombstone_compaction': 'true', 'tombstone_threshold': '0.2'}""), (25, '    AND default_time_to_live =  259200;'), (26, ''), (27, 'ALTER TABLE zipkin.traces'), (28, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_window_size_seconds': '86400'}""), (29, '    AND default_time_to_live =  604800;')]}"
5,e37a7b79cbca3eb35423237a580028000038c011,zipkin-storage/cassandra-v1/src/main/resources/cassandra-schema-upgrade-2.cql,cassandra-schema-upgrade-2.cql,4,"{'added': [], 'deleted': [(1, 'CREATE TABLE IF NOT EXISTS zipkin.autocomplete_tags ('), (2, '    key     text,'), (3, '    value    text,'), (4, '    PRIMARY KEY (key, value)'), (5, ')'), (6, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy', 'unchecked_tombstone_compaction': 'true', 'tombstone_threshold': '0.2'}""), (7, '    AND default_time_to_live =  259200')]}"
6,e37a7b79cbca3eb35423237a580028000038c011,zipkin-storage/cassandra-v1/src/main/resources/cassandra-schema-upgrade-3.cql,cassandra-schema-upgrade-3.cql,4,"{'added': [], 'deleted': [(1, 'CREATE TABLE IF NOT EXISTS zipkin.remote_service_names ('), (2, '    service_name text,'), (3, '    remote_service_name text,'), (4, '    PRIMARY KEY (service_name, remote_service_name)'), (5, ')'), (6, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy', 'unchecked_tombstone_compaction': 'true', 'tombstone_threshold': '0.2'}""), (7, '    AND default_time_to_live =  259200;'), (8, ''), (9, 'CREATE TABLE IF NOT EXISTS zipkin.service_remote_service_name_index ('), (10, '    service_remote_service_name text,      // Span.localServiceName + ""."" + Span.remoteServiceName'), (11, '    ts                          timestamp, // start timestamp of the span, truncated to millisecond precision'), (12, '    trace_id                    bigint,    // trace ID. Included as a clustering column to avoid clashes (however unlikely)'), (13, '    PRIMARY KEY (service_remote_service_name, ts, trace_id)'), (14, ')'), (15, '    WITH CLUSTERING ORDER BY (ts DESC)'), (16, ""    AND compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_window_size_seconds': '86400'}""), (17, '    AND default_time_to_live =  259200;')]}"
7,e37a7b79cbca3eb35423237a580028000038c011,zipkin-storage/cassandra-v1/src/main/resources/cassandra-schema.cql,cassandra-schema.cql,4,"{'added': [], 'deleted': [(1, ""CREATE KEYSPACE IF NOT EXISTS zipkin WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'};""), (2, ''), (3, 'CREATE TABLE IF NOT EXISTS zipkin.service_remote_service_name_index ('), (4, '    service_remote_service_name text,      // Span.localServiceName + ""."" + Span.remoteServiceName'), (5, '    ts                          timestamp, // start timestamp of the span, truncated to millisecond precision'), (6, '    trace_id                    bigint,    // trace ID. Included as a clustering column to avoid clashes (however unlikely)'), (7, '    PRIMARY KEY (service_remote_service_name, ts, trace_id)'), (8, ')'), (9, '    WITH CLUSTERING ORDER BY (ts DESC)'), (10, ""    AND compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_window_size_seconds': '86400'}""), (11, '    AND default_time_to_live =  259200;'), (12, ''), (13, 'CREATE TABLE IF NOT EXISTS zipkin.service_span_name_index ('), (14, '    service_span_name text,      // Span.localServiceName + ""."" + Span.name'), (15, '    ts                timestamp, // start timestamp of the span, truncated to millisecond precision'), (16, '    trace_id          bigint,    // trace ID. Included as a clustering column to avoid clashes (however unlikely)'), (17, '    PRIMARY KEY (service_span_name, ts, trace_id)'), (18, ')'), (19, '    WITH CLUSTERING ORDER BY (ts DESC)'), (20, ""    AND compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_window_size_seconds': '86400'}""), (21, '    AND default_time_to_live =  259200;'), (22, ''), (23, 'CREATE TABLE IF NOT EXISTS zipkin.service_name_index ('), (24, '    service_name      text,      // Span.localServiceName'), (25, '    bucket            int,       // avoids hot spots by distributing writes across each bucket, usually 0-9'), (26, '    ts                timestamp, // start timestamp of the span, truncated to millisecond precision'), (27, '    trace_id          bigint,    // trace ID. Included as a clustering column to avoid clashes (however unlikely)'), (28, '    PRIMARY KEY ((service_name, bucket), ts, trace_id)'), (29, ')'), (30, '    WITH CLUSTERING ORDER BY (ts DESC)'), (31, ""    AND compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_window_size_seconds': '86400'}""), (32, '    AND default_time_to_live =  259200;'), (33, ''), (34, 'CREATE TABLE IF NOT EXISTS zipkin.span_names ('), (35, '    service_name text,'), (36, '    bucket       int,   -- no longer used. kept for compatibility'), (37, '    span_name    text,'), (38, '    PRIMARY KEY ((service_name, bucket), span_name)'), (39, ')'), (40, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy', 'unchecked_tombstone_compaction': 'true', 'tombstone_threshold': '0.2'}""), (41, '    AND default_time_to_live =  259200;'), (42, ''), (43, 'CREATE TABLE IF NOT EXISTS zipkin.annotations_index ('), (44, '    annotation     blob,      // Annotation.value or BinaryAnnotation.key'), (45, '    bucket         int,       // avoids hot spots by distributing writes across each bucket, usually 0-9'), (46, '    ts             timestamp, // start timestamp of the span, truncated to millisecond precision'), (47, '    trace_id       bigint,    // trace ID. Included as a clustering column to avoid clashes (however unlikely)'), (48, '    PRIMARY KEY ((annotation, bucket), ts, trace_id)'), (49, ')'), (50, '    WITH CLUSTERING ORDER BY (ts DESC)'), (51, ""    AND compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_window_size_seconds': '86400'}""), (52, '    AND default_time_to_live =  259200;'), (53, ''), (54, 'CREATE TABLE IF NOT EXISTS zipkin.dependencies ('), (55, '    day          timestamp,'), (56, '    dependencies blob,'), (57, '    PRIMARY KEY (day)'), (58, ')'), (59, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy', 'unchecked_tombstone_compaction': 'true', 'tombstone_threshold': '0.2'}""), (60, '    AND default_time_to_live =  259200;'), (61, ''), (62, 'CREATE TABLE IF NOT EXISTS zipkin.service_names ('), (63, '    service_name text,'), (64, '    PRIMARY KEY (service_name)'), (65, ')'), (66, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy', 'unchecked_tombstone_compaction': 'true', 'tombstone_threshold': '0.2'}""), (67, '    AND default_time_to_live =  259200;'), (68, ''), (69, 'CREATE TABLE IF NOT EXISTS zipkin.traces ('), (70, '    trace_id  bigint,'), (71, '    ts        timestamp,'), (72, '    span_name text,'), (73, '    span      blob,'), (74, '    PRIMARY KEY (trace_id, ts, span_name)'), (75, ')'), (76, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_window_size_seconds': '86400'}""), (77, '    AND default_time_to_live =  604800;'), (78, ''), (79, 'CREATE TABLE IF NOT EXISTS zipkin.autocomplete_tags ('), (80, '    key     text,'), (81, '    value    text,'), (82, '    PRIMARY KEY (key, value)'), (83, ')'), (84, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy', 'unchecked_tombstone_compaction': 'true', 'tombstone_threshold': '0.2'}""), (85, '    AND default_time_to_live =  259200;'), (86, ''), (87, 'CREATE TABLE IF NOT EXISTS zipkin.remote_service_names ('), (88, '    service_name text,'), (89, '    remote_service_name text,'), (90, '    PRIMARY KEY (service_name, remote_service_name)'), (91, ')'), (92, ""    WITH compaction = {'class': 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy', 'unchecked_tombstone_compaction': 'true', 'tombstone_threshold': '0.2'}""), (93, '    AND default_time_to_live =  259200;')]}"
8,e37a7b79cbca3eb35423237a580028000038c011,zipkin-storage/cassandra-v1/src/test/resources/cassandra-schema-cql3-original.txt,cassandra-schema-cql3-original.txt,4,"{'added': [], 'deleted': [(1, ""CREATE KEYSPACE IF NOT EXISTS zipkin WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'};""), (2, ''), (3, 'CREATE TABLE IF NOT EXISTS zipkin.service_span_name_index ('), (4, '    service_span_name text,'), (5, '    ts                timestamp,'), (6, '    trace_id          bigint,'), (7, '    PRIMARY KEY (service_span_name, ts)'), (8, ') WITH CLUSTERING ORDER BY (ts DESC)'), (9, ""    AND compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_sstable_age_days': '1'};""), (10, ''), (11, 'CREATE TABLE IF NOT EXISTS zipkin.service_name_index ('), (12, '    service_name      text,'), (13, '    bucket            int,'), (14, '    ts                timestamp,'), (15, '    trace_id          bigint,'), (16, '    PRIMARY KEY ((service_name, bucket), ts)'), (17, ') WITH CLUSTERING ORDER BY (ts DESC)'), (18, ""    AND compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_sstable_age_days': '1'};""), (19, ''), (20, 'CREATE TABLE IF NOT EXISTS zipkin.span_names ('), (21, '    service_name text,'), (22, '    bucket       int,   -- no longer used. kept for compatibility'), (23, '    span_name    text,'), (24, '    PRIMARY KEY ((service_name, bucket), span_name)'), (25, "") WITH compaction = {'min_threshold': '4', 'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32'};""), (26, ''), (27, 'CREATE TABLE IF NOT EXISTS zipkin.annotations_index ('), (28, '    annotation     blob,'), (29, '    bucket         int,'), (30, '    ts             timestamp,'), (31, '    trace_id       bigint,'), (32, '    PRIMARY KEY ((annotation, bucket), ts)'), (33, ') WITH CLUSTERING ORDER BY (ts DESC)'), (34, ""    AND compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_sstable_age_days': '1'};""), (35, ''), (36, 'CREATE TABLE IF NOT EXISTS zipkin.dependencies ('), (37, '    day          timestamp,'), (38, '    dependencies blob,'), (39, '    PRIMARY KEY (day)'), (40, "") WITH compaction = {'min_threshold': '4', 'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32'};""), (41, ''), (42, 'CREATE TABLE IF NOT EXISTS zipkin.service_names ('), (43, '    service_name text,'), (44, '    PRIMARY KEY (service_name)'), (45, "") WITH compaction = {'min_threshold': '4', 'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32'};""), (46, ''), (47, 'CREATE TABLE IF NOT EXISTS zipkin.traces ('), (48, '    trace_id  bigint,'), (49, '    ts        timestamp,'), (50, '    span_name text,'), (51, '    span      blob,'), (52, '    PRIMARY KEY (trace_id, ts, span_name)'), (53, "") WITH compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_sstable_age_days': '1'};""), (54, ''), (55, 'CREATE TABLE IF NOT EXISTS zipkin.span_duration_index ('), (56, '    service_name  text,      // service name'), (57, '    span_name     text,      // span name, or blank for queries without span name'), (58, '    bucket        int,       // time bucket, calculated as ts/interval (in microseconds), for some pre-configured interval like 1h.'), (59, '    duration      bigint,    // span duration, in microseconds'), (60, '    ts            timestamp, // start timestamp of the span, truncated to millisecond precision'), (61, '    trace_id      bigint,    // trace ID. Included as a clustering column to avoid clashes (however unlikely)'), (62, '    PRIMARY KEY ((service_name, span_name, bucket), duration, ts, trace_id)'), (63, ') WITH CLUSTERING ORDER BY (duration DESC, ts DESC)'), (64, ""    AND compaction = {'class': 'org.apache.cassandra.db.compaction.DateTieredCompactionStrategy', 'max_sstable_age_days': '1'};"")]}"
9,e37a7b79cbca3eb35423237a580028000038c011,zipkin-storage/cassandra-v1/src/test/resources/simplelogger.properties,simplelogger.properties,4,"{'added': [], 'deleted': [(1, '# See https://www.slf4j.org/api/org/slf4j/impl/SimpleLogger.html for the full list of config options'), (2, 'org.slf4j.simpleLogger.logFile=System.out'), (3, 'org.slf4j.simpleLogger.defaultLogLevel=warn'), (4, 'org.slf4j.simpleLogger.showDateTime=true'), (5, 'org.slf4j.simpleLogger.dateTimeFormat=yyyy-MM-dd HH:mm:ss:SSS'), (6, ''), (7, '# Note: this will dump a large amount of data in the logs'), (8, '#org.slf4j.simpleLogger.log.zipkin2.storage.cassandra=info'), (9, '#org.slf4j.simpleLogger.log.com.datastax.oss.driver.internal.core.tracker.RequestLogger=trace'), (10, '# our tests check for schema portability, so hush lack of schema logs'), (11, 'org.slf4j.simpleLogger.log.zipkin2.storage.cassandra.v1.Schema=off'), (12, ""# don't spam about SASI""), (13, 'org.slf4j.simpleLogger.log.com.datastax.oss.driver.internal.core.cql.CqlRequestHandler=error'), (14, '# ignore connection close errors when polling for cassandra to start'), (15, 'org.slf4j.simpleLogger.log.com.datastax.oss.driver.internal.core.control.ControlConnection=error'), (16, '# ignore warnings about too many sessions'), (17, 'org.slf4j.simpleLogger.log.com.datastax.oss.driver.internal.core.session.DefaultSession=error'), (18, '# stop huge spam'), (19, 'org.slf4j.simpleLogger.log.org.testcontainers.dockerclient=off'), (20, ''), (21, '# Schema install takes a while. Log basic information to prevent CI from thinking things are hung'), (22, 'org.slf4j.simpleLogger.log.zipkin2.storage.cassandra.v1.CassandraStorageExtension=info')]}"
10,dfa97e5fa5287342629db5206319fe3df1ad62e5,zipkin-server/src/main/resources/zipkin-server-shared.yml,zipkin-server-shared.yml,5,"{'added': [(255, '    level: ""%clr{%5p} %clr{[%X{traceId}/%X{spanId}]}{yellow}""')], 'deleted': [(255, '    level: ""%clr(%5p) %clr([%X{traceId}/%X{spanId}]){yellow}""')]}"
11,c3177facb70565006eadfeb00465fbad4cd5339a,benchmarks/src/test/resources/create-datasource-and-dashboard.sh,create-datasource-and-dashboard.sh,5,"{'added': [(3, '# Copyright 2015-2020 The OpenZipkin Authors'), (18, 'if ! curl --retry 5 --retry-connrefused --retry-delay 0 -sf http://grafana:3000/api/datasources/name/prom; then')], 'deleted': [(3, '# Copyright 2015-2019 The OpenZipkin Authors'), (16, ''), (19, 'if ! curl --retry 5 --retry-connrefused --retry-delay 0 -sf http://grafana:3000/api/dashboards/name/prom; then')]}"
12,331f34846533cbe5f484f750ce097431717ab447,zipkin-server/src/main/resources/simplelogger.properties,simplelogger.properties,5,"{'added': [(11, ''), (12, ""# Unless it's serious we don't want to know.""), (13, 'org.slf4j.simpleLogger.log.com.linecorp.armeria=WARN'), (14, ""# But allow to say it's ready to serve requests""), (15, 'org.slf4j.simpleLogger.log.com.linecorp.armeria.server.Server=INFO')], 'deleted': [(11, 'org.slf4j.simpleLogger.log.com.linecorp.armeria.common.Flags=OFF'), (12, 'org.slf4j.simpleLogger.log.com.linecorp.armeria.common.util.SystemInfo=WARN'), (13, 'org.slf4j.simpleLogger.log.com.linecorp.armeria.server.docs.DocStringExtractor=OFF'), (14, 'org.slf4j.simpleLogger.log.com.linecorp.armeria.spring=WARN')]}"
13,331f34846533cbe5f484f750ce097431717ab447,zipkin-server/src/main/resources/zipkin-server-shared.yml,zipkin-server-shared.yml,5,"{'added': [(266, ""    # Unless it's serious we don't want to know""), (267, ""    com.linecorp.armeria: 'WARN'""), (268, ""    # # But allow to say it's ready to serve requests""), (269, ""    com.linecorp.armeria.server.Server: 'INFO'"")], 'deleted': [(266, ""    com.linecorp.armeria.common.Flags: 'OFF'""), (267, ""    # Hostname logging is not Zipkin's duty""), (268, ""    com.linecorp.armeria.common.util.SystemInfo: 'WARN'""), (269, ""    com.linecorp.armeria.server.docs.DocStringExtractor: 'OFF'""), (270, '    # Redundant to logging already done in c.l.a.s.Server'), (271, ""    com.linecorp.armeria.spring: 'WARN'"")]}"
